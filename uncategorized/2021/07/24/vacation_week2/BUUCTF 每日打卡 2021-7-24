<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Roboto:300,300italic,400,400italic,700,700italic|Source Sans Pro:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">
  <link rel="stylesheet" href="/lib/pace/pace-theme-minimal.min.css">
  <script src="/lib/pace/pace.min.js"></script>

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"luozj1020.github.io","root":"/","scheme":"Pisces","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":true,"pangu":false,"comments":{"style":"tabs","active":"livers","storage":false,"lazyload":true,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"path":"search.xml"};
  </script>

  <meta name="description" content="引言 台风天，还练了一天车，淦 [SUCTF2019]MT 来填坑了 首先看加密代码： 123456789101112131415161718192021222324from Crypto.Util import numberfrom flag import flagdef convert(m):    m &#x3D; m ^ m &gt;&gt; 13    m &#x3D; m ^ m &lt;&lt;">
<meta property="og:type" content="article">
<meta property="og:title" content="BUUCTF 每日打卡 2021-7-24">
<meta property="og:url" content="https://luozj1020.github.io/uncategorized/2021/07/24/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-24">
<meta property="og:site_name" content="Σ2333! の 博客">
<meta property="og:description" content="引言 台风天，还练了一天车，淦 [SUCTF2019]MT 来填坑了 首先看加密代码： 123456789101112131415161718192021222324from Crypto.Util import numberfrom flag import flagdef convert(m):    m &#x3D; m ^ m &gt;&gt; 13    m &#x3D; m ^ m &lt;&lt;">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://img-blog.csdnimg.cn/10878cc1f7444174baf87e11b705b85e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70">
<meta property="og:image" content="https://img-blog.csdnimg.cn/ab316bbef8154b5b9629ca48f7b1efa9.png">
<meta property="og:image" content="https://img-blog.csdnimg.cn/3580010fbd854aa38576b6f24675a5d6.png">
<meta property="og:image" content="https://img-blog.csdnimg.cn/6b4452713e6c4479b4bf6b97211f4e2e.png">
<meta property="og:image" content="https://img-blog.csdnimg.cn/6cd66566e6504f699416464eb1a10ae4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70">
<meta property="article:published_time" content="2021-07-23T16:00:00.000Z">
<meta property="article:modified_time" content="2021-08-12T08:46:08.099Z">
<meta property="article:author" content="Σ2333!">
<meta property="article:tag" content="Crypto">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img-blog.csdnimg.cn/10878cc1f7444174baf87e11b705b85e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70">

<link rel="canonical" href="https://luozj1020.github.io/uncategorized/2021/07/24/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-24">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>BUUCTF 每日打卡 2021-7-24 | Σ2333! の 博客</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<!-- hexo injector head_end start -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-math@4.0.0/dist/style.css">
<!-- hexo injector head_end end --><link rel="alternate" href="/atom.xml" title="Σ2333! の 博客" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">

<!-- 加入APlayer音乐播放器 -->
<link rel="stylesheet" href="/dist/APlayer.min.css">
<div id="aplayer"></div>
<script type="text/javascript" src="/dist/APlayer.min.js"></script>
<script type="text/javascript" src="/dist/music.js"></script>

  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">Σ2333! の 博客</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签</a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
        <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off"
           placeholder="搜索..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div id="search-result">
  <div id="no-result">
    <i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>
  </div>
</div>

    </div>
  </div>

</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://luozj1020.github.io/uncategorized/2021/07/24/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-24">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="Σ2333!">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Σ2333! の 博客">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          BUUCTF 每日打卡 2021-7-24
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">发表于</span>

              <time title="创建时间：2021-07-24 00:00:00" itemprop="dateCreated datePublished" datetime="2021-07-24T00:00:00+08:00">2021-07-24</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">更新于</span>
                <time title="修改时间：2021-08-12 16:46:08" itemprop="dateModified" datetime="2021-08-12T16:46:08+08:00">2021-08-12</time>
              </span>

          
            <span class="post-meta-item" title="阅读次数" id="busuanzi_container_page_pv" style="display: none;">
              <span class="post-meta-item-icon">
                <i class="fa fa-eye"></i>
              </span>
              <span class="post-meta-item-text">阅读次数：</span>
              <span id="busuanzi_value_page_pv"></span>
            </span>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <h1 id="引言">引言</h1>
<p>台风天，还练了一天车，淦</p>
<h2 id="suctf2019mt">[SUCTF2019]MT</h2>
<p>来填坑了 首先看加密代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">transformed_flag = transform(flag[<span class="number">5</span>:-<span class="number">1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;transformed_flag:&#x27;</span>, transformed_flag</span><br><span class="line"><span class="comment"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></span><br></pre></td></tr></table></figure>
<p>看到这个<code>convert</code>函数，我就有些胆怯了 这个位运算看起来完全打乱了加密内容（而且之前碰到类似的题目都没做出来） 尤其是第二三步，感觉完全乱了 看了一眼<a target="_blank" rel="noopener" href="https://blog.csdn.net/m0_49109277/article/details/117324488">别人的wp</a>，受到了启发 发现<code>bin(2029229568)</code>后9位都是0，而<code>bin(2245263360)</code>后17位(其实是18位)都是0，与移位的位数相同，那就好办了 首先要明确一件事：位运算符的优先级 移位(&gt;&gt;和&lt;&lt;) &gt; 与运算(&amp;) &gt; 异或运算(^) 就以'abcd'为例，推出第四和第三步的解密过程（第一和第二步同理） 因为我没有装python2的环境，就用python3把加密代码重写了一遍，做了一点小修改 代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = bytes_to_long(block.encode())</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(new_message, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">cipher = transform(flag)</span><br></pre></td></tr></table></figure>
<h3 id="第四步操作">第四步操作</h3>
<p>首先要知道，"&gt;&gt;"是二进制位向右移动，低位丢弃，高位补0 经过前三步加密的二进制结果为（当然，解密时以下结果是未知的）： <strong>10100101011101011110111001110111</strong>记为m4 那么 m4&gt;&gt;19 的结果为 <strong>0000000000000000000101001010111</strong> 01011110111001110111 高位补0&lt;- -&gt;低位丢弃 接下来是异或运算 解密需要用到异或运算的两个性质： 1、若a=b ^ c，则c=a ^ b 2、a=a ^ 0 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">按位加密的过程中，m4的前19位都是和0做异或运算，也就是说加密结果cipher的前19位与m4是相同的，由此可以得到m4的前19位</span><br><span class="line">又因为**m4后13位 ^ m4&gt;&gt;19的后13位 = m4后13位 ^ m4的前13位 = cipher的后13位**</span><br><span class="line">所以**cipher的后13位 ^ m4的前13位 = m4后13位**</span><br><span class="line">由此可以得到完整的m4</span><br><span class="line">解密代码如下：</span><br><span class="line">```python</span><br><span class="line">block = bytes_to_long((cipher[i * 4: i * 4 + 4]))</span><br><span class="line">block = bin(block)[2:].zfill(32)</span><br><span class="line"># step4 decode</span><br><span class="line">m4 = block[:19] + bin(int(block[:13], 2) ^ int(block[19:], 2))[2:].zfill(13)</span><br><span class="line">print(m4)</span><br><span class="line">print(long_to_bytes(int(m4, 2)))</span><br></pre></td></tr></table></figure></p>
<h3 id="第三步操作">第三步操作</h3>
<p>首先要知道，"&lt;&lt;"是二进制位向左移动，高位丢弃，低位补0；"&amp;"是按位做与运算，有0出0，全1出1 经过前两步加密的二进制结果为（当然，解密时以下结果是未知的）： <strong>00100001101100011110111001110111</strong>记为m3 00100001101100011 <strong>11011100111011100000000000000000</strong> 高位丢弃&lt;- -&gt;低位补0 接下来是与运算 首先看bin(2245263360)='0b<strong>10000101110101000000000000000000</strong>' 发现2245263360的后17位都是0 那么，<strong>m3&lt;&lt;17的后17位 &amp; 2245263360的后17位 = 00000000000000000(17个0)</strong> 与第四步解密操作相同，就可以得到m3的后17位就是m4的后17位 又因为<strong>m3前15位 ^ m3&lt;&lt;17的前15位 &amp; 2245263360的前15位 = m3前15位 ^ m3的后15位 &amp; 2245263360的前15位 = m4的前15位</strong> 由此可以得到完整的m3 解密代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step3 decode</span></span><br><span class="line">block = m4</span><br><span class="line">m3 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">17</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2245263360</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">15</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">15</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">15</span>) + block[<span class="number">15</span>:]</span><br><span class="line"><span class="built_in">print</span>(m3)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure> 第二和第一步的解密类似，就是需要重复操作几次 完整的测试解密代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = bytes_to_long(block.encode())</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(new_message, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">cipher = transform(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(bytes_to_long(cipher))[<span class="number">2</span>:].zfill(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">4</span>):</span><br><span class="line">    block = bytes_to_long((cipher[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]))</span><br><span class="line">    block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># step4 decode</span></span><br><span class="line">    m4 = block[:<span class="number">19</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">19</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    <span class="built_in">print</span>(m4)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m4, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step3 decode</span></span><br><span class="line">    block = m4</span><br><span class="line">    m3 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">17</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2245263360</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">15</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">15</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">15</span>) + block[<span class="number">15</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m3)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step2 decode</span></span><br><span class="line">    block = m3</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">23</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">23</span>:]</span><br><span class="line">    block = m3[:<span class="number">14</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">14</span>:]</span><br><span class="line">    block = m3[:<span class="number">5</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">9</span>:<span class="number">14</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">5</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">5</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">5</span>) + block[<span class="number">5</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m2)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step1 decode</span></span><br><span class="line">    block = m2</span><br><span class="line">    m1 = block[:<span class="number">13</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">26</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    block = m1 + block[<span class="number">26</span>:]</span><br><span class="line">    m1 = block[:<span class="number">26</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">19</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">26</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    plain += m1</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plain, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure> 结果是对的 <img data-src="https://img-blog.csdnimg.cn/10878cc1f7444174baf87e11b705b85e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后就把测试解密的代码应用于transformed_flag上 这里有个地方有点麻烦，就是原加密代码还要一步：<code>transformed_flag = transform(flag[5:-1].decode('hex')).encode('hex')</code> 而python3没有<code>decode('hex')</code>和<code>encode('hex')</code>，可以参考<a target="_blank" rel="noopener" href="https://www.cnblogs.com/zhaijiahui/p/9597935.html">Python3 字符串与hex之间的相互转换</a> <code>.decode('hex')</code>对应于<code>bytes.fromhex()</code>，<code>.encode('hex')</code>对应于<code>.hex()</code> 所以，完整的解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">4</span>):</span><br><span class="line">    block = bytes_to_long((cipher[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]))</span><br><span class="line">    block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># step4 decode</span></span><br><span class="line">    m4 = block[:<span class="number">19</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">19</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    <span class="built_in">print</span>(m4)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m4, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step3 decode</span></span><br><span class="line">    block = m4</span><br><span class="line">    m3 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">17</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2245263360</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">15</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">15</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">15</span>) + block[<span class="number">15</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m3)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step2 decode</span></span><br><span class="line">    block = m3</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">23</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">23</span>:]</span><br><span class="line">    block = m3[:<span class="number">14</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">14</span>:]</span><br><span class="line">    block = m3[:<span class="number">5</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">9</span>:<span class="number">14</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">5</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">5</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">5</span>) + block[<span class="number">5</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m2)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step1 decode</span></span><br><span class="line">    block = m2</span><br><span class="line">    m1 = block[:<span class="number">13</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">26</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    block = m1 + block[<span class="number">26</span>:]</span><br><span class="line">    m1 = block[:<span class="number">26</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">19</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">26</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    plain += m1</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plain, <span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plain, <span class="number">2</span>)).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/ab316bbef8154b5b9629ca48f7b1efa9.png" alt="在这里插入图片描述" /> 即为flag</p>
<h3 id="未曾设想的道路">未曾设想的道路</h3>
<p>正如wp中所说，还有一种通过反复加密得到结果的解法 这里给出python3的代码： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">transformed_flag = <span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>)</span><br><span class="line"><span class="comment"># assert (transform(bytes.fromhex(&#x27;84b45f89af22ce7e67275bdc&#x27;)).hex() == transformed_flag)</span></span><br><span class="line">c = cipher</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = transform(c.zfill(<span class="built_in">len</span>(cipher)))</span><br><span class="line">    <span class="built_in">print</span>(c.<span class="built_in">hex</span>())</span><br><span class="line">    s.add(c.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="keyword">if</span> c.<span class="built_in">hex</span>() == transformed_flag:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure> 至于为什么，是因为本题使用的加密算法是<a target="_blank" rel="noopener" href="https://zh.wikipedia.org/zh-cn/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95">梅森旋转算法（Mersenne twister）</a>，是一种伪随机数生成算法，该算法的一个更新的和更常用的是MT19937, 32位字长，对应了题目 并且该算法生成的随机数具有周期性，这也就不难理解为什么一直加密密文能得到明文，因为经过一个周期后得到的还是密文，那么上一个就是明文了 上述解密代码结果为： <img data-src="https://img-blog.csdnimg.cn/3580010fbd854aa38576b6f24675a5d6.png" alt="在这里插入图片描述" /> 不难发现其周期为61319</p>
<p>更多关于MT19937伪随机数生成算法的体型可以参考madmonkey前辈的<a target="_blank" rel="noopener" href="https://badmonkey.site/archives/mt19937.html#%E6%B5%85%E6%9E%90mt19937%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95">浅析mt19937伪随机数生成算法</a> 其中介绍了与第一种方法相同的解法，只不过和wp一样采用模块化的代码，将解密步骤打包成函数 这里给出参照其中代码的解密代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_number</span>(<span class="params">y</span>):</span></span><br><span class="line">    y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">    y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">    y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">    y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> y &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">y</span>):</span></span><br><span class="line">    y = inverse_right(y, <span class="number">19</span>)</span><br><span class="line">    y = inverse_left_mask(y, <span class="number">17</span>, <span class="number">2245263360</span>)</span><br><span class="line">    y = inverse_left_mask(y, <span class="number">9</span>, <span class="number">2029229568</span>)</span><br><span class="line">    y = inverse_right(y, <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> y &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">transformed_flag = <span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>)</span><br><span class="line">new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">4</span>):</span><br><span class="line">    block = cipher[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">    block = bytes_to_long(block)</span><br><span class="line">    block = recover(block)</span><br><span class="line">    block = long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">    new_message += block</span><br><span class="line"><span class="built_in">print</span>(new_message.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>
<p>结果是相同的： <img data-src="https://img-blog.csdnimg.cn/6b4452713e6c4479b4bf6b97211f4e2e.png" alt="在这里插入图片描述" /> 另一种方法是<strong>黑箱方法</strong>，将密文和明文的二进制编码视为两个向量<span class="math inline">\(a,b\)</span>，而由加密方法可知，两个向量存在线性关系，即存在一个方阵<span class="math inline">\(M\)</span>，使得<span class="math inline">\(a=Mb\)</span> 具体线性关系如下： <img data-src="https://img-blog.csdnimg.cn/6cd66566e6504f699416464eb1a10ae4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这种方法没怎么看懂，以后有机会再说（溜了溜了）</p>
<h2 id="结语">结语</h2>
<p>昨天(7.24)写了一点，但没写完 因为方法二的代码出了bug，怎么都没法解决，感谢Phoenix大佬帮我改了 今天(7.25)争取加更一期 （你问我7.23干嘛去了？补了一天番[doge]） 希望继续坚持</p>

    </div>

    
    
    
        

<div>
<ul class="post-copyright">
  <li class="post-copyright-author">
    <strong>本文作者： </strong>Σ2333!
  </li>
  <li class="post-copyright-link">
    <strong>本文链接：</strong>
    <a href="https://luozj1020.github.io/uncategorized/2021/07/24/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-24" title="BUUCTF 每日打卡 2021-7-24">https://luozj1020.github.io/uncategorized/2021/07/24/vacation_week2/BUUCTF 每日打卡 2021-7-24</a>
  </li>
  <li class="post-copyright-license">
    <strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="noopener" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> 许可协议。转载请注明出处！
  </li>
</ul>
</div>

        

  <div class="followme">
    <p>欢迎关注我的其它发布渠道</p>

    <div class="social-list">

        <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
        </div>
    </div>
  </div>

      
      <div> <div> <div style="text-align:center;color:#bfbfbf;font-size:16px;"> <span>-------- 本文结束 </span> <i class="fa fa-paw"></i> <span> 感谢阅读 --------</span> </div> </div>
 </div>

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Crypto/" rel="tag"><i class="fa fa-tags"></i> Crypto</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/uncategorized/2021/07/22/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-22" rel="prev" title="BUUCTF 每日打卡 2021-7-22">
      <i class="fa fa-chevron-left"></i> BUUCTF 每日打卡 2021-7-22
    </a></div>
      <div class="post-nav-item">
    <a href="/uncategorized/2021/07/25/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-25" rel="next" title="BUUCTF 每日打卡 2021-7-25">
      BUUCTF 每日打卡 2021-7-25 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%BC%95%E8%A8%80"><span class="nav-number">1.</span> <span class="nav-text">引言</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#suctf2019mt"><span class="nav-number">1.1.</span> <span class="nav-text">[SUCTF2019]MT</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%93%8D%E4%BD%9C"><span class="nav-number">1.1.1.</span> <span class="nav-text">第四步操作</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%93%8D%E4%BD%9C"><span class="nav-number">1.1.2.</span> <span class="nav-text">第三步操作</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%9C%AA%E6%9B%BE%E8%AE%BE%E6%83%B3%E7%9A%84%E9%81%93%E8%B7%AF"><span class="nav-number">1.1.3.</span> <span class="nav-text">未曾设想的道路</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%BB%93%E8%AF%AD"><span class="nav-number">1.2.</span> <span class="nav-text">结语</span></a></li></ol></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">Σ2333!</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">70</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-tags">
        <span class="site-state-item-count">1</span>
        <span class="site-state-item-name">标签</span>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Σ2333!</span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> & <a href="https://pisces.theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Pisces</a> 强力驱动
  </div>

        
<div class="busuanzi-count">
  <script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
    <span class="post-meta-item" id="busuanzi_container_site_uv" style="display: none;">
      <span class="post-meta-item-icon">
        <i class="fa fa-user"></i>
      </span>
      <span class="site-uv" title="总访客量">
        <span id="busuanzi_value_site_uv"></span>
      </span>
    </span>
    <span class="post-meta-divider">|</span>
    <span class="post-meta-item" id="busuanzi_container_site_pv" style="display: none;">
      <span class="post-meta-item-icon">
        <i class="fa fa-eye"></i>
      </span>
      <span class="site-pv" title="总访问量">
        <span id="busuanzi_value_site_pv"></span>
      </span>
    </span>
</div>








      </div>
    </footer>
  </div>

  
  
  <script color='255,250,250' opacity='0.7' zIndex='-1' count='80' src="/lib/canvas-nest/canvas-nest.min.js"></script>
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>




  




  
<script src="/js/local-search.js"></script>













  

  
      

<script>
  if (typeof MathJax === 'undefined') {
    window.MathJax = {
      loader: {
        source: {
          '[tex]/amsCd': '[tex]/amscd',
          '[tex]/AMScd': '[tex]/amscd'
        }
      },
      tex: {
        inlineMath: {'[+]': [['$', '$']]},
        tags: 'ams'
      },
      options: {
        renderActions: {
          findScript: [10, doc => {
            document.querySelectorAll('script[type^="math/tex"]').forEach(node => {
              const display = !!node.type.match(/; *mode=display/);
              const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);
              const text = document.createTextNode('');
              node.parentNode.replaceChild(text, node);
              math.start = {node: text, delim: '', n: 0};
              math.end = {node: text, delim: '', n: 0};
              doc.math.push(math);
            });
          }, '', false],
          insertedScript: [200, () => {
            document.querySelectorAll('mjx-container').forEach(node => {
              let target = node.parentNode;
              if (target.nodeName.toLowerCase() === 'li') {
                target.parentNode.classList.add('has-jax');
              }
            });
          }, '', false]
        }
      }
    };
    (function () {
      var script = document.createElement('script');
      script.src = '//cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
      script.defer = true;
      document.head.appendChild(script);
    })();
  } else {
    MathJax.startup.document.state(0);
    MathJax.texReset();
    MathJax.typeset();
  }
</script>

    

  


  

  <script async src="/js/cursor/fireworks.js"></script>




  <script src="/js/wobblewindow.js"></script>
  <script>
    //只在桌面版网页启用特效
    if( window.innerWidth > 768  ){
      $(document).ready(function () {
        
          $('#header').wobbleWindow({
            radius: 50,
            movementTop: false,
            movementLeft: false,
            movementRight: false,
            debug: false,
          });
        

        
          $('#sidebar').wobbleWindow({
            radius: 50,
            movementLeft: false,
            movementTop: false,
            movementBottom: false,
            position: 'fixed',
            debug: false,
          });
        

        
          $('#footer').wobbleWindow({
            radius: 50,
            movementBottom: false,
            movementLeft: false,
            movementRight: false,
            offsetX: ,
            position: 'absolute',
            debug: false,
          });
        
      });
    }
  </script>




  <script src="/js/activate-power-mode.min.js"></script>
  <script>
    POWERMODE.colorful = true;
    POWERMODE.shake = false;
    document.body.addEventListener('input', POWERMODE);
  </script>

</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"/>
<script src="/live2d-widget/autoload.js"></script>

<!-- 引入jQuery -->
<script type="text/javascript" src="//libs.baidu.com/jquery/1.8.3/jquery.min.js"></script>


<!-- 页面点击小红心 -->
<script type="text/javascript" src="/js/clicklove.js"></script>

<!-- 雪花特效2 -->
<script type="text/javascript" src="/js/snow2.js"></script>
