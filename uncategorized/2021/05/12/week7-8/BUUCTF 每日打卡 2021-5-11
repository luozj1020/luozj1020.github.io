<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"luozj1020.github.io","root":"/","scheme":"Muse","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}}};
  </script>

  <meta name="description" content="BUUCTF 每日打卡 2021-5-12 引言 求 wp 的时候，大佬们告诉我 2021 红帽杯的 crypto 都是原题。。。 一共有三份 wp 其中两份的思路是一样（也就是原题的解答），另外一份是和我同级的 Pheonix dl 当时的解答（感谢 Pheonix dl！）花了一小时解出来的 [2021 红帽杯]primegame 原题加密代码如下： 12345678910111213">
<meta property="og:type" content="article">
<meta property="og:title" content="BUUCTF 每日打卡 2021-5-12">
<meta property="og:url" content="https://luozj1020.github.io/uncategorized/2021/05/12/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-11">
<meta property="og:site_name" content="Σ2333! の 博客">
<meta property="og:description" content="BUUCTF 每日打卡 2021-5-12 引言 求 wp 的时候，大佬们告诉我 2021 红帽杯的 crypto 都是原题。。。 一共有三份 wp 其中两份的思路是一样（也就是原题的解答），另外一份是和我同级的 Pheonix dl 当时的解答（感谢 Pheonix dl！）花了一小时解出来的 [2021 红帽杯]primegame 原题加密代码如下： 12345678910111213">
<meta property="og:locale" content="en_US">
<meta property="og:image" content="https://img-blog.csdnimg.cn/20210511161219566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70">
<meta property="og:image" content="https://img-blog.csdnimg.cn/2021051123223440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70">
<meta property="og:image" content="https://img-blog.csdnimg.cn/20210511232614320.png">
<meta property="article:published_time" content="2021-05-11T16:00:00.000Z">
<meta property="article:modified_time" content="2021-08-12T07:49:47.728Z">
<meta property="article:author" content="Σ2333!">
<meta property="article:tag" content="Crypto">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://img-blog.csdnimg.cn/20210511161219566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70">

<link rel="canonical" href="https://luozj1020.github.io/uncategorized/2021/05/12/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-11">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'en'
  };
</script>

  <title>BUUCTF 每日打卡 2021-5-12 | Σ2333! の 博客</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<!-- hexo injector head_end start -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-math@4.0.0/dist/style.css">
<!-- hexo injector head_end end --><link rel="alternate" href="/atom.xml" title="Σ2333! の 博客" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">Σ2333! の 博客</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="en">
    <link itemprop="mainEntityOfPage" href="https://luozj1020.github.io/uncategorized/2021/05/12/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-11">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="Σ2333!">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Σ2333! の 博客">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          BUUCTF 每日打卡 2021-5-12
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">Posted on</span>

              <time title="Created: 2021-05-12 00:00:00" itemprop="dateCreated datePublished" datetime="2021-05-12T00:00:00+08:00">2021-05-12</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Modified: 2021-08-12 15:49:47" itemprop="dateModified" datetime="2021-08-12T15:49:47+08:00">2021-08-12</time>
              </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <h1 id="buuctf-每日打卡-2021-5-12">BUUCTF 每日打卡 2021-5-12</h1>
<h2 id="引言">引言</h2>
<p>求 wp 的时候，大佬们告诉我 2021 红帽杯的 crypto 都是原题。。。 一共有三份 wp 其中两份的思路是一样（也就是原题的解答），另外一份是和我同级的 Pheonix dl 当时的解答（感谢 Pheonix dl！）花了一小时解出来的</p>
<h2 id="红帽杯primegame">[2021 红帽杯]primegame</h2>
<p><a target="_blank" rel="noopener" href="https://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/">原题</a>加密代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random shuffle the primes</span></span><br><span class="line"><span class="comment"># Now you cannot know the order</span></span><br><span class="line">seed = struct.unpack(<span class="string">&#x27;&lt;i&#x27;</span>, flag[<span class="number">5</span>:<span class="number">9</span>])[<span class="number">0</span>]</span><br><span class="line">random.seed(seed)</span><br><span class="line">random.shuffle(primes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use ln function</span></span><br><span class="line"><span class="comment"># Now you cannot know the key itself</span></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sum values</span></span><br><span class="line"><span class="comment"># Now you cannot know the flag</span></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br></pre></td></tr></table></figure> 该代码的结构如下： 1、查找不超过100的素数。（共25个） 2、通过使用 flag 的第6到第9字节作为随机种子，可以对十进制素数数组进行改组。 3、每个改组的素数都取以 e 为底的对数，十进制精度为100。 4、将上一步得到的 ln 值乘以标记的每个字节所获得的值相加，乘以 2 ** 256 然后四舍五入。</p>
<p>对比红帽杯的加密代码： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]</span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 获取 [2,90] 的素数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j: <span class="comment"># i^2 &gt;= j</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span> <span class="comment"># 保留 100 位小数</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)): <span class="comment"># len(primes) = 24</span></span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"><span class="comment"># 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"><span class="comment"># 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br></pre></td></tr></table></figure> 发现原题代码结构中的第二步（也就是打乱素数数组顺序）是没有的（我说哪来的 random 和 struct 库😂） 而且将 flag 分成两段加密，因此给了两个 ct</p>
<p>首先，这可以转化成<a target="_blank" rel="noopener" href="https://blog.csdn.net/qq_33458986/article/details/104366177?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control">背包加密问题</a> 背包加密是对密文的二进制字符串进行加密 至于为什么这道题是背包加密，就我个人的理解的话，大多数加密问题都可以转化成背包问题解决（例如 RSA 中的 CopperSmith 攻击法），给我灵感的是 <code>2 ** 256</code> 也就是 <span class="math inline">\(2^{2^{8}}\)</span>，联想到字符 8 位二进制（虽然没什么根据就是了） 最后也没有思路就是了。。。</p>
<p>wp 的解法也都是转化为对两段分别进行背包问题求解</p>
<h3 id="peonix-dl-解法">Peonix dl 解法</h3>
<p>dl 的手稿： <img src="https://img-blog.csdnimg.cn/20210511161219566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 首先，将 flag 前24位转化为 24*8 位的二进制 因为原来的 keys 是直接对每位 flag 进行操作，而现在是要对每位二进制进行操作，所以要重新构造 keys 代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>*<span class="number">8</span>):</span><br><span class="line">    flag.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>*<span class="number">8</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>*<span class="number">8</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>*<span class="number">8</span>:]</span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(math.floor(<span class="number">2</span> ** <span class="number">256</span> * (<span class="number">2</span> ** (i % <span class="number">8</span>)) * Decimal(primes[i//<span class="number">8</span>]).ln()))</span><br><span class="line"><span class="built_in">print</span>(keys)</span><br></pre></td></tr></table></figure>
<p>需要注意的是这里的二进制字符串是倒序的，之后解密需要倒回来 如手稿中所写的，由于对 keys 向下取整了，所以答案会偏小，所以需要调整 c（据说调整花了大部分时间，这也是这个方案的一个缺陷） 然后接下来就是构造矩阵，用 LLL 算法解出最短向量得到结果了 这里注意最后结果是一个最后一位是 0，其他都是 -1 或 1 的向量，有把 -1 替换成 0 和 1 替换成 0 并且 -1 替换成 1 两种情况，需要分别尝试 <img src="https://img-blog.csdnimg.cn/2021051123223440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 怎么构造矩阵参照<a target="_blank" rel="noopener" href="https://blog.csdn.net/qq_33458986/article/details/104366177?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control">背包加密问题</a>，至于 LLL 算法，曾经在研究 cryptohack 的时候 dl 尝试复现过，但是非常慢（当然我也试过，但是失败了），用 sagemath 封装好的速度会比较快 最后把结果倒序之后 long_to_bytes 就行了 结果为： <img src="https://img-blog.csdnimg.cn/20210511232614320.png" alt="在这里插入图片描述" /> 我个人认为难点在于构造 keys 以及想到去构造 keys ，还有就是存在需要调整 c 这个缺陷 至于其他部分，想到背包问题就是顺理成章的了</p>
<h3 id="原题解法">原题解法</h3>
<p>在<a target="_blank" rel="noopener" href="https://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/">原题</a>中，将 flag 直接作为字符串考虑，而不是转化为二进制再求解 代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(Decimal(<span class="built_in">int</span>(primes[i])).ln())</span><br><span class="line"></span><br><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> keys:</span><br><span class="line">    arr.append(<span class="built_in">int</span>(v * <span class="built_in">int</span>(<span class="number">16</span>) ** <span class="built_in">int</span>(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line">ct = <span class="number">737384863737803670841307970259513146291422299366557325168325233349136771464845311</span></span><br><span class="line"><span class="comment">#ct = 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">res</span>):</span></span><br><span class="line">    h = Decimal(<span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys)):</span><br><span class="line">        h += res[i] * keys[i]</span><br><span class="line"></span><br><span class="line">    ct = <span class="built_in">int</span>(h * <span class="built_in">int</span>(<span class="number">16</span>)**<span class="built_in">int</span>(<span class="number">64</span>))</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">N</span>):</span></span><br><span class="line">    ln = <span class="built_in">len</span>(arr)</span><br><span class="line">    A = Matrix(ZZ, ln + <span class="number">1</span>, ln + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">        A[i, ln] = arr[i] // N</span><br><span class="line">        A[ln, i] = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    A[ln, ln] = ct // N</span><br><span class="line"></span><br><span class="line">    res = A.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln + <span class="number">1</span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">            <span class="keyword">if</span> -<span class="number">64</span> &lt;= res[i][j] &lt; <span class="number">64</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            vec = [<span class="built_in">int</span>(v + <span class="number">64</span>) <span class="keyword">for</span> v <span class="keyword">in</span> res[i][:-<span class="number">1</span>]]</span><br><span class="line">            ret = encrypt(vec)</span><br><span class="line">            <span class="keyword">if</span> ret == ct:</span><br><span class="line">                <span class="built_in">print</span>(N, <span class="built_in">bytes</span>(vec))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>, ret, <span class="built_in">bytes</span>(vec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    f(i)</span><br></pre></td></tr></table></figure> 由于 flag 实际上是可以输入的值，所以将这个问题视为0~127背包而不是0/1背包，因此它们不能超过128，因此我们将边界设置为0~127。 类似于上文所述的方法构造矩阵，对角线位置相同，而将最后一行前面的数替换成 64 (128/2)，不同上文的 1 (2/1) 而在寻找最短向量的时候将范围限制在 [-64, 64] ，不同于上文的 -1/1 而至于整除 N 的操作，可以理解为是一种误差处理的方式，由于加密时乘 <span class="math inline">\(2^{256}\)</span> 造成了很大误差，所以将其放在 N 环上而不是整数环上讨论（我也不懂这是什么道理，但是感觉很有道理） 而 keys 就和原来一样，只是换了个表示</p>
<h2 id="结语">结语</h2>
<p>事实上，类似的问题也可以用类似的方法解，如原题 wp 中提到的 cryptohack 中的一题 太晚了明天再说 分析 wp 究竟能学到什么呢？只能说长点见识吧，我见的还是太少了 太弱小了，因为 我们没有力量~ 希望继续坚持</p>

    </div>

    
    
    
        

  <div class="followme">
    <p>Welcome to my other publishing channels</p>

    <div class="social-list">

        <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
        </div>
    </div>
  </div>


      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Crypto/" rel="tag"># Crypto</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/uncategorized/2021/05/12/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-12" rel="prev" title="BUUCTF 每日打卡 2021-5-12">
      <i class="fa fa-chevron-left"></i> BUUCTF 每日打卡 2021-5-12
    </a></div>
      <div class="post-nav-item">
    <a href="/uncategorized/2021/05/13/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-13" rel="next" title="BUUCTF 每日打卡 2021-5-13">
      BUUCTF 每日打卡 2021-5-13 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#buuctf-%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1-2021-5-12"><span class="nav-number">1.</span> <span class="nav-text">BUUCTF 每日打卡 2021-5-12</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%BC%95%E8%A8%80"><span class="nav-number">1.1.</span> <span class="nav-text">引言</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%BA%A2%E5%B8%BD%E6%9D%AFprimegame"><span class="nav-number">1.2.</span> <span class="nav-text">[2021 红帽杯]primegame</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#peonix-dl-%E8%A7%A3%E6%B3%95"><span class="nav-number">1.2.1.</span> <span class="nav-text">Peonix dl 解法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8E%9F%E9%A2%98%E8%A7%A3%E6%B3%95"><span class="nav-number">1.2.2.</span> <span class="nav-text">原题解法</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%BB%93%E8%AF%AD"><span class="nav-number">1.3.</span> <span class="nav-text">结语</span></a></li></ol></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">Σ2333!</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">66</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-tags">
        <span class="site-state-item-count">1</span>
        <span class="site-state-item-name">tags</span>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Σ2333!</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> & <a href="https://muse.theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Muse</a>
  </div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/muse.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  
      

<script>
  if (typeof MathJax === 'undefined') {
    window.MathJax = {
      loader: {
        source: {
          '[tex]/amsCd': '[tex]/amscd',
          '[tex]/AMScd': '[tex]/amscd'
        }
      },
      tex: {
        inlineMath: {'[+]': [['$', '$']]},
        tags: 'ams'
      },
      options: {
        renderActions: {
          findScript: [10, doc => {
            document.querySelectorAll('script[type^="math/tex"]').forEach(node => {
              const display = !!node.type.match(/; *mode=display/);
              const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);
              const text = document.createTextNode('');
              node.parentNode.replaceChild(text, node);
              math.start = {node: text, delim: '', n: 0};
              math.end = {node: text, delim: '', n: 0};
              doc.math.push(math);
            });
          }, '', false],
          insertedScript: [200, () => {
            document.querySelectorAll('mjx-container').forEach(node => {
              let target = node.parentNode;
              if (target.nodeName.toLowerCase() === 'li') {
                target.parentNode.classList.add('has-jax');
              }
            });
          }, '', false]
        }
      }
    };
    (function () {
      var script = document.createElement('script');
      script.src = '//cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
      script.defer = true;
      document.head.appendChild(script);
    })();
  } else {
    MathJax.startup.document.state(0);
    MathJax.texReset();
    MathJax.typeset();
  }
</script>

    

  

</body>
</html>
