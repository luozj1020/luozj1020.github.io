<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-15</title>
    <url>/uncategorized/2021/07/15/vacation_week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-15</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="mrctf2020easy_rsa">[MRCTF2020]Easy_RSA</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&quot;MRCTF&#123;XXXX&#125;&quot;</span></span><br><span class="line">base = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    A = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        A = getPrime(N)</span><br><span class="line">        <span class="keyword">if</span> A % <span class="number">8</span> == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_p</span>():</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_n = &quot;</span>, n)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_F_n = &quot;</span>, F_n)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (-<span class="number">1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_q</span>():</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_n = &quot;</span>, n)</span><br><span class="line">    e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> gcd(e, F_n) != <span class="number">1</span>:</span><br><span class="line">        e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    d = invert(e, F_n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_E_D = &quot;</span>, e * d)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (-<span class="number">1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _E = base</span><br><span class="line">    _P = gen_p()</span><br><span class="line">    _Q = gen_q()</span><br><span class="line">    <span class="keyword">assert</span> (gcd(_E, (_P - <span class="number">1</span>) * (_Q - <span class="number">1</span>)) == <span class="number">1</span>)</span><br><span class="line">    _M = bytes_to_long(flag)</span><br><span class="line">    _C = <span class="built_in">pow</span>(_M, _E, _P * _Q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Ciphertext = &quot;</span>, _C)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span></span><br><span class="line"><span class="string">P_F_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span></span><br><span class="line"><span class="string">Q_n =  20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span></span><br><span class="line"><span class="string">Q_E_D =  100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span></span><br><span class="line"><span class="string">Ciphertext =  40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>事实上，这种题目吓唬人的成分很大，只要仔细看就能解出来 比如给的第一个函数```gen_prime````完全没有用到 后面的P_n和Q_n也可以爆破出来，然后照着他的加密方法解出P和Q，P_F_n和Q_E_D完全没有用到 最后就是常规的RSA了 解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">P_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span></span><br><span class="line">P_F_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span></span><br><span class="line">Q_n =  <span class="number">20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span></span><br><span class="line">Q_E_D =  <span class="number">100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span></span><br><span class="line">Ciphertext =  <span class="number">40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span></span><br><span class="line">_E = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># P</span></span><br><span class="line">P_p = <span class="number">118153578345562250550767057731385782963063734586321112579869747650001448473633860305142281504862521928246520876300707405515141444727550839066835195905927281903880307860942630322499106164191736174201506457157272220802515607939618476716593888428832962374494147723577980992661629254713116923690067827155668889571</span></span><br><span class="line">P_q = <span class="number">118975085954858660642562584152139261422493348532593400307960127317249511761542030451912561362687361053191375307180413931721355251895350936376781657674896801388806379750757264377396608174235075021854614328009897408824235800167369204203680938298803752964983358298299699273425596382268869237139724754214443556383</span></span><br><span class="line">P = sympy.nextprime(<span class="number">2021</span> * P_p + <span class="number">2020</span> * P_q)</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q</span></span><br><span class="line">Q_p = <span class="number">120538849514661970159855851547577637711900368732462953774738483480759950867244867240401273864984981385806453735655967797329769252143125966966236767391995563418243748302685348336642872306042286401427581501609713577329945760930395130411743322595026287853073310150103535873078436896035943385067893062698858976291</span></span><br><span class="line">Q_q = <span class="number">171847486694659608706336923173786708071603689972942289760669690002615525263534483261477699540482615520223300780778172120221008417518590133753701145591943840552802072474293556608389677806415392384924913911677288126066245025731416399656855625839288752326267741979436855441260177305707529456715625062080892327017</span></span><br><span class="line">Q = <span class="number">2021</span> * Q_p - <span class="number">2020</span> * Q_q</span><br><span class="line"><span class="keyword">if</span> Q &lt; <span class="number">0</span>:</span><br><span class="line">    Q = (-<span class="number">1</span>) * Q</span><br><span class="line">Q = sympy.nextprime(Q)</span><br><span class="line"><span class="built_in">print</span>(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">D = inverse(_E, (P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">M = <span class="built_in">pow</span>(Ciphertext, D, P*Q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M))</span><br></pre></td></tr></table></figure> 结果为： <img data-src="https://img-blog.csdnimg.cn/20210715085823295.png" alt="在这里插入图片描述" /></p>
<h2 id="actf新生赛2020crypto-aes">[ACTF新生赛2020]crypto-aes</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    key=os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">    iv=os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(key)^bytes_to_long(iv))</span><br><span class="line">    aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    enc_flag = aes.encrypt(FLAG)</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>AES基本没有了解过，以前尝试看了加密函数的[官方文档]，没怎么看明白(https://pycryptodome.readthedocs.io/en/latest/src/cipher/aes.html) 只能找<a href="https://blog.csdn.net/MikeCoke/article/details/113790052">wp</a> 如果只是解题的话，只需要利用 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag = aes.decrypt(enc_flag)</span><br></pre></td></tr></table></figure> 两句代码即可，关键是解出<strong>key</strong>（密钥）和<strong>iv</strong>（初始化向量） 可以看到key是由8个重复的随机生成的2bytes,16bits的字符串组成32bytes,256bits字符串，iv则是随机生成16bytes,128bits的字符串 已知key与iv做异或运算得到的结果，所以key的前16bytes字符是不变的，由此可以推断出key 再用key后16bytes与异或的结果进行异或运算可以得到iv 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">xor = <span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p&#x27;</span></span><br><span class="line"></span><br><span class="line">key = long_to_bytes(xor)[:<span class="number">16</span>] * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">iv = bytes_to_long(long_to_bytes(xor)[<span class="number">16</span>:]) ^ bytes_to_long(key[<span class="number">16</span>:])</span><br><span class="line">iv = long_to_bytes(iv)</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/20210715170341760.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语：</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-16</title>
    <url>/uncategorized/2021/07/16/vacation_week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-16</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>颓废了一天，水了</p>
<h2 id="utctf2020hill">[UTCTF2020]hill</h2>
<p>hill？山丘？变异栅栏？ 没有头绪，找<a href="https://blog.csdn.net/weixin_44110537/article/details/107450336">wp</a> 原来是<a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81">希尔密码</a>，没见过 主要就是要求一个nxn的密钥矩阵，然后解密即可 从wp中得知utflag被加密成wznqca，只能构造6个式子，还要模26，所以不可能是3x3的矩阵，只有可能是2x2的矩阵，4个未知数 即 <span class="math display">\[
\begin{pmatrix}a &amp; b \\ c &amp; d \end{pmatrix}\begin{pmatrix}20 &amp; 5 &amp; 0 \\19 &amp; 11 &amp; 6  \end{pmatrix}\equiv \begin{pmatrix}22 &amp; 13 &amp; 2 \\25 &amp; 16 &amp; 0  \end{pmatrix}mod\space 26
\]</span> 其中<span class="math inline">\(a,b,c,d\)</span>为密钥矩阵的四个未知数 得到模方程组 <span class="math display">\[
\begin{cases}
20a+19b\equiv 22\space mod\space 26\\
20c+19d\equiv 25\space mod\space 26\\
5a+11b\equiv 13\space mod\space 26\\
5c+11d\equiv 16\space mod\space 26\\
6b\equiv 2\space mod\space 26\\
6d\equiv 0\space mod\space 26
\end{cases}
\]</span> 显然，最后两个式子是最好下手的，但是我没有什么好的方法，猜测<span class="math inline">\(a,b,c,d\)</span>应该不会超过100，干脆直接爆破，代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    a = <span class="number">0</span>; b = <span class="number">0</span>; c = <span class="number">0</span>; d = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">20</span>*a+<span class="number">19</span>*b) % <span class="number">26</span> != <span class="number">22</span> <span class="keyword">or</span> (<span class="number">20</span>*c+<span class="number">19</span>*d) % <span class="number">26</span> != <span class="number">25</span>:</span><br><span class="line">        d = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        b = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">6</span>*d) % <span class="number">26</span> != <span class="number">0</span>:</span><br><span class="line">            d += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">5</span>*c+<span class="number">11</span>*d) % <span class="number">26</span> != <span class="number">16</span>:</span><br><span class="line">            c += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">6</span>*b) % <span class="number">26</span> != <span class="number">2</span>:</span><br><span class="line">            b += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">5</span>*a+<span class="number">11</span>*b) % <span class="number">26</span> != <span class="number">13</span>:</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c, d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        r = f.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">str</span>([a, b, c, d]) + <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">in</span> r:</span><br><span class="line">            f.write(<span class="built_in">str</span>([a, b, c, d]) + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure> 得到了100以内的部分解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">91</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">39</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">100</span>, <span class="number">11</span>, <span class="number">39</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">100</span>, <span class="number">11</span>, <span class="number">91</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">48</span>, <span class="number">11</span>, <span class="number">39</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">48</span>, <span class="number">11</span>, <span class="number">65</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">74</span>, <span class="number">11</span>, <span class="number">39</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">100</span>, <span class="number">11</span>, <span class="number">65</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">74</span>, <span class="number">11</span>, <span class="number">65</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">74</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">74</span>, <span class="number">11</span>, <span class="number">91</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">65</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">100</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">48</span>, <span class="number">11</span>, <span class="number">91</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">48</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure> 猜测密钥矩阵可能不唯一 懒得自己写解密程序了，就找了一个<a href="http://practicalcryptography.com/ciphers/hill-cipher/">在线工具</a> 验证了前三组，结果相同，证实了我的猜想 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210716212550574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 忽略了符号、数字和大小写，修改一下即可 结果为<code>utflag&#123;d4nger0us_c1pherText_qq&#125;</code></p>
<h2 id="inshack2017rsa16m">[INSHack2017]rsa16m</h2>
<p>题干描述： When you need really secure communications, you use RSA with a 4096 bit key. I want really really really secure communications to transmit the nuclear launch codes (yeah IoT is everywhere man) so I used RSA with a 16777216 bit key. Surely russians will not be able to factor that one !</p>
<p>平时为了保证安全RSA会采用4096位的密钥，但他给我整了个16777216位的 wtm直接找<a href="https://blog.csdn.net/weixin_44110537/article/details/107623082">wp</a> <img data-src="https://img-blog.csdnimg.cn/20210716213545322.png" alt="在这里插入图片描述" /> 啊这 这还真想不到 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="comment"># 自己复制</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = gmpy2.iroot(c, e)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为 <img data-src="https://img-blog.csdnimg.cn/2021071621391856.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-18</title>
    <url>/uncategorized/2021/07/18/vacation_week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-18</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>早点更完，学ML去</p>
<h2 id="guet-ctf2019no-sos">[GUET-CTF2019]NO SOS</h2>
<p>给了个附件： <img data-src="https://img-blog.csdnimg.cn/20210718110454617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 摩斯电码？ 但是又没有分隔符 还有这些长短不一的点和横是怎么回事 NO SOS?是没有'S'和'O'的意思吗？ 没想法，找<a href="https://blog.csdn.net/weixin_44110537/article/details/107569609">wp</a> 原来 NO SOS 是暗示这不是摩尔斯电码，要把'.'和'-'分别替换成'a'和'b'搞成培根密码（反正我是想不到的） 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-&#x27;</span>.replace(<span class="string">&#x27;…&#x27;</span>, <span class="string">&#x27;...&#x27;</span>).replace(<span class="string">&#x27;—&#x27;</span>, <span class="string">&#x27;---&#x27;</span>).replace(<span class="string">&#x27;–&#x27;</span>, <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;a&#x27;</span>).replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(c.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;b&#x27;</span>).replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>要记得把不同长度换成相同长度的 然后找了个<a href="https://tool.bugku.com/peigen/">在线工具</a>解密 其中第一个是正解 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210718111126603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="qctf2018xman-rsa">[QCTF2018]Xman-RSA</h2>
<p>这题可以说是相当爱折腾 一上来给了四个附件 <img data-src="https://img-blog.csdnimg.cn/20210718111233207.png" alt="在这里插入图片描述" /> 前三个文件都是密文 第四个文件是加密的加密程序（啊这） <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gqhb jbkl2 pbkhqw pt_kqpbd</span><br><span class="line">gqhb ht pbkhqw zqreahb</span><br><span class="line">pbkhqw urtd64</span><br><span class="line"></span><br><span class="line">adg ulwdt_wh_ezb(u):</span><br><span class="line">	qdwzqe pew(u.dexhad(<span class="string">&#x27;mdi&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">	</span><br><span class="line">adg ezb_wh_ulwdt(e):</span><br><span class="line">	u = mdi(e)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">	u = <span class="string">&#x27;0&#x27;</span> + u pg yde(u)%<span class="number">2</span> == <span class="number">1</span> dytd u</span><br><span class="line">	qdwzqe u.adxhad(<span class="string">&#x27;mdi&#x27;</span>)</span><br><span class="line"></span><br><span class="line">adg jdw_r_kqpbd(y):</span><br><span class="line">	qreahb_tdda = zqreahb(y)</span><br><span class="line"></span><br><span class="line">	ezb = ulwdt_wh_ezb(qreahb_tdda)</span><br><span class="line">	</span><br><span class="line">	fmpyd Tqzd:</span><br><span class="line">		pg pt_kqpbd(ezb):</span><br><span class="line">			uqdrv</span><br><span class="line">		ezb+=<span class="number">1</span></span><br><span class="line">	qdwzqe ezb</span><br><span class="line"></span><br><span class="line">adg dexqlkw(t, d, e):</span><br><span class="line">	k = ulwdt_wh_ezb(t)</span><br><span class="line">	k = khf(k, d, e)</span><br><span class="line">	qdwzqe ezb_wh_ulwdt(k).dexhad(<span class="string">&#x27;mdi&#x27;</span>)	</span><br><span class="line"></span><br><span class="line">adg tdkrqrwd(e):</span><br><span class="line">	k = e % <span class="number">4</span></span><br><span class="line">	w = (k*k) % <span class="number">4</span></span><br><span class="line">	qdwzqe w == <span class="number">1</span></span><br><span class="line">	</span><br><span class="line">g = hkde(<span class="string">&#x27;gyrj.wiw&#x27;</span>, <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">gyrj = g.qdra()</span><br><span class="line">		</span><br><span class="line">btj1 = <span class="string">&quot;&quot;</span></span><br><span class="line">btj2 = <span class="string">&quot;&quot;</span></span><br><span class="line">ghq p pe qrejd(yde(gyrj)):</span><br><span class="line">	pg tdkrqrwd(p):</span><br><span class="line">		btj2 += gyrj[p]</span><br><span class="line">	dytd:</span><br><span class="line">		btj1 += gyrj[p]</span><br><span class="line"></span><br><span class="line">k1 = jdw_r_kqpbd(<span class="number">128</span>)</span><br><span class="line">k2 = jdw_r_kqpbd(<span class="number">128</span>)</span><br><span class="line">k3 = jdw_r_kqpbd(<span class="number">128</span>)</span><br><span class="line">e1 = k1*k2</span><br><span class="line">e2 = k1*k3</span><br><span class="line">d = 0i1001</span><br><span class="line">x1 = dexqlkw(btj1, d, e1)</span><br><span class="line">x2 = dexqlkw(btj2, d, e2)</span><br><span class="line">kqpew(x1)</span><br><span class="line">kqpew(x2)</span><br><span class="line"></span><br><span class="line">d1 = 0i1001</span><br><span class="line">d2 = 0i101</span><br><span class="line">k4 = jdw_r_kqpbd(<span class="number">128</span>)</span><br><span class="line">k5 = jdw_r_kqpbd(<span class="number">128</span>)</span><br><span class="line">e3 = k4*k5</span><br><span class="line">x1 = ezb_wh_ulwdt(khf(e1, d1, e3)).dexhad(<span class="string">&#x27;mdi&#x27;</span>)</span><br><span class="line">x2 = ezb_wh_ulwdt(khf(e1, d2, e3)).dexhad(<span class="string">&#x27;mdi&#x27;</span>)</span><br><span class="line">kqpew(x1)</span><br><span class="line">kqpew(x2)</span><br><span class="line"></span><br><span class="line">kqpew(urtd64.u64dexhad(ezb_wh_ulwdt(e2)))</span><br><span class="line">kqpew(urtd64.u64dexhad(ezb_wh_ulwdt(e3)))</span><br></pre></td></tr></table></figure> 根据python语法和常用关键字、函数、库等容易推测出原来的内容是经过替换密码加密的 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;encryption.encrypted&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    encrypt = f.read()</span><br><span class="line"></span><br><span class="line">table = [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27; &#x27;</span>]</span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">    <span class="keyword">if</span> table[i] != <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="built_in">dict</span>[table[i]] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">dict</span>[table[i]] = <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt.translate(<span class="built_in">str</span>.maketrans(<span class="built_in">dict</span>)))</span><br></pre></td></tr></table></figure>
<p>原加密程序如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_num</span>(<span class="params">b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(b.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_to_bytes</span>(<span class="params">n</span>):</span></span><br><span class="line">    b = <span class="built_in">hex</span>(n)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    b = <span class="string">&#x27;0&#x27;</span> + b <span class="keyword">if</span> <span class="built_in">len</span>(b) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">return</span> b.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_prime</span>(<span class="params">l</span>):</span></span><br><span class="line">    random_seed = urandom(l)</span><br><span class="line"></span><br><span class="line">    num = bytes_to_num(random_seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">s, e, n</span>):</span></span><br><span class="line">    p = bytes_to_num(s)</span><br><span class="line">    p = <span class="built_in">pow</span>(p, e, n)</span><br><span class="line">    <span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate</span>(<span class="params">n</span>):</span></span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">&quot;&quot;</span></span><br><span class="line">msg2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> separate(i): <span class="comment"># i为奇数</span></span><br><span class="line">        msg2 += flag[i]</span><br><span class="line">    <span class="keyword">else</span>:           <span class="comment"># i为偶数</span></span><br><span class="line">        msg1 += flag[i]</span><br><span class="line"></span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n1 = p1 * p2</span><br><span class="line">n2 = p1 * p3</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c1 = encrypt(msg1, e, n1)</span><br><span class="line">c2 = encrypt(msg2, e, n2)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n3 = p4 * p5</span><br><span class="line">c1 = num_to_bytes(<span class="built_in">pow</span>(n1, e1, n3)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">c2 = num_to_bytes(<span class="built_in">pow</span>(n1, e2, n3)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(num_to_bytes(n2)))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure>
<p>其实就是先把flag奇偶位置分开分别用n1,n2加密，然后又把加密用的n1再用n3加密，再把加密n1用的n3和之前的n2用base64加密（对，就是套娃） 还原n2,n3是简单的，其中n2可以直接<a href="http://factordb.com/">爆破</a>，而n3不行 但容易发现加密n1得到两个密文，用的都是n3，所以可以用<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#_7">共模攻击</a>解出n1 又发现n1也可以爆破 最后就是基本的RSA解密了 解密出msg1和msg2后拼接就是flag 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c, e, p, q</span>):</span></span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, p*q)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">mc1 = <span class="string">&#x27;1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839&#x27;</span></span><br><span class="line">mc2 = <span class="string">&#x27;129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab&#x27;</span></span><br><span class="line">n1c1 = <span class="string">&#x27;2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090&#x27;</span></span><br><span class="line">n1c2 = <span class="string">&#x27;42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a&#x27;</span></span><br><span class="line">n2 = <span class="string">&#x27;PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==&#x27;</span></span><br><span class="line">n3 = <span class="string">&#x27;TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==&#x27;</span></span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;0x1001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">e1 = <span class="built_in">int</span>(<span class="string">&#x27;0x1001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">e2 = <span class="built_in">int</span>(<span class="string">&#x27;0x101&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">mc1 = <span class="built_in">int</span>(mc1, <span class="number">16</span>)</span><br><span class="line">mc2 = <span class="built_in">int</span>(mc2, <span class="number">16</span>)</span><br><span class="line">n1c1 = <span class="built_in">int</span>(n1c1, <span class="number">16</span>)</span><br><span class="line">n1c2 = <span class="built_in">int</span>(n1c2, <span class="number">16</span>)</span><br><span class="line">n2 = bytes_to_long(base64.b64decode(n2))</span><br><span class="line">n3 = bytes_to_long(base64.b64decode(n3))</span><br><span class="line"><span class="built_in">print</span>(n2, n3)</span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    n1c1 = gmpy2.invert(n1c1, n3)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    n1c2 = gmpy2.invert(n1c2, n3)</span><br><span class="line">n1 = gmpy2.powmod(n1c1, s, n3) * gmpy2.powmod(n1c2, t, n3) % n3</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line">p1 = <span class="number">36503560711222200347745635238792106713920033958622200829092748503591270659903081394620276506325026411074230626397319741508641600002903305233380003999170571805545704321579972221393658587490213987917997698711182322920804807669281318998024155277432216030985270653843416557319053811218180174081048812060180634801</span></span><br><span class="line">q1 = <span class="number">68475150402136550069561649755295544963289030785101058202360554598728892273874900512013972536010281921862638482624050145776516868431210229550944533343142576416459199101144902197593841367980791503251475193609136925280837184839979646652186999511796418448787979170775450657311911945185202715164053596280658868979</span></span><br><span class="line">p2 = <span class="number">68475150402136550069561649755295544963289030785101058202360554598728892273874900512013972536010281921862638482624050145776516868431210229550944533343142576416459199101144902197593841367980791503251475193609136925280837184839979646652186999511796418448787979170775450657311911945185202715164053596280658868979</span></span><br><span class="line">q2 = <span class="number">113057116110640629442838729892384636071708596904428483152114609685936140664770589059214780753000125747653792221591510804947737833483206498631262985233023673075253476613965561679900695245558177430781375269136603105651856671527157586176048122119973067362460787539110922411635014408169669810929828500304139655817</span></span><br><span class="line">msg1 = long_to_bytes(decrypt(mc1, e, p1, q1)).decode()</span><br><span class="line">msg2 = long_to_bytes(decrypt(mc2, e, p2, q2)).decode()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)+<span class="built_in">len</span>(msg2)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flag += msg2[(i-<span class="number">1</span>)//<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += msg1[i//<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/20210718112302877.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-19</title>
    <url>/uncategorized/2021/07/19/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-19</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>上午学了4个小时车，只能下午来更了（</p>
<h2 id="npuctf2020认清形势建立信心">[NPUCTF2020]认清形势，建立信心</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">25</span>)</span><br><span class="line">e = <span class="comment"># Hidden</span></span><br><span class="line">q = getPrime(<span class="number">25</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(flag.strip(<span class="string">b&quot;npuctf&#123;&quot;</span>).strip(<span class="string">b&quot;&#125;&quot;</span>))</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>, e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">4</span>, e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">8</span>, e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">169169912654178</span></span><br><span class="line"><span class="string">128509160179202</span></span><br><span class="line"><span class="string">518818742414340</span></span><br><span class="line"><span class="string">358553002064450</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目给了<span class="math inline">\(2^e\space mod \space n\)</span>，<span class="math inline">\(4^e\space mod \space n=2^2e\space mod \space n\)</span> 和 <span class="math inline">\(8^e\space mod \space n=2^3e\space mod \space n\)</span>分别记为c2, c4, c8 容易发现， <span class="math display">\[
2^e\times2^e\times2^e \space mod \space n = 2^e\times4^e \space mod \space n  = 8^e \space mod \space n 
\]</span> 由此我们可以计算<code>c2*c2*c2-c8</code>和<code>c2*c4-c8</code>得到<span class="math inline">\(n\)</span>的倍数，对两数取最小公倍数再分解质因数，得到符合条件的大质数即为p和q 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c = <span class="number">169169912654178</span></span><br><span class="line">c2 = <span class="number">128509160179202</span></span><br><span class="line">c4 = <span class="number">518818742414340</span></span><br><span class="line">c8 = <span class="number">358553002064450</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(c2*c4-c8, c2*c2*c2-c8))</span><br><span class="line"><span class="comment"># 1054494004042394</span></span><br></pre></td></tr></table></figure>
<p>分解质因数： <img data-src="https://img-blog.csdnimg.cn/20210719173225219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 但是这题隐藏了e，所以不能直接RSA解密，还需要求e 这是一个离散对数问题，可以参考我<a href="https://blog.csdn.net/weixin_52446095/article/details/116573356?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162668720416780274174350%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162668720416780274174350&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-116573356.pc_v2_rank_blog_default&amp;utm_term=%E7%A6%BB%E6%95%A3&amp;spm=1018.2226.3001.4450">2021-5-9的博客</a> 完整解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">c = <span class="number">169169912654178</span></span><br><span class="line">c2 = <span class="number">128509160179202</span></span><br><span class="line">c4 = <span class="number">518818742414340</span></span><br><span class="line">c8 = <span class="number">358553002064450</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(c2*c4-c8, c2*c2*c2-c8))</span><br><span class="line">p = <span class="number">18195301</span></span><br><span class="line">q = <span class="number">28977097</span></span><br><span class="line">e = sympy.discrete_log(p*q, c2, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p*q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果为： <img data-src="https://img-blog.csdnimg.cn/20210719173444760.png" alt="在这里插入图片描述" /></p>
<h2 id="bjdctf2020伏羲六十四卦">[BJDCTF2020]伏羲六十四卦</h2>
<p>题目给了一段文本： 这是什么，怎么看起来像是再算64卦！！！</p>
<p>密文:升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有</p>
<p>嗯？为什么还有个b呢? b=7</p>
<p>flag：请按照格式BJD{}</p>
<p>还给了一段意义不明的加密代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrpyt5</span>():</span></span><br><span class="line">    enc=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        enc+=<span class="built_in">chr</span>((a*(<span class="built_in">ord</span>(i)-<span class="number">97</span>)+b)%<span class="number">26</span>+<span class="number">97</span>)</span><br><span class="line">    <span class="keyword">return</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt4</span>():</span></span><br><span class="line">    temp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    offset=<span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        temp+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i])-offset-i)</span><br><span class="line">    <span class="keyword">return</span>(temp)</span><br></pre></td></tr></table></figure> 我还特地取搜了一下<a href="https://zh.wikipedia.org/wiki/%E5%85%AD%E5%8D%81%E5%9B%9B%E5%8D%A6">伏羲六十四卦</a>，发现密文的内容就是六十四卦的内容 没思路，只好找<a href="https://blog.csdn.net/weixin_44110537/article/details/107494966">wp</a> 原来是要把六十四卦按顺序转化成6位二进制数，再8位一组转化成文本 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210719174358694.png" alt="在这里插入图片描述" /> 容易联想到是base64加密，尝试解密，结果为： <img data-src="https://img-blog.csdnimg.cn/202107191744409.png" alt="在这里插入图片描述" /> 好丑，是不是解错了？ 这时就要用题目给的加密代码了 观察可得，明文先经过了encrpyt5，然后经过了encrypt4 那就先"decrypt4" 结果为： <img data-src="https://img-blog.csdnimg.cn/20210719174745401.png" alt="在这里插入图片描述" /> 看起来接近答案了 但是看encrpyt5，发现题目给了b，但是没给a，就很难受 wp采用爆破的方法，就借(chao)鉴(xi)了一下 完整解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt4</span>(<span class="params">c</span>):</span></span><br><span class="line">    temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    offset = <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        temp += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c[i])+offset+i)</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrpyt5</span>(<span class="params">c</span>):</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">ord</span>(i) - <span class="number">97</span> + <span class="number">26</span> * k - b) % a == <span class="number">0</span>:</span><br><span class="line">                    temp += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">97</span> - <span class="number">7</span> + <span class="number">26</span> * k) // a + <span class="number">97</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(c) == <span class="built_in">len</span>(temp) <span class="keyword">and</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> temp:</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有&#x27;</span></span><br><span class="line">table = &#123;<span class="string">&#x27;坤&#x27;</span>: <span class="string">&#x27;000000&#x27;</span>, <span class="string">&#x27;剥&#x27;</span>: <span class="string">&#x27;000001&#x27;</span>, <span class="string">&#x27;比&#x27;</span>: <span class="string">&#x27;000010&#x27;</span>, <span class="string">&#x27;观&#x27;</span>: <span class="string">&#x27;000011&#x27;</span>, <span class="string">&#x27;豫&#x27;</span>: <span class="string">&#x27;000100&#x27;</span>, <span class="string">&#x27;晋&#x27;</span>: <span class="string">&#x27;000101&#x27;</span>, <span class="string">&#x27;萃&#x27;</span>: <span class="string">&#x27;000110&#x27;</span>, <span class="string">&#x27;否&#x27;</span>: <span class="string">&#x27;000111&#x27;</span>, <span class="string">&#x27;谦&#x27;</span>: <span class="string">&#x27;001000&#x27;</span>, <span class="string">&#x27;艮&#x27;</span>: <span class="string">&#x27;001001&#x27;</span>, <span class="string">&#x27;蹇&#x27;</span>: <span class="string">&#x27;001010&#x27;</span>, <span class="string">&#x27;渐&#x27;</span>: <span class="string">&#x27;001011&#x27;</span>, <span class="string">&#x27;小过&#x27;</span>: <span class="string">&#x27;001100&#x27;</span>, <span class="string">&#x27;旅&#x27;</span>: <span class="string">&#x27;001101&#x27;</span>, <span class="string">&#x27;咸&#x27;</span>: <span class="string">&#x27;001110&#x27;</span>, <span class="string">&#x27;遁&#x27;</span>: <span class="string">&#x27;001111&#x27;</span>, <span class="string">&#x27;师&#x27;</span>: <span class="string">&#x27;010000&#x27;</span>, <span class="string">&#x27;蒙&#x27;</span>: <span class="string">&#x27;010001&#x27;</span>, <span class="string">&#x27;坎&#x27;</span>: <span class="string">&#x27;010010&#x27;</span>, <span class="string">&#x27;涣&#x27;</span>: <span class="string">&#x27;010011&#x27;</span>, <span class="string">&#x27;解&#x27;</span>: <span class="string">&#x27;010100&#x27;</span>, <span class="string">&#x27;未济&#x27;</span>: <span class="string">&#x27;010101&#x27;</span>, <span class="string">&#x27;困&#x27;</span>: <span class="string">&#x27;010110&#x27;</span>, <span class="string">&#x27;讼&#x27;</span>: <span class="string">&#x27;010111&#x27;</span>, <span class="string">&#x27;升&#x27;</span>: <span class="string">&#x27;011000&#x27;</span>, <span class="string">&#x27;蛊&#x27;</span>: <span class="string">&#x27;011001&#x27;</span>, <span class="string">&#x27;井&#x27;</span>: <span class="string">&#x27;011010&#x27;</span>, <span class="string">&#x27;巽&#x27;</span>: <span class="string">&#x27;011011&#x27;</span>, <span class="string">&#x27;恒&#x27;</span>: <span class="string">&#x27;011100&#x27;</span>, <span class="string">&#x27;鼎&#x27;</span>: <span class="string">&#x27;011101&#x27;</span>, <span class="string">&#x27;大过&#x27;</span>: <span class="string">&#x27;011110&#x27;</span>, <span class="string">&#x27;姤&#x27;</span>: <span class="string">&#x27;011111&#x27;</span>, <span class="string">&#x27;复&#x27;</span>: <span class="string">&#x27;100000&#x27;</span>, <span class="string">&#x27;颐&#x27;</span>: <span class="string">&#x27;100001&#x27;</span>, <span class="string">&#x27;屯&#x27;</span>: <span class="string">&#x27;100010&#x27;</span>, <span class="string">&#x27;益&#x27;</span>: <span class="string">&#x27;100011&#x27;</span>, <span class="string">&#x27;震&#x27;</span>: <span class="string">&#x27;100100&#x27;</span>, <span class="string">&#x27;噬嗑&#x27;</span>: <span class="string">&#x27;100101&#x27;</span>, <span class="string">&#x27;随&#x27;</span>: <span class="string">&#x27;100110&#x27;</span>, <span class="string">&#x27;无妄&#x27;</span>: <span class="string">&#x27;100111&#x27;</span>, <span class="string">&#x27;明夷&#x27;</span>: <span class="string">&#x27;101000&#x27;</span>, <span class="string">&#x27;贲&#x27;</span>: <span class="string">&#x27;101001&#x27;</span>, <span class="string">&#x27;既济&#x27;</span>: <span class="string">&#x27;101010&#x27;</span>, <span class="string">&#x27;家人&#x27;</span>: <span class="string">&#x27;101011&#x27;</span>, <span class="string">&#x27;丰&#x27;</span>: <span class="string">&#x27;101100&#x27;</span>, <span class="string">&#x27;离&#x27;</span>: <span class="string">&#x27;101101&#x27;</span>, <span class="string">&#x27;革&#x27;</span>: <span class="string">&#x27;101110&#x27;</span>, <span class="string">&#x27;同人&#x27;</span>: <span class="string">&#x27;101111&#x27;</span>, <span class="string">&#x27;临&#x27;</span>: <span class="string">&#x27;110000&#x27;</span>, <span class="string">&#x27;损&#x27;</span>: <span class="string">&#x27;110001&#x27;</span>, <span class="string">&#x27;节&#x27;</span>: <span class="string">&#x27;110010&#x27;</span>, <span class="string">&#x27;中孚&#x27;</span>: <span class="string">&#x27;110011&#x27;</span>, <span class="string">&#x27;归妹&#x27;</span>: <span class="string">&#x27;110100&#x27;</span>, <span class="string">&#x27;睽&#x27;</span>: <span class="string">&#x27;110101&#x27;</span>, <span class="string">&#x27;兑&#x27;</span>: <span class="string">&#x27;110110&#x27;</span>, <span class="string">&#x27;履&#x27;</span>: <span class="string">&#x27;110111&#x27;</span>, <span class="string">&#x27;泰&#x27;</span>: <span class="string">&#x27;111000&#x27;</span>, <span class="string">&#x27;大畜&#x27;</span>: <span class="string">&#x27;111001&#x27;</span>, <span class="string">&#x27;需&#x27;</span>: <span class="string">&#x27;111010&#x27;</span>, <span class="string">&#x27;小畜&#x27;</span>: <span class="string">&#x27;111011&#x27;</span>, <span class="string">&#x27;大壮&#x27;</span>: <span class="string">&#x27;111100&#x27;</span>, <span class="string">&#x27;大有&#x27;</span>: <span class="string">&#x27;111101&#x27;</span>, <span class="string">&#x27;夬&#x27;</span>: <span class="string">&#x27;111110&#x27;</span>, <span class="string">&#x27;乾&#x27;</span>: <span class="string">&#x27;111111&#x27;</span>&#125;</span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        b += table[s[i]]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        b += table[s[i]+s[i+<span class="number">1</span>]]</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b), <span class="number">8</span>):</span><br><span class="line">    x += <span class="built_in">chr</span>(<span class="built_in">int</span>(b[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = base64.b64decode(x).decode()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = decrypt4(x)</span><br><span class="line">encrpyt5(x)</span><br></pre></td></tr></table></figure> 结果为：<img data-src="https://img-blog.csdnimg.cn/20210719174959920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> BJD congratulation son getting the flag？？？（wtm） 套上flag{}即可</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-20</title>
    <url>/uncategorized/2021/07/20/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-20</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="npuctf2020共-模-攻-击">[NPUCTF2020]共 模 攻 击</h2>
<p>题目给了两个加密程序 一个是加密hint：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> hint</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(hint)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">256</span>, p)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">256</span>), getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e1, e2 = getPrime(<span class="number">32</span>), getPrime(<span class="number">32</span>)</span><br><span class="line">c1, c2 = <span class="built_in">pow</span>(c, e1, n), <span class="built_in">pow</span>(c, e2, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(e1, c1)</span><br><span class="line"><span class="built_in">print</span>(e2, c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">107316975771284342108362954945096489708900302633734520943905283655283318535709</span></span><br><span class="line"><span class="string">6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579</span></span><br><span class="line"><span class="string">2303413961 1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723</span></span><br><span class="line"><span class="string">2622163991 1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>另一个是加密flag：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">flag = flag.strip(<span class="string">b&quot;npuctf&#123;&quot;</span>).strip(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e1, e2 = p, q</span><br><span class="line">c1, c2 = <span class="built_in">pow</span>(m, e1, n), <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149</span></span><br><span class="line"><span class="string">96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198</span></span><br><span class="line"><span class="string">9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>乍一看，确实很像共模攻击，但是一看这个加密指数是p和q并且未知，就知道没那么简单 首先来解密hint 第一步容易想到用共模攻击解密被加密的hint 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># hint</span></span><br><span class="line">e1 = <span class="number">2303413961</span></span><br><span class="line">e2 = <span class="number">2622163991</span></span><br><span class="line">c1 = <span class="number">1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723</span></span><br><span class="line">c2 = <span class="number">1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249</span></span><br><span class="line">p1 = <span class="number">107316975771284342108362954945096489708900302633734520943905283655283318535709</span></span><br><span class="line">n = <span class="number">6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579</span></span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">c = gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n) % n</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>但下一步发现，加密hint的过程为<code>c = pow(m, 256, p)</code> 原本是想类似于经典的RSA解密 p的欧拉函数为p-1，然后参考<a href="https://blog.csdn.net/weixin_52446095/article/details/118733418?spm=1001.2014.3001.5501">[De1CTF2019]babyrsa</a>或者<a href="https://blog.csdn.net/weixin_52446095/article/details/117136443?spm=1001.2014.3001.5501">EzRSA</a>，利用<span class="math inline">\(gcd(256,p-1)\)</span>解出d然后求解 但是发现<span class="math inline">\(gcd(256,p-1)=4\)</span>，无法用这种方法 只好找<a href="https://www.cnblogs.com/vict0r/p/13292511.html">wp</a> 原来直接用sympy库的nthroot_mod方法就行，该方法可以用来求解<span class="math inline">\(x^n \equiv a\space mod\space p\)</span>，其中<span class="math inline">\(n,a,p\)</span>为已知数 那么，有这么好的方法，能不能直接用来求解RSA问题呢？当然是不行的 因为求解本题的<span class="math inline">\(m^{256} \equiv c\space mod\space p\)</span>都要花上好几秒，求解RSA问题基本上不可能 这里附上<a href="https://github.com/sympy/sympy/blob/46e00feeef5204d896a2fbec65390bd4145c3902/sympy/ntheory/residue_ntheory.py#L810-L874">nthroot_mod的源代码</a>，感兴趣的师傅可以研究研究 完整解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># hint</span></span><br><span class="line">e1 = <span class="number">2303413961</span></span><br><span class="line">e2 = <span class="number">2622163991</span></span><br><span class="line">c1 = <span class="number">1754421169036191391717309256938035960912941109206872374826444526733030696056821731708193270151759843780894750696642659795452787547355043345348714129217723</span></span><br><span class="line">c2 = <span class="number">1613454015951555289711148366977297613624544025937559371784736059448454437652633847111272619248126613500028992813732842041018588707201458398726700828844249</span></span><br><span class="line">p1 = <span class="number">107316975771284342108362954945096489708900302633734520943905283655283318535709</span></span><br><span class="line">n = <span class="number">6807492006219935335233722232024809784434293293172317282814978688931711423939629682224374870233587969960713638310068784415474535033780772766171320461281579</span></span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">c = gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n) % n</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">m = sympy.nthroot_mod(c, <span class="number">256</span>, p1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果为： <img data-src="https://img-blog.csdnimg.cn/20210720114243481.png" alt="在这里插入图片描述" /> 提示m的位数小于400，有什么用吗？ wp中说可以由此联想到Coppersmith 确实，在一些高位或低位泄露的题目中，Coppersmith是常用的手段，但是只知道位数小于400怎么用呢？ wp一下的解题过程也确实没有用到Coppersmith 不过，wp给了Coppersmith定理一个比较通俗的解释：在一个<span class="math inline">\(e\)</span>阶的以<span class="math inline">\(n\)</span>为模的多项式<span class="math inline">\(f(x)\)</span>中，如果有一个根小于<span class="math inline">\(n^{1/e}\)</span>，就可以运用一个O(log n)的算法求出这些根。其中的“阶”大概就是指（循环）群的阶 在这里重新推导一遍解题思路 由加密程序可得： <span class="math display">\[
\begin{cases}
c_1 \equiv m^{p}\space mod\space n \equiv m^{p}\space mod\space pq \\
c_2 \equiv m^{q}\space mod\space n \equiv m^{q}\space mod\space pq
\end{cases}
\]</span> 故<span class="math inline">\(\exists t_1\in \mathbb{Z}\)</span>，<span class="math inline">\(s.t. c_1 = m^p + t_1pq\)</span> 于是有 <span class="math display">\[
c_1 \equiv m^{p}\space mod\space p
\]</span> 由<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86">费马小定理</a>有 <span class="math display">\[
m^{p}\equiv m\space mod\space p
\]</span> 故 <span class="math display">\[
c_1 \equiv m\space mod\space p
\]</span> 同理，有 <span class="math display">\[
c_2 \equiv m\space mod\space q
\]</span> 故<span class="math inline">\(\exists k_1,k_2\in \mathbb{Z}\)</span>，<span class="math inline">\(s.t.\)</span> <span class="math display">\[
\begin{cases}
c_1=m+k_1p\\
c_2=m+k_2q
\end{cases}
\]</span> 则 <span class="math display">\[
\begin{cases}
(c_1+c_2)m=2m^2+(k_1p+k_2q)m \cdots (1)\\
c_1c_2=m^2+(k_1p+k_2q)m+k_1k_2pq \cdots (2)
\end{cases}
\]</span> <span class="math inline">\((1)-(2)\)</span>​得： <span class="math display">\[
(c_1+c_2)m-c_1c_2=m^2-k_1k_2pq=m^2-k_1k_2n
\]</span> 移项，等式两边模<span class="math inline">\(n\)</span>，得： <span class="math display">\[
m^2-(c_1+c_2)m+c_1c_2=k_1k_2n \equiv 0\space mod \space n
\]</span> 所以只要在模<span class="math inline">\(n\)</span>的情况下（或者说是在整数模<span class="math inline">\(n\)</span>加法群中），求方程的根 参照wp，sage代码如下： <img data-src="https://img-blog.csdnimg.cn/20210720165644392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到m直接long_to_bytes即可 结果为： <img data-src="https://img-blog.csdnimg.cn/20210720165002573.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>摸了一天鱼，好累哦[doge] 关于sagemath的学习，官方文档看得挺累人的，推荐一个翻译的比较好的<a href="https://www.lainme.com/doku.php/topic/sage/start">中文教程</a> 油管上还找到一个<a href="https://www.youtube.com/watch?v=Cb2E0bznd-w">入门教程</a>，今年一月份的，用的是9.2版本，还比较新 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-22</title>
    <url>/uncategorized/2021/07/22/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-22</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>病了，还要练车，鸽了一天，抱歉</p>
<h2 id="nctf2019sore">[NCTF2019]Sore</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctoi = <span class="keyword">lambda</span> x: ascii_letters.index(x)</span><br><span class="line">itoc = <span class="keyword">lambda</span> x: ascii_letters[x]</span><br><span class="line"></span><br><span class="line">key = flag.strip(<span class="string">&#x27;NCTF&#123;&#125;&#x27;</span>)</span><br><span class="line">len_key = <span class="built_in">len</span>(key)</span><br><span class="line"></span><br><span class="line">plaintext = <span class="built_in">open</span>(<span class="string">&#x27;plaintext.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">plain = <span class="string">&#x27;&#x27;</span>.join(p <span class="keyword">for</span> p <span class="keyword">in</span> plaintext <span class="keyword">if</span> p <span class="keyword">in</span> ascii_letters)</span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join(itoc((ctoi(p) + ctoi(key[i % len_key])) % <span class="number">52</span>) <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(plain))</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(cipher)</span><br></pre></td></tr></table></figure>
<p>通过key在ascii_letters（"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"）中的位置，以key的长度循环加密 可以看出来，有点像维吉尼亚密码（然而我没看出来( ），但是正统的维吉尼亚密码是不区分大小写的 从出题者的角度，看<a href="http://yulige.top/?p=752#Sore667pt_6solvers">官方wp</a> <img data-src="https://img-blog.csdnimg.cn/img_convert/5c7da939e8f0cdfb4b7c69802d12c496.png" alt="在这里插入图片描述" /> 啊这 就找了个<a href="https://www.guballa.de/vigenere-solver">网站</a>爆破 <img data-src="https://img-blog.csdnimg.cn/img_convert/b9cfc3c132c6c90e035d343722996c39.png" alt="在这里插入图片描述" /></p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/a4cb5c195b880a77d88718eebb3882eb.png" alt="在这里插入图片描述" /> 最后要区分大小写，把x改成X就是flag（。。。草） 至于为什么只把'x'改成大写，当然可以以ascii_letters为字母表另外写一个爆破程序，但是大可不必 或者通过解密，使得明文是一段有意义的文本 但是，其实可以耍小聪明： 设x为原文中的某个字符，y为key中对应于x的字符，z为cipher中对应于x的字符 若y为大写字母，则26&lt;=ctoi(y)&lt;=51，那么ctoi(x)+ctoi(y)大概率（至少大于50%的概率）会大于52，则ctoi(z)会小于ctoi(y)，故ctoi(z)-ctoi(y)小于0的次数较多的y极有可能是key中的大写字母 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"></span><br><span class="line">ctoi = <span class="keyword">lambda</span> x: ascii_letters.index(x)</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;nsfAIHFrMuLynuCApeEstxJOzniQuyBVfAChDEznppfAiEIDcyNFBsCjsLvGlDtqztuaHvHbCmuyGNsIMhGlDtbotCoDzDjhyBzHGfHGfoHsuhlssIMvwlixBHHGfDRjoCKrapNIwqNyuxIBACQhtMwCmMCfEBpsrzEuiLGBoMipTkxrznoHfAkqwzvxuzCzDbLyApCGvjpqxkuwpgsLrqsVfCRwzlFmtlyrhuyEiivruFRpCRjkEDrqEqthyGwgsLnQvHmtzwDEznopBpsDOxvgBGIKzurFQxwQxkptutxzmfeLFQoRpJRvrpHxilwqeqMeiiIGBsQpCCvrptAlHsDnuRltmHuCGFpsBcwnsEblsswEPwerNpIADpJRCvwQxrntJltNpfAuFBwRstytoyvcepwtwqNlmmNGFsJjsQvkyvrkrstxJOzniQvNvzdDUdyJzjqzsErqxEjguyFMNwtPjsDwjoDfCdxzvftNGyzKjCEjsDxjqsjGMqFpimGpIADpJRFkovHJlpthyHnpqyBOHhmDMmoosClwiehEzmffOGMvDxDSnnyLuXFlwYEPvosQxCrRxwCpDswHopxDruvEzsOgBsXxDLvvlMpezwpnOOsjrANzHDsLCnoqLCepgtaHNHfpysNHGfOMqkyvlozxHetJGfvNuCGKjIRnoDLAbpyxnJCpqeLxuBCuwCpGpOnkEywrEPrisHrItSiDQgvtLCipyJnDzwtxBnNoKxpWuCxwuiqwDmIJxffIqSGSbzGpqlDnXvNIwqNzoxBrQoXuDRjonsAozzHeBjweTBBypDtIGnvHGDiosItqGvusGrIFzoNRjsyykrExweMvDtsLGItVbAIkxrFnuEyDmuIzxMNBIyziDJfyqLqbmjAtqOEiivnwyNgwCtmzsCgFxIfEMEiiBrFzNgxRdEEKqbHtJltIEmiNzygGfHyknVwnmJtJrxvyewNBSCTsHCnptxHlFiDnJHtohmuyKztHRkvwKxopfImuWFurIGuGRpGCcCDzntlxqevJCfEHLQoXxtIgzEynqEnCgsGztiLnHrBmDQgBEGCephprHJFtiFnHrXpJAqEwvBqlwItECpbvNuuHMvIRAwFKrZtyplMvJttFnSGhuLyuzwsHfyldhcvCjicGJzzztBvrlLBXxjHoDBlcsOGzwEuNWgkCKjdzBweDdHbwuyCHSmtIknezjqDtCeDDnfxBvHuzcDSvmlJAlFxtlIOsfCuyQoXtEJcIEznplrtsEIrtMNuIIFiIRjonsAozzHeBRltgFBMsCjCRjoHAwqpwIiCzzmhjuIsAfHyknTLFXDywevDCtxNvGsRitNtknLrZlqAyIvteeHLNvHovqjoAJxYlgAyvJChsNFBsVbHQwzAGBboyDbuNzsiuGGslbNzglpujrDjxtIvCpyHqWvQjHRokDaBXtihhuyterNFuMzoNRjsyyFepsXsqDouluGmvDqGMdkmDHoprtmrzCfhMuyKztHSrzzKnaEtqeIJCfeNzyRNzDSykyLClrtuoHvCjhyBHwSJHyknTCwbHxweFMzcevySrHelFgxDzntlxptyIJmmNGFsJjsypnLDufpfCdTWlohcHMsCuDEqDzLqbAfGkMDEilyEMvDxpQokosklFyIhuxlsvIHMsKZDSeyFDmkElttxzCpjzGBsFpsBcwEzrkrNBtEJmjkMuyGzjsgvrzMpeExweMvDoxABCBFuDypCHwAjpgJtICpemxaIMNvGCpyEYxlyNAlMvtujIESofpDLKClAmTpBtruMthlNGBsQfIFgxeznopBtruvqfAEvxGQjsGpqzFrqxtHtBTGfvSyCHSmtIknDswalktwFvCfrNFQsQfLykDtFpXCtJntJFuwCqyGHuIGpqzFCepgtnsCpteHquzKXwyvSoAmtlxXwuIEvtNBNvDxxLfyHOqbCjIhuTDfpFGBsSjrIgDDswamtJgxOzmhjuIsAfpRkmvwCQsjCIwvGfmNGIvDshFgGlKBqlssiDBCjkBGHsWuIMooSwAbTxpitrljxuFyqNosRcupLqbCjHtEAJpyLqIIFiIMqSDLjoEjsgyQtokBrLHGfGCuDzxCepiDuwCDiixyyBSntwqEvwnmtyZeuKtujIEGsRitQcsolqbyxweIvtevCtBHzgICtGlJmMwjpsuosbxMqyDQfHQkxrOqbyxDmuwzeCMnSGOmtyuoEGHlFNBeqItgmNFjvNfqCqBDGvbmtsyjCluhyCLsRttBvrpzniwtJtEAxfFOGcDTuIFgnzMpemfrkyIxztIpEsSBGCpDJGDdzsCaHDofxIBMvDbHIgnxwbepBpsBJzlmHtuHLfHMtDzxorysNYEPnpyFqNsKmHFgGlKwqEtDsEMpbxGruBXnDPgWlQkbTBxlBOsfryKNHHntgnvHsCZsDpIIvteKIGSCTsIGeupLhbDLDaxzlexBrHWKmqCqxEzrpmjCcxMthlNBPsQitPgSwDFXEhwyqdHfrNBPsQbCBukEvxtytCtxDDciHpBoMeHFgGpFCXyivoJJyulypuFQpJQgvdzntlqzetvwmeLBOBCjIgoolFBepBplAzoprwruzKuwCykJsAlFssiJosfrMuyGzusMyxzFCetxqiwwCpAHoyoSvEJqyvAwdzqshEMDfXBrHHGfrytBzMBbwxIaHOpeeHqcKzurFgnswAdzfGoKIobrxnLCTosrjoCwFbCjDnBTlcsOGzwUfDPusIGCepwzitNzoxBrLwCfpLfDswBlylIhuxlsvIHMsKxpQrvlQrkrBpsiHzliarNGHonMwBPQnpTyLaIKwbCCAAwSwtPAtlRIvlssfKIyzEFyNvDlxBuupHCqCDxnwOzhvuozCQuwCiywvAfylpntNzxeMBFroiDCdolFmFHfHsEMEpjusLoHeHFgnqsuizkutxzrphxnGvNsHCdEEamfosIsqTloCNuCBFpGBqkyQCetsvTxzEimHtQwSizGfCtKrcEmtyMvyuxItLoAuwCiywvAfylNoKClwiNBFsSuwConzACXyiCoJNlzeHLNvHovghDswHclqAovAEiiSsuzKpuDdEEACpmfsivTzvwuLuBXuwGpqEGCeprlhuIEiiLvxsVbHMxoCKqbrtIovAsfvBBLGDbCBekxwxspwIoCzjpyLvxsNorCvyzLqfDyxmuNsfwuvxbNJAJlEDLFXEhwyqdEimHxczKkJQvGlLleTxpitdrbzyuyFRpBCoyCwxcsjGdEPriLyEyUDuHMooxGAbEnrkuODTlyGICJuwCfyFyqlqkBeYHypxGnxoSzDScxJExopxweIvteMEAIKgvGPAEALqbEmxnwNrprHnMHzsIyiktFcepsplBJqbwOqxsMtwCikGwvblpxsIosfrMuyvDmsFgBsswazzIaDyDbmxVNGQbxLkxraCpDyprJDyhxIEuwMJzLqGeznkHmptICpemxvNrznCLgkCCriwjsmuNsfvynwvDexLoInGjqAtrkuOlohNBIyNvIKABpvqryyxnwClueHqJISjIMpwJznXoIDnJTzvAuANwSJHyknjGDZlsLeqMtueQuCzDPzyARFJAvFuIhEPrirIJsCTstEqxysvfDxNoKMCjhylIIVpCRioEQxrCtLnxJCtiIEuBXuwGpqdznhpuIhqIrjrAnLCTosRjyFyqAtiNoKHpbrCGQvzuNMwClAmVzzGeqGwzeLrHHFpxLikHsHXyDLhuMpBvyLIIQfpJnIrGrkrmDmuvquiLJuFCtHFgkDCnaxjneqCTteCqcADbCRkDEGxFHfHnJGJjrAGIvDsXPgkwDHativoxJxfezGyFVbGBuRFJAvFuCoMdDbmxgBsSixLiCDLjoEnCgiCpseHnHrApJEjDswAqthzeJvyekIGvoBlDLvrpyxaofBcqMCpyMrFxTtIGpDtEnQsjCsxzHbpErxoKmIFgGlQjozzCdyOEjpFFBsFpIFgBzOwezwHervnlXBrHGGfvMvyyACPsjLaLzousGruBCJLyxootjZvGDyyOmfkuANCQbxLnsvwjYlxIaHyTofOpEsStXQyolJClRtsABGEiiJnLsMuHypnxGCepwHaDypwiLLvCCzLCpDzNnolsssJJzevCtBHTosCtDswAlzkDfJCpdeLEIIRfAQqDswHtzzAdDOrfxMBuyDeIMvrpKtfytGaDTEimHtvISJHRwmvsAlFssoDOsffyAwvEpGOwsEwjtsnAeYBzutLrNHXtDymsyyFbEjHpuxtbpFLGMMfrIcxoEHmlsIscTsvrNvHuGbIPgkwDHdlAtmuLFjxynFCSpuNtyEwlqttCiDvHbCvHNWFpIQqkvwmXyDLaOdojhHGwoQfIFqErzRcpqIsEylnrBnJDXbAJqpDMmapsIhuRlzsFqjvNfqCmoALpltsvaHJFohuAxoQpJLfSHsBalrCnuvCceQyCBFJuCnDDGmXxswaFKJjjSBOKzoIRquyGFqsjIrKOsJhIANyMpLUjITLFXDoJsJOsbxMuyzNpzCfCzvjjysxcuOsfAuLMvDltNvqzAwdlwDuDylohuEIIMexLjoCturphDaJvyeeFyaCCJLGurJGDZzzAdLzmfiHGBsQfiFcDDsuiTrvoyIrusNrFzzcDSvSnGDiouGorvmmCNrFzXpJUjkEamfofutuMTxiHGBCLfpLfrzORdzyHisFlohuyFoMeLFcDDuqlzqXmIPAqsMrxHNhDRqxpPCclqAavOpsMArNCTuDDjoCwkrENsoDOqfiFyCyDjIgtolDuvotCtjCluwNHztCptQpDtFCbCjHtCzEpsGHwvQjvFvxzOJizyDfFzzqpyrMDDdxynvJLqfDtCeFNJdlInHoKzHRiEJLqbJmpvuCpsiEryDRbHIkxrEnfqNBgEDyheJCFMLzHCnpHznkTlDbqxvusMpBCNmCCzDdwyqprqeHdEtwOpBoRuJNknBMnpEnDnyIxzsJvHwNoXKgkyzxtotNoKFypAQuuHXpJPgqzAwdEtsoJDwmCIHxCHuiFgkyKFbCnHyEPoprNVNvHozgcwmMCezBsoYFypAcFQszsxRukDLDmtiFuuNEjsHQVwRoIyullvjpEmtruNEpjNuyAAvIFgupwyplxziDBxfeFBNCErJCuDtGwpEtDHuyCpzyBPsQmpQvclLDoofNwyOsulCFYBFmxQjlltnqsfIsyIEimMAyKOjrRwBpznpHwxtyIrTlyJuGOstRvIlxobnytdrPEwiLLACNeAMqutFpxyDLaOJyfxCzyKGfCQjoHwwqEtIhuGlemyFLCNnLyADswqbwqsoMItoxBrIHGfGUkxrVKXDptdCzHieNVNvNvvFvkmGDqlqAtxDDtxOszWIvHRhsyABepiIeBGtokSBOoApJRKntvwqvsDwMCluxBrBsKmIMukJaovzzLaDOEpoHBQHGfIPwDsamlyyznERHieNVNvHozydyFLrqTrHoHMJJxIyxGNnpLAzpGyipfqoKOtuEvBOHzmAgmxzOrpTxDrJJqnmMFyJDsNzqnJaClwipbEPEFzyAIzCTIPcnwsCbCfCdQxvmiSsIFHoHRcxnwRqsnCkYzGfrGvMGSipRiyovjjXfJryxpJxMsOBMzSMpDpNnoEjAlqIJcsxLuBXuwGpqTxHlFiDyEPDueLGGwRtxLioGwAvmtsy&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;vlbeunuozbpycklsjxlfpaq&#x27;</span></span><br><span class="line">c = &#123;&#125;</span><br><span class="line">count = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    c[key[i]] = <span class="number">0</span></span><br><span class="line">    count[key[i]] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    c[key[i % <span class="built_in">len</span>(key)]] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (ctoi(cipher[i]) - ctoi(key[i % <span class="built_in">len</span>(key)])) &lt; <span class="number">0</span>:</span><br><span class="line">        count[key[i % <span class="built_in">len</span>(key)]] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/e3ee7edd25df4359b19cd3bdbff4049c.png" alt="在这里插入图片描述" /> 容易看出只有'x'符合条件 从解题人的角度老老实实地解的话，可以参考<a href="https://blog.csdn.net/weixin_44110537/article/details/107446238">另一位师傅的wp</a>，这里不再赘述 但仅仅解出这道题是不够的 如这位师傅在wp中分析的，维吉尼亚密码爆破需要经历三个过程 1、Kasiski 实验，通过查找相同的子串(3个字符以上)来猜测可能的key的长度 2、重合指数攻击，通过计算重合指数，进一步确定key的长度 3、字母频率分析，根据英文文档中各个字母的出现频率来推算key的内容</p>
<p>这里提供一个用python写的<a href="https://blog.csdn.net/Ni9htMar3/article/details/53371817">爆破脚本示例</a>，具体原理也可参照<a href="https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81">wiki</a>，这里不再赘述 关键是，如本题所示，如果加密用的字母表（本题为ascii_letters即包含大小写共52个字母），不是经典维吉尼亚密码的26个顺序字母，是否能用类似方法破解？ 我们假设加密的内容都是有意义的英文文本，这里讨论三种情况：</p>
<h3 id="乱序小写字母表">1、乱序小写字母表</h3>
<p>Kasiski实验至于密文有关，通过查找相同的子串(3个字符以上)来猜测可能的key的长度，因此没有影响 由于字母还是那26个字母，重合指数与各个字母的出现频率都是不变的，所以重合指数攻击和字母频率分析依然可以进行 所以上述爆破方法仍适用</p>
<h3 id="缺失的字母表">2、缺失的字母表</h3>
<p>同样，Kasiski实验至于密文有关，没有影响 但是，由于字母的缺失，重合指数与各个字母的出现频率与正常的英文文本不相同，所以无法进行 因此上述爆破方法并不适用 key做到避开某些字母是容易的，但是一段有意义的英文文本完全避开一些字面是困难的 但如果仅仅避开一些出现频率不高的字母（如'x','z'，频率只有0.001），上述爆破方法还是适用的</p>
<h3 id="混入大写字母的小写字母表或是混入小写字母的大写字母表">3、混入大写字母的小写字母表（或是混入小写字母的大写字母表）</h3>
<p>这又会有两种情况 一种是原文的这些混入字母也是大写的（这样做可能是为了和key契合，或者混淆视听），那么只要把全部字母换成小写爆破就行 另一种就是原文特意避开这些字母，和第2种情况不同的是，key中可能含有这些大写字母，那就只要把key和字母表里的大写字母都换成小写，如果仅仅原文避开了一些出现频率不高的字母，仍然可以爆破</p>
<h2 id="结语">结语</h2>
<p>原本还想写下一题[SUCTF2019]MT的，但是MT算法似乎比较麻烦，就单独分一期吧 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-24</title>
    <url>/uncategorized/2021/07/24/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-24</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>台风天，还练了一天车，淦</p>
<h2 id="suctf2019mt">[SUCTF2019]MT</h2>
<p>来填坑了 首先看加密代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) / <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span> : i * <span class="number">4</span> +<span class="number">4</span>]</span><br><span class="line">        block = number.bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = number.long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">transformed_flag = transform(flag[<span class="number">5</span>:-<span class="number">1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;transformed_flag:&#x27;</span>, transformed_flag</span><br><span class="line"><span class="comment"># transformed_flag: 641460a9e3953b1aaa21f3a2</span></span><br></pre></td></tr></table></figure>
<p>看到这个<code>convert</code>函数，我就有些胆怯了 这个位运算看起来完全打乱了加密内容（而且之前碰到类似的题目都没做出来） 尤其是第二三步，感觉完全乱了 看了一眼<a href="https://blog.csdn.net/m0_49109277/article/details/117324488">别人的wp</a>，受到了启发 发现<code>bin(2029229568)</code>后9位都是0，而<code>bin(2245263360)</code>后17位(其实是18位)都是0，与移位的位数相同，那就好办了 首先要明确一件事：位运算符的优先级 移位(&gt;&gt;和&lt;&lt;) &gt; 与运算(&amp;) &gt; 异或运算(^) 就以'abcd'为例，推出第四和第三步的解密过程（第一和第二步同理） 因为我没有装python2的环境，就用python3把加密代码重写了一遍，做了一点小修改 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = bytes_to_long(block.encode())</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(new_message, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">cipher = transform(flag)</span><br></pre></td></tr></table></figure>
<h3 id="第四步操作">第四步操作</h3>
<p>首先要知道，"&gt;&gt;"是二进制位向右移动，低位丢弃，高位补0 经过前三步加密的二进制结果为（当然，解密时以下结果是未知的）： <strong>10100101011101011110111001110111</strong>记为m4 那么 m4&gt;&gt;19 的结果为 <strong>0000000000000000000101001010111</strong> 01011110111001110111 高位补0&lt;- -&gt;低位丢弃 接下来是异或运算 解密需要用到异或运算的两个性质： 1、若a=b ^ c，则c=a ^ b 2、a=a ^ 0 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按位加密的过程中，m4的前19位都是和0做异或运算，也就是说加密结果cipher的前19位与m4是相同的，由此可以得到m4的前19位</span><br><span class="line">又因为**m4后13位 ^ m4&gt;&gt;19的后13位 = m4后13位 ^ m4的前13位 = cipher的后13位**</span><br><span class="line">所以**cipher的后13位 ^ m4的前13位 = m4后13位**</span><br><span class="line">由此可以得到完整的m4</span><br><span class="line">解密代码如下：</span><br><span class="line">```python</span><br><span class="line">block = bytes_to_long((cipher[i * 4: i * 4 + 4]))</span><br><span class="line">block = bin(block)[2:].zfill(32)</span><br><span class="line"># step4 decode</span><br><span class="line">m4 = block[:19] + bin(int(block[:13], 2) ^ int(block[19:], 2))[2:].zfill(13)</span><br><span class="line">print(m4)</span><br><span class="line">print(long_to_bytes(int(m4, 2)))</span><br></pre></td></tr></table></figure></p>
<h3 id="第三步操作">第三步操作</h3>
<p>首先要知道，"&lt;&lt;"是二进制位向左移动，高位丢弃，低位补0；"&amp;"是按位做与运算，有0出0，全1出1 经过前两步加密的二进制结果为（当然，解密时以下结果是未知的）： <strong>00100001101100011110111001110111</strong>记为m3 00100001101100011 <strong>11011100111011100000000000000000</strong> 高位丢弃&lt;- -&gt;低位补0 接下来是与运算 首先看bin(2245263360)='0b<strong>10000101110101000000000000000000</strong>' 发现2245263360的后17位都是0 那么，<strong>m3&lt;&lt;17的后17位 &amp; 2245263360的后17位 = 00000000000000000(17个0)</strong> 与第四步解密操作相同，就可以得到m3的后17位就是m4的后17位 又因为<strong>m3前15位 ^ m3&lt;&lt;17的前15位 &amp; 2245263360的前15位 = m3前15位 ^ m3的后15位 &amp; 2245263360的前15位 = m4的前15位</strong> 由此可以得到完整的m3 解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step3 decode</span></span><br><span class="line">block = m4</span><br><span class="line">m3 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">17</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2245263360</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">15</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">15</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">15</span>) + block[<span class="number">15</span>:]</span><br><span class="line"><span class="built_in">print</span>(m3)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure> 第二和第一步的解密类似，就是需要重复操作几次 完整的测试解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = bytes_to_long(block.encode())</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(new_message, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">cipher = transform(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(bytes_to_long(cipher))[<span class="number">2</span>:].zfill(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">4</span>):</span><br><span class="line">    block = bytes_to_long((cipher[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]))</span><br><span class="line">    block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># step4 decode</span></span><br><span class="line">    m4 = block[:<span class="number">19</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">19</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    <span class="built_in">print</span>(m4)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m4, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step3 decode</span></span><br><span class="line">    block = m4</span><br><span class="line">    m3 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">17</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2245263360</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">15</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">15</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">15</span>) + block[<span class="number">15</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m3)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step2 decode</span></span><br><span class="line">    block = m3</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">23</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">23</span>:]</span><br><span class="line">    block = m3[:<span class="number">14</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">14</span>:]</span><br><span class="line">    block = m3[:<span class="number">5</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">9</span>:<span class="number">14</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">5</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">5</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">5</span>) + block[<span class="number">5</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m2)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step1 decode</span></span><br><span class="line">    block = m2</span><br><span class="line">    m1 = block[:<span class="number">13</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">26</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    block = m1 + block[<span class="number">26</span>:]</span><br><span class="line">    m1 = block[:<span class="number">26</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">19</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">26</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    plain += m1</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plain, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure> 结果是对的 <img data-src="https://img-blog.csdnimg.cn/10878cc1f7444174baf87e11b705b85e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后就把测试解密的代码应用于transformed_flag上 这里有个地方有点麻烦，就是原加密代码还要一步：<code>transformed_flag = transform(flag[5:-1].decode('hex')).encode('hex')</code> 而python3没有<code>decode('hex')</code>和<code>encode('hex')</code>，可以参考<a href="https://www.cnblogs.com/zhaijiahui/p/9597935.html">Python3 字符串与hex之间的相互转换</a> <code>.decode('hex')</code>对应于<code>bytes.fromhex()</code>，<code>.encode('hex')</code>对应于<code>.hex()</code> 所以，完整的解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">4</span>):</span><br><span class="line">    block = bytes_to_long((cipher[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]))</span><br><span class="line">    block = <span class="built_in">bin</span>(block)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># step4 decode</span></span><br><span class="line">    m4 = block[:<span class="number">19</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">19</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    <span class="built_in">print</span>(m4)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m4, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step3 decode</span></span><br><span class="line">    block = m4</span><br><span class="line">    m3 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">17</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2245263360</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">15</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">15</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">15</span>) + block[<span class="number">15</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m3)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m3, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step2 decode</span></span><br><span class="line">    block = m3</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">23</span>:], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">23</span>:]</span><br><span class="line">    block = m3[:<span class="number">14</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">14</span>:<span class="number">23</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[<span class="number">5</span>:<span class="number">14</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">9</span>) + block[<span class="number">14</span>:]</span><br><span class="line">    block = m3[:<span class="number">5</span>] + m2</span><br><span class="line">    m2 = <span class="built_in">bin</span>((<span class="built_in">int</span>(block[<span class="number">9</span>:<span class="number">14</span>], <span class="number">2</span>) &amp; <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">2029229568</span>)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[:<span class="number">5</span>], <span class="number">2</span>)) ^ <span class="built_in">int</span>(block[:<span class="number">5</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">5</span>) + block[<span class="number">5</span>:]</span><br><span class="line">    <span class="built_in">print</span>(m2)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m2, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment"># step1 decode</span></span><br><span class="line">    block = m2</span><br><span class="line">    m1 = block[:<span class="number">13</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[:<span class="number">13</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">26</span>], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">13</span>)</span><br><span class="line">    block = m1 + block[<span class="number">26</span>:]</span><br><span class="line">    m1 = block[:<span class="number">26</span>] + <span class="built_in">bin</span>(<span class="built_in">int</span>(block[<span class="number">13</span>:<span class="number">19</span>], <span class="number">2</span>) ^ <span class="built_in">int</span>(block[<span class="number">26</span>:], <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1, <span class="number">2</span>)))</span><br><span class="line">    plain += m1</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plain, <span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plain, <span class="number">2</span>)).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/ab316bbef8154b5b9629ca48f7b1efa9.png" alt="在这里插入图片描述" /> 即为flag</p>
<h3 id="未曾设想的道路">未曾设想的道路</h3>
<p>正如wp中所说，还有一种通过反复加密得到结果的解法 这里给出python3的代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">m</span>):</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">13</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">9</span> &amp; <span class="number">2029229568</span></span><br><span class="line">    m = m ^ m &lt;&lt; <span class="number">17</span> &amp; <span class="number">2245263360</span></span><br><span class="line">    m = m ^ m &gt;&gt; <span class="number">19</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(message) % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message) // <span class="number">4</span>):</span><br><span class="line">        block = message[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">        block = bytes_to_long(block)</span><br><span class="line">        block = convert(block)</span><br><span class="line">        block = long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">        new_message += block</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line">transformed_flag = <span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>)</span><br><span class="line"><span class="comment"># assert (transform(bytes.fromhex(&#x27;84b45f89af22ce7e67275bdc&#x27;)).hex() == transformed_flag)</span></span><br><span class="line">c = cipher</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = transform(c.zfill(<span class="built_in">len</span>(cipher)))</span><br><span class="line">    <span class="built_in">print</span>(c.<span class="built_in">hex</span>())</span><br><span class="line">    s.add(c.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="keyword">if</span> c.<span class="built_in">hex</span>() == transformed_flag:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure> 至于为什么，是因为本题使用的加密算法是<a href="https://zh.wikipedia.org/zh-cn/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95">梅森旋转算法（Mersenne twister）</a>，是一种伪随机数生成算法，该算法的一个更新的和更常用的是MT19937, 32位字长，对应了题目 并且该算法生成的随机数具有周期性，这也就不难理解为什么一直加密密文能得到明文，因为经过一个周期后得到的还是密文，那么上一个就是明文了 上述解密代码结果为： <img data-src="https://img-blog.csdnimg.cn/3580010fbd854aa38576b6f24675a5d6.png" alt="在这里插入图片描述" /> 不难发现其周期为61319</p>
<p>更多关于MT19937伪随机数生成算法的体型可以参考madmonkey前辈的<a href="https://badmonkey.site/archives/mt19937.html#%E6%B5%85%E6%9E%90mt19937%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95">浅析mt19937伪随机数生成算法</a> 其中介绍了与第一种方法相同的解法，只不过和wp一样采用模块化的代码，将解密步骤打包成函数 这里给出参照其中代码的解密代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_right_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_left_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span></span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_number</span>(<span class="params">y</span>):</span></span><br><span class="line">    y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">    y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">    y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">    y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> y &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">y</span>):</span></span><br><span class="line">    y = inverse_right(y, <span class="number">19</span>)</span><br><span class="line">    y = inverse_left_mask(y, <span class="number">17</span>, <span class="number">2245263360</span>)</span><br><span class="line">    y = inverse_left_mask(y, <span class="number">9</span>, <span class="number">2029229568</span>)</span><br><span class="line">    y = inverse_right(y, <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> y &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">transformed_flag = <span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;641460a9e3953b1aaa21f3a2&#x27;</span>)</span><br><span class="line">new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher) // <span class="number">4</span>):</span><br><span class="line">    block = cipher[i * <span class="number">4</span>: i * <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">    block = bytes_to_long(block)</span><br><span class="line">    block = recover(block)</span><br><span class="line">    block = long_to_bytes(block, <span class="number">4</span>)</span><br><span class="line">    new_message += block</span><br><span class="line"><span class="built_in">print</span>(new_message.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>
<p>结果是相同的： <img data-src="https://img-blog.csdnimg.cn/6b4452713e6c4479b4bf6b97211f4e2e.png" alt="在这里插入图片描述" /> 另一种方法是<strong>黑箱方法</strong>，将密文和明文的二进制编码视为两个向量<span class="math inline">\(a,b\)</span>，而由加密方法可知，两个向量存在线性关系，即存在一个方阵<span class="math inline">\(M\)</span>，使得<span class="math inline">\(a=Mb\)</span> 具体线性关系如下： <img data-src="https://img-blog.csdnimg.cn/6cd66566e6504f699416464eb1a10ae4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这种方法没怎么看懂，以后有机会再说（溜了溜了）</p>
<h2 id="结语">结语</h2>
<p>昨天(7.24)写了一点，但没写完 因为方法二的代码出了bug，怎么都没法解决，感谢Phoenix大佬帮我改了 今天(7.25)争取加更一期 （你问我7.23干嘛去了？补了一天番[doge]） 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-25</title>
    <url>/uncategorized/2021/07/25/vacation_week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-25</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>加更</p>
<h2 id="utctf2020otp">[UTCTF2020]OTP</h2>
<p>就给了个加密文件： <img data-src="https://img-blog.csdnimg.cn/500a35625bc04c88baa7462eeb791e5d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 一头雾水 搜了搜OTP是什么意思，谷歌给的第一个是One Time Password，这让我怎么搞？ 一次一密？也不像啊 找了找<a href="https://blog.csdn.net/weixin_44110537/article/details/107619513">wp</a> <img data-src="https://img-blog.csdnimg.cn/075c98068d58453ead5ff9be9aec66d7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这 他的文件怎么和我不一样啊？ 不管，先试试 <img data-src="https://img-blog.csdnimg.cn/47c6c91f4f9745789709097e81fa69a0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这 那没事了</p>
<h2 id="结语">结语</h2>
<p>下面一道题还有一些地方没整明白 今天就水了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-3</title>
    <url>/uncategorized/2021/08/03/vacation_week4-5/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-3</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>摸鱼中。。。</p>
<h2 id="i春秋云上巅峰赛2021crtrsa">[i春秋云上巅峰赛2021]crtrsa</h2>
<p>题面： <img data-src="https://img-blog.csdnimg.cn/50d113a42f5a4300aef3f11551daaace.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 加密的sage代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flagn,p,q</span><br><span class="line"><span class="comment">#p and q are two primes generated by getPrime</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_gen</span>():</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		dp = random.randint(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>)</span><br><span class="line">		dq = random.randint(<span class="number">1</span>,q-<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span> gcd(dp, p - <span class="number">1</span>) == <span class="number">1</span> <span class="keyword">and</span> gcd(dq, q - <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">			d = crt([dp,dq],[p-<span class="number">1</span>,q-<span class="number">1</span>])</span><br><span class="line">			phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">			R = Integers(phi)</span><br><span class="line">			e = R(d)^-<span class="number">1</span></span><br><span class="line">			<span class="keyword">return</span> p*q,e</span><br><span class="line">n,e = key_gen()</span><br><span class="line"><span class="built_in">print</span> e</span><br><span class="line"><span class="built_in">print</span> n</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(flagn,<span class="built_in">int</span>(e),n)</span><br></pre></td></tr></table></figure>
<p>看代码的时候，数学关系很容易找，而且很多，感觉好像能行 最核心的是<code>d = crt([dp,dq],[p-1,q-1])</code>，翻译成数学语言就是： <span class="math display">\[
\begin{cases}
d \equiv dp \space mod \space dq\\
d \equiv (p-1) \space mod \space (q-1)
\end{cases}
\]</span> 还有一条隐藏的或者说是约定俗成的数学关系就是： <span class="math display">\[
\begin{cases}
dp \equiv d\space mod\space (p-1)\\
dq \equiv d\space mod\space (q-1)
\end{cases}
\]</span> （虽然当时不确定，鬼知道出题人会出什么幺蛾子，后来发现是我想多了） 其他的都是常规的RSA 看起来线索很多，但又无从下手 后来badm0nkey前辈提醒我，从dp下手爆破 因为<code>dp = random.randint(1,1&lt;&lt;20)</code>，也就是说<span class="math inline">\(1\leq dp \leq 1048576\)</span>，是容易遍历的 但是即使容易遍历，但是出了dp，其他相关的未知量也是未知的，遍历过程中怎么判断这个dp就是我们想要的呢？ 比赛结束后，前辈给了我答案，推导过程如下： 首先，根据RSA加密算法，有 <span class="math display">\[
e\cdot d \equiv 1 \space mod \space (p-1)(q-1)
\]</span> 那么有<span class="math inline">\(e\cdot d \equiv 1 \space mod \space (p-1)\)</span> 又<span class="math inline">\(dq \equiv d\space mod\space (q-1)\)</span> 故 <span class="math display">\[
e\cdot dq \equiv ed\space mod\space (q-1) \equiv 1\space mod\space (q-1)
\]</span> 故<span class="math inline">\(\exists k\in \mathbb{Z}\)</span>​，<span class="math inline">\(s.t.\)</span>​ <span class="math display">\[
e\cdot dp=1+k(p-1)
\]</span> 移项得<span class="math inline">\(e\cdot dp-1=k(p-1)\)</span> 由<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86">费马小定理</a>，假如<span class="math inline">\(a\)</span>是一个整数，<span class="math inline">\(p\)</span>是一个质数，那么<span class="math inline">\(a^{p} - a\)</span>是p的倍数，可以表示为 <span class="math display">\[
a^p \equiv a \space mod\space p
\]</span> 如果<span class="math inline">\(a\)</span>不是<span class="math inline">\(p\)</span>的倍数，这个定理也可以写成 <span class="math display">\[
a^{p-1} \equiv 1 \space mod\space p
\]</span> 可以推出 <span class="math display">\[
a^{k(p-1)} \equiv 1 \space mod\space p
\]</span> 那么又<span class="math inline">\(\exists t\in \mathbb{Z}\)</span>​，<span class="math inline">\(s.t.\)</span>​ <span class="math display">\[
a^{k(p-1)} = 1+tp
\]</span> 移项得<span class="math inline">\(a^{k(p-1)} - 1=tp\)</span> 在模N的情况下也成立，也就是有<span class="math inline">\(e\cdot dp-1\equiv k(p-1) \space mod \space N\)</span>，则<span class="math inline">\(a^{e\cdot dp-1} - 1\equiv a^{k(p-1)} - 1 \space mod \space N \equiv tp \space mod \space N\)</span> 所以，只要<span class="math inline">\(gcd(a^{e\cdot dp-1}, N) \neq 1\)</span>，则这个dp就是我们想要的，并且<span class="math inline">\(gcd(a^{e\cdot dp-1}, N) =p\)</span> 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">e = <span class="number">2953544268002866703872076551930953722572317122777861299293407053391808199220655289235983088986372630141821049118015752017412642148934113723174855236142887</span></span><br><span class="line">N = <span class="number">6006128121276172470274143101473619963750725942458450119252491144009018469845917986523007748831362674341219814935241703026024431390531323127620970750816983</span></span><br><span class="line">c = <span class="number">4082777468662493175049853412968913980472986215497247773911290709560282223053863513029985115855416847643274608394467813391117463817805000754191093158289399</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dp <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">3</span>, <span class="number">1</span>&lt;&lt;<span class="number">20</span>, <span class="number">2</span>)):</span><br><span class="line">    tmp = e*dp-<span class="number">1</span></span><br><span class="line">    t = <span class="built_in">pow</span>(<span class="number">3</span>, tmp, N)</span><br><span class="line">    p = GCD(N, t-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> p != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;find p!&quot;</span>)</span><br><span class="line">        q = N//p</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e, phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/730b3da53e584630a945ce5666675e7f.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>以后可能要两日一更了，太多事情没干 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-7</title>
    <url>/uncategorized/2021/08/07/vacation_week4-5/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-7</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="watevrctf-2019ecc-rsa">[watevrCTF 2019]ECC-RSA</h2>
<p>看到标题就有点怕了，ECC椭圆曲线加密，学过一点皮毛，没做过题，找<a href="https://blog.csdn.net/a5555678744/article/details/117575339">wp</a> 加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> P521 <span class="keyword">as</span> Curve</span><br><span class="line"><span class="keyword">from</span> fastecdsa.point <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_rsa_primes</span>(<span class="params">G</span>):</span></span><br><span class="line">	urand = bytes_to_long(urandom(<span class="number">521</span>//<span class="number">8</span>))</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		s = getrandbits(<span class="number">521</span>) ^ urand</span><br><span class="line"></span><br><span class="line">		Q = s*G</span><br><span class="line">		<span class="keyword">if</span> isPrime(Q.x) <span class="keyword">and</span> isPrime(Q.y):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;ECC Private key:&quot;</span>, <span class="built_in">hex</span>(s))</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;RSA primes:&quot;</span>, <span class="built_in">hex</span>(Q.x), <span class="built_in">hex</span>(Q.y))</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Modulo:&quot;</span>, <span class="built_in">hex</span>(Q.x * Q.y))</span><br><span class="line">			<span class="keyword">return</span> (Q.x, Q.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">input</span>(), byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">ecc_p = Curve.p</span><br><span class="line">a = Curve.a</span><br><span class="line">b = Curve.b</span><br><span class="line"></span><br><span class="line">Gx = Curve.gx</span><br><span class="line">Gy = Curve.gy</span><br><span class="line">G = Point(Gx, Gy, curve=Curve)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p, q = gen_rsa_primes(G)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;ECC Curve Prime: &quot;</span> + <span class="built_in">hex</span>(ecc_p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve a: &quot;</span> + <span class="built_in">hex</span>(a) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve b: &quot;</span> + <span class="built_in">hex</span>(b) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gx: &quot;</span> + <span class="built_in">hex</span>(Gx) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gy: &quot;</span> + <span class="built_in">hex</span>(Gy) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;e: &quot;</span> + <span class="built_in">hex</span>(e) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;p * q: &quot;</span> + <span class="built_in">hex</span>(n) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line">file_out.write(<span class="string">&quot;ciphertext: &quot;</span> + <span class="built_in">hex</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>后来发现，关于<a href="https://blog.csdn.net/sitebus/article/details/82835492">椭圆曲线加密算法</a>，本题用到的其实就是威尔斯特拉斯方程（Weierstrass）：<span class="math inline">\(y^2 = x^3 + ax + b\)</span> 代码中<code>a</code>,<code>b</code>就是方程中的a,b，<code>ecc_p</code>指的是椭圆曲线加密算法<span class="math inline">\(y^2 = x^3 + ax + b(mod\space p)\)</span>，具体可以参照<a href="https://fastecdsa.readthedocs.io/en/latest/fastecdsa.html">fastecdsa库的官方文档</a> 顺带一提，这个库只能在Linux环境下安装 <img data-src="https://img-blog.csdnimg.cn/c7f9edead21b4e72ab525a5b4a8b2bfa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 代码中的<code>G</code>指的是基点，也就是加密最开始的那个点；<code>Gx</code>,<code>Gy</code>即为基点的横纵坐标 然后把<code>G</code>放到生成RSA加密所需的p,q的函数<code>gen_rsa_primes(G)</code>中，先随机生成了一个<code>s</code>，然后<code>Q = s*G</code>中<code>Q</code>也是椭圆曲线上的点，只是在这个阿贝尔群中作数乘运算，其中<code>s</code>应该小于G的阶数 最后，p,q即为Q点的横纵坐标 显然G点满足椭圆曲线方程，而n=pq，其中n为已知量，即有如下方程组： <span class="math display">\[
\begin{cases}
q^2 = p^3 + ap + b\space(mod\space P)\\
n = pq
\end{cases}
\]</span> 由于变量重复，记<code>ecc_p</code>为<span class="math inline">\(P\)</span> 解方程<span class="math inline">\(n^2 = p^5 + ap^3 + bp^2\space(mod\space P)\)</span>即可得到p sage代码如下： <img data-src="https://img-blog.csdnimg.cn/45a2dcede7de408f85894e01d9debdd7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 其中<code>R.&lt;x&gt; = PolynomialRing(GF(P))</code>即为在有限域<span class="math inline">\(GF(P)\)</span>中求解，其实就是<span class="math inline">\(mod\space P\)</span>的意思 得到三个解，显然第一和第三个不是质数，只可能是第二个 然后就是常规的RSA解密，解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">list_p = [<span class="number">6813140671672694477701511883397067876211159809088064490593325584756562268820329988116480298456252746748095410666300132267213094431909630229631434972416225885</span>, <span class="number">4573744216059593260686660411936793507327994800883645562370166075007970317346237399760397301505506131100113886281839847419425482918932436139080837246914736557</span>, <span class="number">1859314969084523636298100850823722544590555574470838518640063093117116629078281861281849586432508721074855657736668366212762253040197962779753163192386773060</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> list_p:</span><br><span class="line">    <span class="built_in">print</span>(gmpy2.is_prime(p))</span><br><span class="line"></span><br><span class="line">p = <span class="number">4573744216059593260686660411936793507327994800883645562370166075007970317346237399760397301505506131100113886281839847419425482918932436139080837246914736557</span></span><br><span class="line">n = <span class="number">0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28f</span></span><br><span class="line">q = n//p</span><br><span class="line">c = <span class="number">0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9e</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/338b741a270a41eb8b41360ad6d9b887.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>终于把1分题刷完了 下一道题还得研究一下 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-9</title>
    <url>/uncategorized/2021/08/09/vacation_week4-5/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-9</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>加入了Nep联合战队，又要忙起来了啊</p>
<h2 id="nctf2019easyrsa">[NCTF2019]easyRSA</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">p = <span class="number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span></span><br><span class="line">q = <span class="number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag.startswith(<span class="string">&#x27;NCTF&#x27;</span>))</span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(m.bit_length() &gt; <span class="number">1337</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 10562302690541901187975815594605242014385201583329309191736952454310803387032252007244962585846519762051885640856082157060593829013572592812958261432327975138581784360302599265408134332094134880789013207382277849503344042487389850373487656200657856862096900860792273206447552132458430989534820256156021128891296387414689693952047302604774923411425863612316726417214819110981605912408620996068520823370069362751149060142640529571400977787330956486849449005402750224992048562898004309319577192693315658275912449198365737965570035264841782399978307388920681068646219895287752359564029778568376881425070363592696751183359</span></span><br></pre></td></tr></table></figure>
<p>p和q都给了，这不是白给题吗？ 然后开开心心地去做了 结果发现解出来都是一堆乱码，我直接找<a href="http://yulige.top/?p=752#easyRSA909pt_2solvers">wp</a>（发现比赛的时候只有两个人解出来，看来不简单） 又是e和φ不互素的问题，但是之前<a href="https://blog.csdn.net/weixin_52446095/article/details/118733418?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162841843716780366538424%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162841843716780366538424&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-118733418.pc_v2_rank_blog_default&amp;utm_term=e%E4%BA%92%E7%B4%A0&amp;spm=1018.2226.3001.4450">[De1CTF2019]babyrsa</a>和<a href="https://blog.csdn.net/weixin_52446095/article/details/117136443?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162841848716780264050406%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162841848716780264050406&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-117136443.pc_v2_rank_blog_default&amp;utm_term=e%E4%BA%92%E8%B4%A8&amp;spm=1018.2226.3001.4450">EzRSA</a>的解法都不适用 接着看wp，给了一种新的思路 将同余方程 <span class="math display">\[
m^e \equiv c \quad (mod\ n)
\]</span> 化成 <span class="math display">\[
\begin{cases}
m^e &amp;\equiv c \quad (mod\ p)\\
m^e &amp;\equiv c \quad (mod\ q)
\end{cases}
\]</span> 然后在有限域<span class="math inline">\(GF(p)\)</span>和<span class="math inline">\(GF(q)\)</span>对两个方程分别开<span class="math inline">\(e\)</span>次方根，再作<span class="math inline">\(CRT\)</span>即可得到<span class="math inline">\(m\)</span>（妙啊） 关键是怎么再有限域中开任意次方根 出题人给了一个AMM算法： <img data-src="https://img-blog.csdnimg.cn/735af9bd1e9a497c8fc6eb7e28013af0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这里对wp的代码进行了一些修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_k</span>(<span class="params">s, r</span>):</span></span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(GF(r))</span><br><span class="line">    f = x * s + <span class="number">1</span></span><br><span class="line">    k = <span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="comment"># About 3 seconds to run</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AMM</span>(<span class="params">o, r, q</span>):</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n----------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(r, o, q))</span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="keyword">while</span> p ^ ((q-<span class="number">1</span>) // r) == <span class="number">1</span>:</span><br><span class="line">        p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p))</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        s = s // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s, t))</span><br><span class="line">    k = cal_k(s, r)</span><br><span class="line">    alp = (k * s + <span class="number">1</span>) // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(alp))</span><br><span class="line">    a = p ^ (r**(t-<span class="number">1</span>) * s)</span><br><span class="line">    b = o ^ (r*alp - <span class="number">1</span>)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t):</span><br><span class="line">        d = b ^ (r^(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Calculating DLP...&#x27;</span>)</span><br><span class="line">            j = - dicreat_log(a, d)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Finish DLP...&#x27;</span>)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c ^ r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAllPRoot</span>(<span class="params">p, e</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start to find all the Primitive &#123;:#x&#125;th root of 1 modulo &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(e, p))</span><br><span class="line">    start = time.time()</span><br><span class="line">    proot = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(proot) &lt; e:</span><br><span class="line">        proot.add(<span class="built_in">pow</span>(random.randint(<span class="number">2</span>, p-<span class="number">1</span>), (p-<span class="number">1</span>)//e, p))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="keyword">return</span> proot</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAllSolutions</span>(<span class="params">mp, proot, cp, p</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start to find all the &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(e, cp, p))</span><br><span class="line">    start = time.time()</span><br><span class="line">    all_mp = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> proot:</span><br><span class="line">        mp2 = mp * root % p</span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">pow</span>(mp2, e, p) == cp)</span><br><span class="line">        all_mp.add(mp2)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="keyword">return</span> all_mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">10562302690541901187975815594605242014385201583329309191736952454310803387032252007244962585846519762051885640856082157060593829013572592812958261432327975138581784360302599265408134332094134880789013207382277849503344042487389850373487656200657856862096900860792273206447552132458430989534820256156021128891296387414689693952047302604774923411425863612316726417214819110981605912408620996068520823370069362751149060142640529571400977787330956486849449005402750224992048562898004309319577192693315658275912449198365737965570035264841782399978307388920681068646219895287752359564029778568376881425070363592696751183359</span></span><br><span class="line">p = <span class="number">199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059</span></span><br><span class="line">q = <span class="number">112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741</span></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line">mp = AMM(cp, e, p)</span><br><span class="line">mq = AMM(cq, e, q)</span><br><span class="line">p_proot = findAllPRoot(p, e)</span><br><span class="line">q_proot = findAllPRoot(q, e)</span><br><span class="line">mps = findAllSolutions(mp, p_proot, cp, p)</span><br><span class="line">mqs = findAllSolutions(mq, q_proot, cq, q)</span><br><span class="line"><span class="built_in">print</span>(mps, mqs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">m</span>):</span></span><br><span class="line">    h = m.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(h) &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span>.fromhex(h).startswith(<span class="string">b&#x27;NCTF&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(h))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># About 16 mins to run 0x1337^2 == 24196561 times CRT</span></span><br><span class="line">start = time.time()</span><br><span class="line">result = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Start CRT...&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(mpp), <span class="built_in">int</span>(mqq)], [p, q])</span><br><span class="line">        <span class="keyword">if</span> check(solution):</span><br><span class="line">            <span class="built_in">print</span>(solution)</span><br><span class="line">            result.append(<span class="built_in">bytes</span>.fromhex(solution.<span class="built_in">hex</span>()))</span><br><span class="line">    <span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result:&quot;</span>, result)</span><br></pre></td></tr></table></figure>
<p>得到的结果如下： <img data-src="https://img-blog.csdnimg.cn/fadba10ada3144278dab9a6f1506dd97.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 抛开算法和代码本身的推导不谈（因为我完全是不懂哦)，这种做法是否对其他e和φ不互素的情况适用呢？ 经过试验后发现，如果要应用AMM算法，需要满足两个条件： 一、<span class="math inline">\(r|q-1\)</span>​，二、<span class="math inline">\(\exists k\in \mathbb{Z}，s.t.\space r|ks+1\)</span>​ 需要满足条件一是因为必须使<code>t</code>&gt;0，否则<code>a = p ^ (r**(t-1) * s)</code>会出错 而如果不满足条件二，那么最后会无解，或者如原代码写的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (k * s + <span class="number">1</span>) % r != <span class="number">0</span>:</span><br><span class="line">	k += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>会一直循环直到内存溢出</p>
<p>出题人说灵感来自hackergame 2019的一道<strong>十次方根</strong>题，于是就去找了<a href="https://github.com/ustclug/hackergame2019-writeups/tree/master/official/%E5%8D%81%E6%AC%A1%E6%96%B9%E6%A0%B9">这道题</a> 在本题中的y可以应用AMM算法，e=10 结果如下： <img data-src="https://img-blog.csdnimg.cn/59e122e692fd4518bce463e7f9772e27.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 其实也可以直接开方计算，时间也差不多，结果相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_roots = []</span><br><span class="line">y = <span class="number">116513882455567447431772208851676203256471727099349255694179213039239989833646726805040167642952589899809273716764673737423792812107737304956679717082391151505476360762847773608327055926832394948293052633869637754201186227370594688119795413400655007893009882742908697688490841023621108562593724732469462968731</span></span><br><span class="line">z = <span class="number">88688615046438957657148589794574470139777919686383514327296565433247300792803913489977671293854830459385807133302995575774658605472491904258624914486448276269854207404533062581134557448023142028865220726281791025833570337140263511960407206818858439353134327592503945131371190285416230131136007578355799517986306208039490339159501009668785839201465041101739825050371023956782364610889969860432267781626941824596468923354157981771773589236462813563647577651117020694251283103175874783965004467136515096081442018965974870665038880840823708377340101510978112755669470752689525778937276250835072011344062132449232775717960070624563850487919381138228636278647776184490240264110748648486121139328569423969642059474027527737521891542567351630545570488901368570734520954996585774666946913854038917494322793749823245652065062604226133920469926888309742466030087045251385865707151307850662127591419171619721200858496299127088429333831383287417361021420824398501423875648199373623572614151830871182111045650469239575676312393555191890749537174702485617397506191658938798937462708198240714491454507874141432982611857838173469612147092460359775924447976521509874765598726655964369735759375793871985156532139719500175158914354647101621378769238233</span></span><br><span class="line">e = <span class="number">10</span></span><br><span class="line">R.&lt;b&gt; = PolynomialRing(GF(y^<span class="number">3</span>))</span><br><span class="line">g = b^e - z</span><br><span class="line"><span class="keyword">for</span> yr <span class="keyword">in</span> g.roots():</span><br><span class="line">    y_roots.append(yr[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(y_roots)</span><br></pre></td></tr></table></figure>
<p>（但是这道题在模y的情况下对z开10次方根没有用，需要模y^3开根，虽然理论上可行，但是很花时间） <img data-src="https://img-blog.csdnimg.cn/1485b5b3e2984436abb0acd23196aa65.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这题的出题人也遇到了相同的问题 后来我找到了一篇题<a href="https://blog.arpe1s.xyz/posts/2021/01/rth_root/">为浅谈高次剩余的求解</a>的博客，其中有这样一段话： <img data-src="https://img-blog.csdnimg.cn/8dad6b4935354402b8a5b0a2ff2e1ff4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 给了对于e和φ不互素问题的一种可能的解法</p>
<h2 id="结语">结语</h2>
<p>e和φ不互素问题还是一个有待研究的问题，如果以后碰到再做研究 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-27</title>
    <url>/uncategorized/2021/07/27/vacation_week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-27</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="actf新生赛2020crypto-des">[ACTF新生赛2020]crypto-des</h2>
<p>题目给了一串浮点数： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">72143238992041641000000.000000</span>,</span><br><span class="line"><span class="number">77135357178006504000000000000000.000000</span>,</span><br><span class="line"><span class="number">1125868345616435400000000.000000</span>,</span><br><span class="line"><span class="number">67378029765916820000000.000000</span>,</span><br><span class="line"><span class="number">75553486092184703000000000000.000000</span>,</span><br><span class="line"><span class="number">4397611913739958700000.000000</span>,</span><br><span class="line"><span class="number">76209378028621039000000000000000.000000</span></span><br></pre></td></tr></table></figure> 还有一个提示： To solve the key, Maybe you know some interesting data format about C language? 数据类型？double？有什么用啊？ 还有一个加密的压缩包，试了试爆破，没成功 直接找<a href="https://blog.csdn.net/MikeCoke/article/details/113796480">wp</a>，原来考的是关于数据在内存中的存储（完全不会呢） 对wp中的解题代码做了一些修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = [<span class="number">72143238992041641000000.000000</span>, <span class="number">77135357178006504000000000000000.000000</span>, <span class="number">1125868345616435400000000.000000</span>, <span class="number">67378029765916820000000.000000</span>, <span class="number">75553486092184703000000000000.000000</span>, <span class="number">4397611913739958700000.000000</span>, <span class="number">76209378028621039000000000000000.000000</span>]</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    a += struct.pack(<span class="string">&#x27;&lt;f&#x27;</span>, i).<span class="built_in">hex</span>()        <span class="comment"># 小端</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">    b += struct.pack(<span class="string">&#x27;&gt;f&#x27;</span>, j).<span class="built_in">hex</span>()        <span class="comment"># 大端</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(a, <span class="number">16</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(b, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>
<p>wp中的注释“大端”“小端”（wp中写成两个“小端”了）还有<code>struct.pack('&lt;f', i)</code>让我挺在意的 于是就找了<a href="https://docs.python.org/zh-cn/3/library/struct.html">struct库的官方文档</a>，有这么一段话： <img data-src="https://img-blog.csdnimg.cn/2f8a2169bc684086a45824ffb6f33406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 不难猜想，解题代码同时写了大端和小端是因为不同的计算机是不一样的 而后面的"f"是格式字符： <img data-src="https://img-blog.csdnimg.cn/ce7031e33e294a1c80315e593e2c7998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 那么什么是大端和小端呢？参考<a href="https://zhuanlan.zhihu.com/p/352145413">知乎文章：什么是大端序和小端序，为什么要有字节序？</a> <img data-src="https://img-blog.csdnimg.cn/1621d21ea54247cfa3bab410c795a793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 简单来说一个是正着写（按照人类阅读习惯），一个是倒着写（符合计算机读取习惯） 解题代码输出结果为： <img data-src="https://img-blog.csdnimg.cn/77b764b8306249358ae28ec99b03fd55.png" alt="在这里插入图片描述" /> 得到压缩包密码：Interestring Idea to encrypt 解压之后得到一个加密程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line">deskey = <span class="string">&quot;********&quot;</span></span><br><span class="line">DES = pyDes.des(deskey)</span><br><span class="line">DES.setMode(<span class="string">&#x27;ECB&#x27;</span>)</span><br><span class="line">DES.Kn = [</span><br><span class="line">			[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], </span><br><span class="line">			[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], </span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">		]</span><br><span class="line">cipher_list = base64.b64encode(DES.encrypt(flag))</span><br><span class="line"><span class="comment">#b&#x27;vrkgBqeK7+h7mPyWujP8r5FqH5yyVlqv0CXudqoNHVAVdNO8ML4lM4zgez7weQXo&#x27;</span></span><br></pre></td></tr></table></figure>
<p>照应了标题的crypto-des DES和AES一样属于块加密，深究起来的话也很麻烦 这道题只要照着加密脚本写解密脚本就行了 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 7/27/2021 4:19 PM</span></span><br><span class="line"><span class="comment"># @Author  : Σ2333!</span></span><br><span class="line"><span class="comment"># @File    : solution.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">deskey = <span class="string">&quot;********&quot;</span></span><br><span class="line">DES = pyDes.des(deskey)</span><br><span class="line">DES.setMode(<span class="string">&#x27;ECB&#x27;</span>)</span><br><span class="line">DES.Kn = [</span><br><span class="line">			[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">			[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">		]</span><br><span class="line"></span><br><span class="line"><span class="comment"># cipher_list = base64.b64encode(DES.encrypt(flag))</span></span><br><span class="line">c = <span class="string">b&#x27;vrkgBqeK7+h7mPyWujP8r5FqH5yyVlqv0CXudqoNHVAVdNO8ML4lM4zgez7weQXo&#x27;</span></span><br><span class="line">m = DES.decrypt(base64.b64decode(c))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-31</title>
    <url>/uncategorized/2021/07/31/vacation_week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-31</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>打了一天i春秋云上巅峰赛，没爆零，还行</p>
<h2 id="afctf2018tiny-lfsr">[AFCTF2018]Tiny LFSR</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(sys.argv)&lt;<span class="number">4</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Usage: python Encrypt.py keyfile plaintext ciphername&quot;</span>)</span><br><span class="line">	exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">R, mask</span>):</span></span><br><span class="line">	output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">	i=(R&amp;mask)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line">	lastbit=<span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">		lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">		i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">	output^=lastbit</span><br><span class="line">	<span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line">R = <span class="number">0</span></span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	key = f.read()</span><br><span class="line">	R = <span class="built_in">int</span>(key,<span class="number">16</span>)</span><br><span class="line">	f.close</span><br><span class="line">	</span><br><span class="line">mask = <span class="number">0b1101100000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> [key[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), <span class="number">2</span>)]])</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(sys.argv[<span class="number">2</span>],<span class="string">&quot;r&quot;</span>)</span><br><span class="line">ff = <span class="built_in">open</span>(sys.argv[<span class="number">3</span>],<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">s = f.read()</span><br><span class="line">f.close()</span><br><span class="line">lent = <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">	ff.write((<span class="built_in">ord</span>(s[i])^<span class="built_in">ord</span>(a[i])).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), lent):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R,out)=lfsr(R,mask)</span><br><span class="line">        tmp=(tmp &lt;&lt; <span class="number">1</span>)^out</span><br><span class="line">    ff.write((tmp^<span class="built_in">ord</span>(s[i])).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">ff.close()</span><br></pre></td></tr></table></figure>
<p>搜了一下LFSR是什么： <img data-src="https://img-blog.csdnimg.cn/da0bb63917944c00bb11f5854f88ae1c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 好像是一种伪随机数生成器（你说这个谁懂啊！） 但是在CTFwiki伪随机数生成器那块没有找到，就放弃了 看到这个<code>lfsr()</code>函数就头皮发麻，还有一堆<code>argv[]</code>不知道是干什么，看了几眼，找<a href="https://www.ruanx.net/tiny-lfsr-writeup/">wp</a>去了（看了wp之后发现也没那么难嘛[doge]） 附件里面还有一个.bash_history.txt文件： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python Encrypt.py key.txt Plain.txt cipher.txt</span><br><span class="line">python Encrypt.py key.txt flag.txt flag_encode.txt</span><br><span class="line">rm flag.txt</span><br><span class="line">rm key.txt</span><br></pre></td></tr></table></figure> 大概就是用加密程序和key.txt先加密了Encrypt.py文件，再加密了flag.txt，然后删除了flag.txt和key.txt 还给了Plain.txt，cipher.txt和flag_encode.txt，我们就可能要先用Plain.txt和cipher.txt解出key.txt，然后用flag_encode.txt和key.txt解出flag.txt</p>
<p>观察加密代码后半部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">	ff.write((<span class="built_in">ord</span>(s[i])^<span class="built_in">ord</span>(a[i])).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), lent):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R,out)=lfsr(R,mask)</span><br><span class="line">        tmp=(tmp &lt;&lt; <span class="number">1</span>)^out</span><br><span class="line">    ff.write((tmp^<span class="built_in">ord</span>(s[i])).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>容易发现明文以<code>len(a)</code>为边界被分成两部分加密 前一部分是和<code>a[i]</code>作异或 这个<code>a</code>则是由<code>a = ''.join([chr(int(b, 16)) for b in [key[i:i+2] for i in range(0, len(key), 2)]])</code>得来的，也就是说<code>a</code>是由key得来的，因此前半部分是解出key的关键 但是我们不知道key的长度，先做个测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">R, mask</span>):</span></span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    i = (R &amp; mask) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">        i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output, lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R = <span class="number">0</span></span><br><span class="line">mask = <span class="number">0b1101100000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Plain.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cipher.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.read()</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">hex</span>(bytes_to_long(s) ^ bytes_to_long(cipher))[<span class="number">2</span>:]</span><br><span class="line">s = <span class="string">&#x27;sdgfjkahblskdjxbvfskljdfbguisldfbvghkljsdfbghsjkldhbgjklsdbgvlkjsdgbkljb sdkljfhwelo;sdfghioeurthgbnjl k&#x27;</span></span><br><span class="line">lent = <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)):</span><br><span class="line">    key = t[:i]</span><br><span class="line">    R = <span class="built_in">int</span>(key, <span class="number">16</span>)</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> [key[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), <span class="number">2</span>)]])</span><br><span class="line">    c = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">        c += (<span class="built_in">ord</span>(s[j]) ^ <span class="built_in">ord</span>(a[j])).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), lent):</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            (R, out) = lfsr(R, mask)</span><br><span class="line">            tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">        c += (tmp ^ <span class="built_in">ord</span>(s[j])).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="built_in">print</span>(cipher)</span><br><span class="line">    <span class="built_in">print</span>(c == cipher)</span><br><span class="line">    <span class="keyword">if</span> c == cipher:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>发现都是False 是不是key前面缺个“0”？ 修改代码：<code>t = '0' + hex(bytes_to_long(s) ^ bytes_to_long(cipher))[2:]</code> 得到结果： <img data-src="https://img-blog.csdnimg.cn/09874dc0eede4458b0bb5d3d70164bd4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 所以 <strong>key 为 0123456789abcdef</strong> 得到key之后前半段只要key和密文做异或即可得到明文，那后半段怎么办？ 再观察代码可以发现，每次<code>for i</code>循环，都经过内部的<code>for j</code>循环生成一个<code>tmp</code>与明文作异或运算生成密文，而这个<code>tmp</code>与函数<code>lfsr()</code>有关，而<code>lfsr()</code>的参数一个参数<code>R</code>只与key有关，另一个参数<code>mask</code>是常量 那我们就可以不用管<code>lfsr()</code>函数，只要生成<code>tmp</code>与密文作异或运算就行了，也就是wp中所说的<strong>黑箱方法</strong> 解密代码如下（照搬wp）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;123456789abcdef&#x27;</span></span><br><span class="line">R = <span class="built_in">int</span>(key, <span class="number">16</span>)</span><br><span class="line">mask = <span class="number">0b1101100000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">R, mask</span>):</span></span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    i = (R &amp; mask) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">        i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output, lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">open</span>(<span class="string">&#x27;flag_encode.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> [key[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), <span class="number">2</span>)]])</span><br><span class="line">ans = []</span><br><span class="line">lent = <span class="built_in">len</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">    ans.append(<span class="built_in">chr</span>(cipher[i] ^ <span class="built_in">ord</span>(a[i])))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), lent):</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R, out) = lfsr(R, mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    ans.append(<span class="built_in">chr</span>(tmp ^ cipher[i]))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/8c3a357625ac4145821e6d7b992486dc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 关于线性反馈移位寄存器 - LFSR，后来在CTFwiki中找到了<a href="https://ctf-wiki.org/crypto/streamcipher/fsr/lfsr/">相关结束</a> 题面的代码大都是先定义一个函数<code>lfsr()</code> 这里附上wp中的注释帮助理解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">R, mask</span>):</span></span><br><span class="line">    <span class="comment"># 左移1位：保留末尾 63 位，在最后添加一个0</span></span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># i：保留 R 的前 0、1、3、4位</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="comment"># lastbit：统计 i 里面有多少个1, 奇数个则为1, 偶数个则为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># output: R 左移1位，再添加 lastbit</span></span><br><span class="line">    output^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br></pre></td></tr></table></figure> 不同的地方就是这个<code>0xffffffffffffffff</code>里面“f”的个数，也就是初态的比特数 后面也会有一个生成<code>tmp</code>的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), lent):</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R, out) = lfsr(R, mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br></pre></td></tr></table></figure>
<p>方法和具体原理感兴趣的可以研究一下</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-29</title>
    <url>/uncategorized/2021/07/29/vacation_week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-29</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>原本以为今天能把1分题刷完的，结果又多了几个，淦</p>
<h2 id="afctf2018one-secret-two-encryption">[AFCTF2018]One Secret, Two encryption</h2>
<p>题面： 一份秘密发送给两个人不太好吧，那我各自加密一次好啦~~~ 素数生成好慢呀 偷个懒也……不会有问题的吧？</p>
<p>给了两个公钥文件 先转成能看懂的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public1.pub&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    n1 = key.n</span><br><span class="line">    e1 = key.e</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n1:&#x27;</span>, key.n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e1:&#x27;</span>, key.e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public2.pub&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    n2 = key.n</span><br><span class="line">    e2 = key.e</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n2:&#x27;</span>, key.n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e2:&#x27;</span>, key.e)</span><br></pre></td></tr></table></figure>
<p>得到n和e： <img data-src="https://img-blog.csdnimg.cn/d2845b728e704ce2b335801280e7ce66.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 先尝试爆破，发现都可以暴力分解（啊这） 得到p,q：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = <span class="number">27809722472252756488236572384949349891208643090117349509994417047989746484576130392206781875743390815588696964830219136848285391966773129269973231061599768809907518881304479207799187410626121509031210549317480187679455501340422680238395009932081263455435640341892702399022829951248686529928945588545968218943</span></span><br><span class="line">q1 = <span class="number">174410123761631337520799179808598127914184971978811796722414215239874114048347830609255805203105210941441708658356189056418366104015120153227123562166980882513945308613658062284844636341082646995916907680076101741743945938845994542592182491688095893467336553001430454260431413695816790105384153941685561590503</span></span><br><span class="line">p2 = <span class="number">13574537518864130340355432541118272197612469786472599699388744722964224446468845332277885224151359348751827390453295742493408690917441802418376492710577443748707324892538263470296850322457820732500754398379697996486797672220145645775197396918813888878389297506519458452871204328250224991572191181011886880259</span></span><br><span class="line">q2 = <span class="number">174410123761631337520799179808598127914184971978811796722414215239874114048347830609255805203105210941441708658356189056418366104015120153227123562166980882513945308613658062284844636341082646995916907680076101741743945938845994542592182491688095893467336553001430454260431413695816790105384153941685561590503</span></span><br></pre></td></tr></table></figure>
<p>发现q1=q2 原来题面说的“偷个懒”是这个意思 然后就是常规的RSA解密，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public1.pub&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    n1 = key.n</span><br><span class="line">    e1 = key.e</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n1:&#x27;</span>, key.n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e1:&#x27;</span>, key.e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public2.pub&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    n2 = key.n</span><br><span class="line">    e2 = key.e</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n2:&#x27;</span>, key.n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e2:&#x27;</span>, key.e)</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">27809722472252756488236572384949349891208643090117349509994417047989746484576130392206781875743390815588696964830219136848285391966773129269973231061599768809907518881304479207799187410626121509031210549317480187679455501340422680238395009932081263455435640341892702399022829951248686529928945588545968218943</span></span><br><span class="line">q1 = <span class="number">174410123761631337520799179808598127914184971978811796722414215239874114048347830609255805203105210941441708658356189056418366104015120153227123562166980882513945308613658062284844636341082646995916907680076101741743945938845994542592182491688095893467336553001430454260431413695816790105384153941685561590503</span></span><br><span class="line">p2 = <span class="number">13574537518864130340355432541118272197612469786472599699388744722964224446468845332277885224151359348751827390453295742493408690917441802418376492710577443748707324892538263470296850322457820732500754398379697996486797672220145645775197396918813888878389297506519458452871204328250224991572191181011886880259</span></span><br><span class="line">q2 = <span class="number">174410123761631337520799179808598127914184971978811796722414215239874114048347830609255805203105210941441708658356189056418366104015120153227123562166980882513945308613658062284844636341082646995916907680076101741743945938845994542592182491688095893467336553001430454260431413695816790105384153941685561590503</span></span><br><span class="line"><span class="built_in">print</span>(q1 == q2)</span><br><span class="line"></span><br><span class="line">d1 = inverse(e1, (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>))</span><br><span class="line">Rsa = rsa.PrivateKey(n1, e1, d1, p1, q1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag_encry1&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c1 = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(c1, Rsa))</span><br><span class="line"></span><br><span class="line">d2 = inverse(e2, (p2 - <span class="number">1</span>) * (q2 - <span class="number">1</span>))</span><br><span class="line">Rsa = rsa.PrivateKey(n2, e2, d2, p2, q2)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag_encry2&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c2 = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(c2, Rsa))</span><br></pre></td></tr></table></figure>
<h2 id="afctf2018myowncbc">[AFCTF2018]MyOwnCBC</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyOwnCBC</span>(<span class="params">key, plain</span>):</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(key)!=<span class="number">32</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;error!&quot;</span></span><br><span class="line">	cipher_txt = <span class="string">b&quot;&quot;</span></span><br><span class="line">	cipher_arr = []</span><br><span class="line">	cipher = AES.new(key, AES.MODE_ECB, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	plain = [plain[i:i+<span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plain), <span class="number">32</span>)]</span><br><span class="line">	<span class="built_in">print</span> plain</span><br><span class="line">	cipher_arr.append(cipher.encrypt(plain[<span class="number">0</span>]))</span><br><span class="line">	cipher_txt += cipher_arr[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plain)):</span><br><span class="line">		cipher = AES.new(cipher_arr[i-<span class="number">1</span>], AES.MODE_ECB, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		cipher_arr.append(cipher.encrypt(plain[i]))</span><br><span class="line">		cipher_txt += cipher_arr[i]</span><br><span class="line">	<span class="keyword">return</span> cipher_txt</span><br><span class="line">	</span><br><span class="line">key = random.getrandbits(<span class="number">256</span>)</span><br><span class="line">key = long_to_bytes(key)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	s = f.read()</span><br><span class="line">	f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_cipher&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(MyOwnCBC(key, s))</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>
<p>题面： CBC什么东西呀？不就是把上一轮加密的影响扩散到下一轮嘛 它写的CBC一点都不正宗 我这样写肯定也行的！</p>
<p>大概吧？</p>
<p>观察代码，发现是先随机生成了一个key然后把plain按每段32位分割，第一段用生成的key进行AES加密，后面每段plain以前面一段加密后的plain（也就是cipher）作为key进行加密，最后拼接在一起，题面里“把上一轮加密的影响扩散到下一轮”就是这个意思 由于第一段key是随机生成的，也没有线索来还原，就以第一段cipher作为key来还原后面的内容，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_cipher&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.read()</span><br><span class="line"></span><br><span class="line">key = cipher[:<span class="number">32</span>]</span><br><span class="line">plain_txt = <span class="string">b&quot;&quot;</span></span><br><span class="line">cipher = [cipher[i:i + <span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher), <span class="number">32</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cipher)):</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    plain_txt += aes.decrypt(cipher[i])</span><br><span class="line">    key = cipher[i]</span><br><span class="line"><span class="built_in">print</span>(plain_txt)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/4d5ea523164e4244bd12793063cb83c0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-1</title>
    <url>/uncategorized/2021/08/01/vacation_week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-1</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="i春秋云上巅峰赛mediclimage">[2021i春秋云上巅峰赛]MediclImage</h2>
<p>题面： <img data-src="https://img-blog.csdnimg.cn/c2d9b802cecf42bcbf2337c75596ffd7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">getcontext().prec = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># It is based on logistic map in chaotic systems</span></span><br><span class="line">    <span class="comment"># The parameter r takes the largest legal value</span></span><br><span class="line">    <span class="keyword">assert</span>(x&gt;=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span>(x&lt;=<span class="number">1</span>)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># same as f1</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># same as f1</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptImage</span>(<span class="params">path</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(path)</span><br><span class="line">    size = im.size</span><br><span class="line">    pic  = np.array(im) </span><br><span class="line">    im.close()</span><br><span class="line">    r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">    r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">    r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line">    w,h = size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        r1 = f1(r1)</span><br><span class="line">        r2 = f2(r2)</span><br><span class="line">        r3 = f3(r3)</span><br><span class="line">    const = <span class="number">10</span>**<span class="number">14</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r1))%w</span><br><span class="line">            y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r2))%h</span><br><span class="line">            r1 = f1(r1)</span><br><span class="line">            r2 = f2(r2)</span><br><span class="line">            tmp = pic[y,x]</span><br><span class="line">            pic[y,x] = pic[y1,x1]</span><br><span class="line">            pic[y1,x1] = tmp</span><br><span class="line">    p0 = random.randint(<span class="number">100</span>,<span class="number">104</span>)</span><br><span class="line">    c0 = random.randint(<span class="number">200</span>,<span class="number">204</span>)</span><br><span class="line">    config = (p0,c0)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            k = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r3))%<span class="number">256</span></span><br><span class="line">            k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            k = <span class="built_in">int</span>(k[p0%<span class="number">8</span>:]+k[:p0%<span class="number">8</span>],<span class="number">2</span>)</span><br><span class="line">            r3 = f3(r3)</span><br><span class="line"></span><br><span class="line">            p0 = pic[y,x]</span><br><span class="line">            c0 = k^((k+p0)%<span class="number">256</span>)^c0</span><br><span class="line">            pic[y,x] = c0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pic,size,config</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputImage</span>(<span class="params">path,pic,size</span>):</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;P&#x27;</span>, size,<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    pixels = im.load()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">            pixels[i,j] = (<span class="built_in">int</span>(pic[j][i]))</span><br><span class="line"></span><br><span class="line">    im.save(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptImage</span>(<span class="params">pic,size,config</span>):</span></span><br><span class="line">    .....</span><br><span class="line">    </span><br><span class="line">enc_img = <span class="string">&#x27;flag.bmp&#x27;</span></span><br><span class="line">out_im = <span class="string">&#x27;flag_enc.bmp&#x27;</span></span><br><span class="line"></span><br><span class="line">pic,size,_ = encryptImage(enc_img)</span><br><span class="line">outputImage(out_im,pic,size)</span><br></pre></td></tr></table></figure>
<p>看起来很复杂，而且函数<code>f1(x)</code>，<code>f2(x)</code>和<code>f3(x)</code>是未知的（虽然三个函数是一样的，不妨都记为f(x)） 根据注释内容搜了一下<a href="https://en.wikipedia.org/wiki/Logistic_map">Logistic map（单峰映象）</a>： <img data-src="https://img-blog.csdnimg.cn/bf0f06a9b7484d96b2f62e42b7e8c3fc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 又搜了一下<a href="http://www.cxyzjd.com/article/zsheng_/105904595">针对医学影像的加密系统</a>，里面也提到了一个Logistic映射 基本上可以确定f(x)=rx(1-x)，关键是确定这个r wiki里面也提到了r不同情况下x的变化趋势： <img data-src="https://img-blog.csdnimg.cn/27b80a2438954aecbc914465c5d56c99.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 注释中说是在混沌系统中，可以排除r小于3的情况 比较常见也是最初研究的是r=4的情况，那姑且认为r=4 再看加密函数<code>encryptImage(path)</code>，分成两段看 先看第一段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = Image.<span class="built_in">open</span>(path)</span><br><span class="line">size = im.size</span><br><span class="line">pic  = np.array(im) </span><br><span class="line">im.close()</span><br><span class="line">r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line">w,h = size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    r1 = f1(r1)</span><br><span class="line">    r2 = f2(r2)</span><br><span class="line">    r3 = f3(r3)</span><br><span class="line">const = <span class="number">10</span>**<span class="number">14</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r1))%w</span><br><span class="line">        y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r2))%h</span><br><span class="line">        r1 = f1(r1)</span><br><span class="line">        r2 = f2(r2)</span><br><span class="line">        tmp = pic[y,x]</span><br><span class="line">        pic[y,x] = pic[y1,x1]</span><br><span class="line">        pic[y1,x1] = tmp</span><br></pre></td></tr></table></figure>
<p>先导入图片，这没什么好说的 然后r1，r2，r3经过200次f(x)后和常量const生成新的坐标，对原来的图片像素进行移位 要解密的话，只要存储原来坐标的列表或者矩阵，然后换回来就行 再看第二段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p0 = random.randint(<span class="number">100</span>,<span class="number">104</span>)</span><br><span class="line">c0 = random.randint(<span class="number">200</span>,<span class="number">204</span>)</span><br><span class="line">config = (p0,c0)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        k = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r3))%<span class="number">256</span></span><br><span class="line">        k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        k = <span class="built_in">int</span>(k[p0%<span class="number">8</span>:]+k[:p0%<span class="number">8</span>],<span class="number">2</span>)</span><br><span class="line">        r3 = f3(r3)</span><br><span class="line"></span><br><span class="line">        p0 = pic[y,x]</span><br><span class="line">        c0 = k^((k+p0)%<span class="number">256</span>)^c0</span><br><span class="line">        pic[y,x] = c0</span><br></pre></td></tr></table></figure>
<p>先随机生成了一个<code>config = (p0,c0)</code>，不过幸运的是p0和c0的范围都在<code>random.randint(100,104)</code>，遍历config的话也只要25种情况 后面就是对每个像素的加密，也可以分成两段 前一段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(<span class="built_in">round</span>(const*r3))%<span class="number">256</span></span><br><span class="line">k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">k = <span class="built_in">int</span>(k[p0%<span class="number">8</span>:]+k[:p0%<span class="number">8</span>],<span class="number">2</span>)</span><br><span class="line">r3 = f3(r3)</span><br><span class="line">p0 = pic[y,x]</span><br></pre></td></tr></table></figure>
<p>就是搞了个k，解密的时候也只要把每一次的k存储起来就行 后一段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p0 = pic[y,x]</span><br><span class="line">c0 = k^((k+p0)%<span class="number">256</span>)^c0</span><br><span class="line">pic[y,x] = c0</span><br></pre></td></tr></table></figure>
<p>这里把之前生成的p0和c0给换了，也就是<code>pic[y,x] = c0 = k ^ ((k+p0)%256) ^ c0</code>，而这里的<code>p0</code>是未加密时该点的像素值，这里的<code>c0</code>是加密过的前面一点的像素值 解密的时候只要将加密后的像素值与前一点的像素值还有之前储存的k的值作异或就可以得到<code>(k+p0)%256</code>，记为<code>k_p</code> 又因为k和p0都是小于等于256的，为了得到p0，也就是原来的像素值，只要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k_p -= k</span><br><span class="line"><span class="keyword">if</span> k_p &lt; <span class="number">0</span>:</span><br><span class="line">	k_p += <span class="number">256</span></span><br></pre></td></tr></table></figure>
<p>得到的k_p就是原来的像素值 分析完毕，完整的加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line">getcontext().prec = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># It is based on logistic map in chaotic systems</span></span><br><span class="line">    <span class="comment"># The parameter r takes the largest legal value</span></span><br><span class="line">    <span class="keyword">assert</span> (x &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> (x &lt;= <span class="number">1</span>)</span><br><span class="line">    r = <span class="number">4</span></span><br><span class="line">    x = r * x * (<span class="number">1</span> - x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag_enc.bmp&#x27;</span>)</span><br><span class="line">pixels = im.load()</span><br><span class="line">size = im.size</span><br><span class="line">w, h = size</span><br><span class="line"><span class="built_in">print</span>(size)</span><br><span class="line"><span class="comment"># print(np.array(im))</span></span><br><span class="line">pic = np.zeros((h, w))</span><br><span class="line">const = <span class="number">10</span> ** <span class="number">14</span></span><br><span class="line">r1 = Decimal(<span class="string">&#x27;0.478706063089473894123&#x27;</span>)</span><br><span class="line">r2 = Decimal(<span class="string">&#x27;0.613494245341234672318&#x27;</span>)</span><br><span class="line">r3 = Decimal(<span class="string">&#x27;0.946365754637812381837&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">        pic[j][i] = pixels[i, j]</span><br><span class="line"><span class="built_in">print</span>(pic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    r1 = f(r1)</span><br><span class="line">    r2 = f(r2)</span><br><span class="line">    r3 = f(r3)</span><br><span class="line">p0 = <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">105</span>)</span><br><span class="line">c0 = <span class="built_in">range</span>(<span class="number">200</span>, <span class="number">205</span>)</span><br><span class="line">config = []</span><br><span class="line"><span class="comment"># 列出(p0, c0)的所有情况</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p0:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> c0:</span><br><span class="line">        config.append((p, c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录原先的坐标x1, y1</span></span><br><span class="line">list_x1 = np.zeros((h, w))</span><br><span class="line">list_y1 = np.zeros((h, w))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        x1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r1)) % w</span><br><span class="line">        y1 = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r2)) % h</span><br><span class="line">        list_x1[y][x] = x1</span><br><span class="line">        list_y1[y][x] = y1</span><br><span class="line">        r1 = f(r1)</span><br><span class="line">        r2 = f(r2)</span><br><span class="line"></span><br><span class="line">list_k = []</span><br><span class="line"><span class="keyword">for</span> conf <span class="keyword">in</span> config:</span><br><span class="line">    arrk = np.zeros((h, w))</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    p0 = conf[<span class="number">0</span>]</span><br><span class="line">    c0 = conf[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            k = <span class="built_in">int</span>(<span class="built_in">round</span>(const * r3)) % <span class="number">256</span></span><br><span class="line">            k = <span class="built_in">bin</span>(k)[<span class="number">2</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            k = <span class="built_in">int</span>(k[p0 % <span class="number">8</span>:] + k[:p0 % <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            r3 = f(r3)</span><br><span class="line">            p0 = <span class="built_in">int</span>(pic[y, x])</span><br><span class="line">            arrk[y][x] = k</span><br><span class="line">    list_k.append(arrk)</span><br><span class="line"><span class="built_in">print</span>(list_k)</span><br><span class="line"></span><br><span class="line">list_p = []</span><br><span class="line"><span class="keyword">for</span> conf <span class="keyword">in</span> config:</span><br><span class="line">    x1 = <span class="number">0</span></span><br><span class="line">    y1 = <span class="number">0</span></span><br><span class="line">    picture = pic.copy()</span><br><span class="line">    arrk = list_k[config.index(conf)]</span><br><span class="line">    p0 = conf[<span class="number">0</span>]</span><br><span class="line">    c0 = conf[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            k = <span class="built_in">int</span>(arrk[y][x])</span><br><span class="line">            p0 = pic[y][x]</span><br><span class="line">            <span class="keyword">if</span> (y-<span class="number">1</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">                c0 = <span class="built_in">int</span>(pic[y-<span class="number">1</span>][x])</span><br><span class="line">            <span class="keyword">elif</span> (y - <span class="number">1</span>) &lt; <span class="number">0</span> <span class="keyword">and</span> (x-<span class="number">1</span>) &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c0 = <span class="built_in">int</span>(pic[h-<span class="number">1</span>][x-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            k_p = k ^ (<span class="built_in">int</span>(pic[y][x])) ^ c0</span><br><span class="line">            k_p -= k</span><br><span class="line">            <span class="keyword">if</span> k_p &lt; <span class="number">0</span>:</span><br><span class="line">                k_p += <span class="number">256</span></span><br><span class="line">            picture[y][x] = k_p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            x1 = <span class="built_in">int</span>(list_x1[y][x])</span><br><span class="line">            y1 = <span class="built_in">int</span>(list_y1[y][x])</span><br><span class="line">            tmp = picture[y1][x1]</span><br><span class="line">            picture[y1][x1] = picture[y][x]</span><br><span class="line">            picture[y][x] = tmp</span><br><span class="line">    list_p.append(picture)</span><br><span class="line">    <span class="built_in">print</span>(picture)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_p)):</span><br><span class="line">    im = Image.new(<span class="string">&#x27;P&#x27;</span>, size, <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    pixels = im.load()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(im.size[<span class="number">1</span>]):</span><br><span class="line">            pixels[i, j] = (<span class="built_in">int</span>(list_p[k][j][i]))</span><br><span class="line">    im.save(<span class="string">&#x27;p&#x27;</span> + <span class="built_in">str</span>(k) + <span class="string">&#x27;.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>最后得到25张图片，出了第一张图片，都能看到flag 挑了一张比较清晰的： <img data-src="https://img-blog.csdnimg.cn/6bf6b68ee2b84e5cae6127d74a127386.bmp" alt="在这里插入图片描述" /> 看不清的话可以和别的比对着看</p>
<h2 id="结语">结语</h2>
<p>还有一道crtrsa比赛的时候没有做出来，后来在badm0nkey前辈的指导下解出来了，留着明天讲 感谢Phoenix大佬帮我指出错误 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-10</title>
    <url>/uncategorized/2021/04/10/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-10</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-10">BUUCTF 每日打卡 2021-4-10</h2>
<h2 id="引言">引言</h2>
<p>已经第二天凌晨了，直接进入主题吧</p>
<h2 id="rsa2">rsa2</h2>
<p>附件如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="built_in">hex</span>(d)).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure> 是一段 py2 代码 看到 e 这么长，就知道要用维纳攻击法 脚本如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fraction</span>(<span class="params">sub_res</span>):</span></span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_fraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pq</span>(<span class="params">a, b, c</span>):</span>  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>, d)</span><br><span class="line">k = <span class="built_in">hex</span>(d)[<span class="number">2</span>:]</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(k.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure> 结果为： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d= <span class="number">8920758995414587152829426558580025657357328745839747693739591820283538307445</span></span><br><span class="line">flag&#123;a8eb82576211d716e354586aad3b099d&#125;</span><br></pre></td></tr></table></figure> 但提交上去 flag 是错误的 用在线 MD5 加密也是错误的 只好用 <a href="https://c.runoob.com/compile/6">python2 加密</a>： <img data-src="https://img-blog.csdnimg.cn/20210411001206339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结果正确</p>
<h2 id="babyrsa">BabyRSA</h2>
<p>附件内容如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p+q : <span class="number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span></span><br><span class="line">(p+<span class="number">1</span>)(q+<span class="number">1</span>) : <span class="number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span></span><br><span class="line">e : <span class="number">0xe6b1bee47bd63f615c7d0a43c529d219</span></span><br><span class="line">d : <span class="number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span></span><br><span class="line">enc_flag : <span class="number">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span></span><br></pre></td></tr></table></figure> 给了 p+q 和 (p+1)(q+1) 直接用 sagemath 一元二次方程解出 p,q: <img data-src="https://img-blog.csdnimg.cn/20210411001546368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> x 的两个解即为 p,q 然后就是最基础的 RSA 解密了 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">k1 = <span class="string">&#x27;0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea&#x27;</span><span class="comment"># p+q</span></span><br><span class="line">k2 = <span class="string">&#x27;0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740&#x27;</span><span class="comment"># (p+1)(q+1)</span></span><br><span class="line">e = <span class="string">&#x27;0xe6b1bee47bd63f615c7d0a43c529d219&#x27;</span></span><br><span class="line">d = <span class="string">&#x27;0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5&#x27;</span></span><br><span class="line">enc_flag = <span class="string">&#x27;0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a&#x27;</span></span><br><span class="line"></span><br><span class="line">k1 = <span class="built_in">int</span>(k1, <span class="number">16</span>)</span><br><span class="line">k2 = <span class="built_in">int</span>(k2, <span class="number">16</span>)</span><br><span class="line">e = <span class="built_in">int</span>(e, <span class="number">16</span>)</span><br><span class="line">d = <span class="built_in">int</span>(d, <span class="number">16</span>)</span><br><span class="line">enc_flag = <span class="built_in">int</span>(enc_flag, <span class="number">16</span>)</span><br><span class="line">n = k2-k1-<span class="number">1</span> <span class="comment"># p*q</span></span><br><span class="line">p = <span class="number">7021910101974335245794950722131367118195509913680915814438898999848788125908122655583911434165700354149914056221915541094395668546921268189522005629523759</span></span><br><span class="line">q = <span class="number">8228801334907462855397256098699556584084854642543205682719705217859576250443629616812386484797164506834582095674143447181804355696220642775619711451990971</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = <span class="built_in">pow</span>(enc_flag, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果突然发现 d 已经知道了（wtm。。。） 可以通过 p+q 和 (p+1)(q+1) 直接解出 φ 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">k1 = <span class="string">&#x27;0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea&#x27;</span><span class="comment"># p+q</span></span><br><span class="line">k2 = <span class="string">&#x27;0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740&#x27;</span><span class="comment"># (p+1)(q+1)</span></span><br><span class="line">e = <span class="string">&#x27;0xe6b1bee47bd63f615c7d0a43c529d219&#x27;</span></span><br><span class="line">d = <span class="string">&#x27;0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5&#x27;</span></span><br><span class="line">enc_flag = <span class="string">&#x27;0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a&#x27;</span></span><br><span class="line"></span><br><span class="line">k1 = <span class="built_in">int</span>(k1, <span class="number">16</span>)</span><br><span class="line">k2 = <span class="built_in">int</span>(k2, <span class="number">16</span>)</span><br><span class="line">e = <span class="built_in">int</span>(e, <span class="number">16</span>)</span><br><span class="line">d = <span class="built_in">int</span>(d, <span class="number">16</span>)</span><br><span class="line">enc_flag = <span class="built_in">int</span>(enc_flag, <span class="number">16</span>)</span><br><span class="line">n = k2-k1-<span class="number">1</span> <span class="comment"># p*q</span></span><br><span class="line">phi = k2 - <span class="number">2</span>*k1</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = <span class="built_in">pow</span>(enc_flag, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果均为：flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</p>
<h2 id="结语">结语</h2>
<p>睡了睡了 明早九点（应该说是今早。。。）还要培训，作业还有一堆要写 顺便把之前虎符 CTF 的坑填了（终于找到了 dl 的 wp） 燃烧生命吧！</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-11</title>
    <url>/uncategorized/2021/04/11/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-11</url>
    <content><![CDATA[<h2 id="引言">引言</h2>
<p>终于找到虎符杯 Crypto 部分的 <a href="https://zhuanlan.zhihu.com/p/362664495">wp</a> 今天来填坑</p>
<h2 id="虎符杯cubic">[2021 虎符杯]cubic</h2>
<p>先上题目给的附件： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction <span class="keyword">as</span> Frac</span><br><span class="line"></span><br><span class="line">N = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_num</span>(<span class="params">prompt</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(prompt))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> num <span class="keyword">if</span> num &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Please give me <span class="subst">&#123;N&#125;</span> pairs of positive integers (x,y,z) &quot;</span></span><br><span class="line">      <span class="string">f&quot;satisfying the equation `x/(y+z) + y/(z+x) + z/(x+y) = <span class="subst">&#123;N&#125;</span>`\n&quot;</span>)</span><br><span class="line">anss = []</span><br><span class="line">mark = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    x = read_num(<span class="string">&quot;[&gt;] x: &quot;</span>)</span><br><span class="line">    y = read_num(<span class="string">&quot;[&gt;] y: &quot;</span>)</span><br><span class="line">    z = read_num(<span class="string">&quot;[&gt;] z: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> x * y * z == <span class="number">0</span>: <span class="comment"># positive integer</span></span><br><span class="line">        mark = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is not what i want!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># reduce(gcd, [x, y, z]) = gcd(gcd(x,y), z)</span></span><br><span class="line">    <span class="keyword">if</span> reduce(gcd, [x, y, z]) != <span class="number">1</span>: <span class="comment"># (kx, ky, kz)</span></span><br><span class="line">        mark = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is not what i want!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> Frac(x, y+z) + Frac(y, z+x) + Frac(z, x+y) != N:</span><br><span class="line">        mark = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is not what i want!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    ans = <span class="built_in">tuple</span>(<span class="built_in">sorted</span>([x, y, z])) <span class="comment"># (y, x, z)</span></span><br><span class="line">    <span class="keyword">if</span> ans <span class="keyword">in</span> anss:</span><br><span class="line">        mark = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is not what i want!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You are right!\n&quot;</span>)</span><br><span class="line">        anss.append(ans)</span><br><span class="line"><span class="keyword">if</span> mark == <span class="number">0</span>:</span><br><span class="line">    flag = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag is: &quot;</span> + flag + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something wrong!\n&quot;</span>)</span><br></pre></td></tr></table></figure> 不就是找 <span class="math inline">\(\frac{x}{y+z}+\frac{y}{x+z}+\frac{z}{x+y}=6\)</span> 的 6 组正整数解吗？ 直接用 sagemath 爆破（你真是个天才）： <img data-src="https://img-blog.csdnimg.cn/20210411092546679.png" alt="在这里插入图片描述" />结果： <img data-src="https://img-blog.csdnimg.cn/2021041109261016.png" alt="在这里插入图片描述" /> 啊这 当然不可能这么简单</p>
<p>事实上，<span class="math inline">\(\frac{x}{y+z}+\frac{y}{x+z}+\frac{z}{x+y}=4\)</span> 的解十分复杂： <img data-src="https://img-blog.csdnimg.cn/20210411094210447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 如果能爆破出来才有问题 而这个问题可以转化成 <strong>椭圆曲线问题</strong>（跪谢 Pheonix dl 指点迷津） 这就涉及到我的知识盲区了 下午就开始学椭圆曲线 如 wp 中的<a href="https://ami.uni-eszterhazy.hu/uploads/papers/finalpdf/AMI_43_from29to41.pdf">论文</a>所述 对于形如 <span class="math display">\[
N=\frac{a}{b+c}+\frac{b}{a+c}+\frac{c}{a+b}, N \in\mathbb{N^{*}}
\]</span> 可以转化成三元三次方程 <span class="math display">\[
N(a+b)(b+c)(c+a)=a(a+b)(c+a)+b(b+c)(a+b)+c(c+a)(a+b)
\]</span> 可以通过线性变换，将其转化成常见的椭圆曲线（形如 <span class="math inline">\(y ^{2} = ax ^{3}+bx ^{2}+cx+d\)</span>）的形式： <span class="math display">\[
y ^{2} = x ^{3}+(4N ^{2} + 12N - 3)x ^{2}+32(N+3)x
\]</span> 其中 <span class="math display">\[
\begin{cases}
x=\dfrac{-4(a+b+2c)(N+3)}{(2a+2b-c)+(a+b)N}\\
y=\dfrac{4(a-b)(N+3)(2N+5)}{(2a+2b-c)+(a+b)N}
\end{cases}
\]</span> 别问，问就是数理基础 当然也可以映射回去： 设 s=a+b+c <span class="math display">\[
\begin{cases}
\dfrac{a}{s}=\dfrac{8(N+3)-x+y}{2(4-x)(N+3)}\\
\dfrac{b}{s}=\dfrac{8(N+3)-x-y}{2(4-x)(N+3)}\\
\dfrac{c}{s}=\dfrac{-4(N+3)-(N+2)x}{(4-x)(N+3)}
\end{cases}
\]</span> 具体怎么转化，可以参考<a href="https://mlzeng.com/an-interesting-equation.html">这篇文章</a> 这篇文章是以 <span class="math inline">\(\frac{a}{b+c}+\frac{b}{a+c}+\frac{c}{a+b}=4\)</span> 为例 通过介绍丢番图等式： <span class="math display">\[
P(x_{1},x_{2},\cdots,x_{k})=\sum _{ {0\leq i_{j}\leq n_{j} } }a_{ {i_{1}i_{2}\cdots i_{k} } }x_{1}^{ {i_{1} } }x_{2}^{ {i_{2}} }\cdots x_{k}^{ {i_{k} } }=0
\]</span> 从一阶到三阶（三阶即为所求等式的转化形式）来介绍解法 这里不再赘述 其中的线性变换部分</p>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20210411105005936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption>
</figure>
<p>当然，下文给出了程序解法：</p>
<p><img data-src="https://img-blog.csdnimg.cn/2021041110511519.png" alt="在这里插入图片描述" /> 数理基础不扎实的我只能代数字，套程序了</p>
<p>理论推导就到这里 接下来是求解 wp 中用 sagemath 封装好的椭圆曲线算法进行求解 关于椭圆曲线求解，可以参考<a href="https://zhuanlan.zhihu.com/p/36326221">ECC椭圆曲线加密算法：介绍</a> 当然，这道题其实不涉及加密部分，真正的椭圆曲线加密算法复杂的多（如<a href="https://www.bilibili.com/video/BV1TE411q7mW?from=search&amp;seid=14741657793119036139">应用于比特币</a>） 自己实现其实也不麻烦 这里不再赘述</p>
<p>最后还有个小插曲 当时题目刚出来的时候发现没有获取 flag 的方式，然后做着做着题目下线了，添了一个得到 flag 的地址 提交答案获取 flag 的部分也是 wp 中可以借鉴（抄袭）的地方</p>
<h2 id="buucheckin">[BUU]CheckIn</h2>
<p>附件给了一串字符：dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg== 看到后面两个 “==” 大概率是 base64 随便找了个<a href="https://tool.oschina.net/encrypt?type=3">网站</a>解密 <img data-src="https://img-blog.csdnimg.cn/2021041111470534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这是什么玩意？ 还有替换密码？ 拿去<a href="https://quipqiup.com/">爆破</a> <img data-src="https://img-blog.csdnimg.cn/20210411114904733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 只好找 wp ，得知要拿 base64 解码出来的结果 rot 解密 解密结果以及 rot-N 加密原理如下： <img data-src="https://img-blog.csdnimg.cn/20210411115037868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> rot-N 加密解密网站：<a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php</a></p>
<h2 id="结语">结语</h2>
<p>搞了一上午 虎符那题的文献其实比赛的时候找到了，但是没有照算法实现，而是选择先去学椭圆曲线加密算法，是我的一大失误 今天就水到这，希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-5</title>
    <url>/uncategorized/2021/04/05/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-5</url>
    <content><![CDATA[<h2 id="引言">引言</h2>
<p>出人意料的得到消息要被拉去打国赛（第十四届全国大学生信息安全竞赛-创新实践能力赛）了（一脸懵逼） 我还什么都没学呢（摸鱼） 嘛，不过被分到第二梯队大概也没抱什么希望吧（继续摸鱼） 害，说丧气话也改变不了什么，还是脚踏实地地慢慢进步吧 毕竟 Crypto手 在队里也是稀缺人才 我也是加把劲骑士！(doge)</p>
<h2 id="rsa2">RSA2</h2>
<p>dp(dq) 泄露的题没做过，不过跟 dp, dq 泄露相比容易许多 首先，根据 <span class="math display">\[
dp \equiv d\space mod \space (p-1)
\]</span> 联想到 <span class="math display">\[
\varphi = (p-1) * (q-1)
\]</span> 那肯定就有人问了，你在 dp,dq 泄露中字母就没联想到 φ 呢？ 对比 dp,dq 泄露和 dp(dq) 泄露的已知条件：前者已知 <span class="math inline">\(p, q, (n), (φ), dp, dq, c\)</span> ；而后者已知 <span class="math inline">\(e, n, dp(dq), c\)</span> 我们的目的是解出私钥 <span class="math inline">\(d\)</span> ，或者 直接解出 <span class="math inline">\(c^{d}\)</span> ，通过 <span class="math inline">\(m \equiv c^{d} \space mod \space n\)</span> 来解出密文 <span class="math inline">\(m\)</span> 而 RSA 加密算法中有很重要的一步 <span class="math display">\[
e * d \equiv 1 \space mod \space \varphi
\]</span> dp(dq) 泄露问题中已知 <span class="math inline">\(e\)</span> ，所以可以根据此式解出私钥 <span class="math inline">\(d\)</span> 而 dp,dq 泄露问题中 <span class="math inline">\(e\)</span> 未知，于是采取解出 <span class="math inline">\(c^{d}\)</span> 整体的策略</p>
<p>回到 dp,dq 泄露问题 因为 <span class="math display">\[
dp \equiv d\space mod \space (p-1)
\]</span> 所以 <span class="math inline">\(\exists\space k_{1} \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
dp = d + k_{1} * (p-1)
\]</span> 等式两边同时乘 <span class="math inline">\(e\)</span> 得 <span class="math display">\[
e * dp = e * d + k_{1} * e * (p-1) \qquad \qquad (*)
\]</span> 因为 <span class="math display">\[
e * d \equiv 1 \space mod \space \varphi
\]</span> 所以 <span class="math inline">\(\exists\space k_{2} \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
e * d = 1 + k_{2} * \varphi = 1 + k_{2} * (p-1) * (q-1)
\]</span> 将此式中的 <span class="math inline">\(e * d\)</span> 代入 <span class="math inline">\(*\)</span> 式，得 <span class="math display">\[
e * dp = 1+k * (p-1)
\]</span> 其中 <span class="math inline">\(k = (p-1) * (k_{1} * e + k_{2} * (q - 1)) \space \in\mathbb{Z}\)</span></p>
<p>由 <span class="math inline">\(dp \equiv d\space mod \space (p-1)\)</span> 可知， <span class="math display">\[
dp &lt; (p-1) &lt; p
\]</span> 故 <span class="math display">\[
e &gt; k
\]</span> 所以，只要我们使 <span class="math inline">\(k\)</span> 遍历 <span class="math inline">\(e\)</span> 的取值就能求出 <span class="math inline">\(p\)</span> ，进而求出 <span class="math inline">\(\varphi\)</span> ，再对 <span class="math inline">\(e\)</span> 求关于 <span class="math inline">\(\varphi\)</span> 的逆元，就能求出私钥 <span class="math inline">\(d\)</span> 进行解密 实现代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    p = (e*dp-<span class="number">1</span>) // k +<span class="number">1</span></span><br><span class="line">    q = n // p</span><br><span class="line">    <span class="keyword">if</span> (n - p*q) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(p, q)</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 得到 flag{wow_leaking_dp_breaks_rsa?_98924743502}</p>
<h2 id="rsa">RSA</h2>
<p>打开 pub.key 文件，看到前缀后缀就知道是 SSL 证书格式 <img data-src="https://img-blog.csdnimg.cn/20210405195822130.png" alt="在这里插入图片描述" /> 用解密网站：<a href="http://ctf.ssleye.com/pub_asys.html">http://ctf.ssleye.com/pub_asys.html</a><img data-src="https://img-blog.csdnimg.cn/20210405202125892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到 n 和 e 尝试用 <a href="http://factordb.com/">http://factordb.com/</a> 网站爆破： <img data-src="https://img-blog.csdnimg.cn/20210405202415250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 没有结果 emmm...... 再用 sagemath 爆破： <img data-src="https://img-blog.csdnimg.cn/20210405195643588.png" alt="在这里插入图片描述" /> 花了一点时间 这样，我们得出了 p, q, n, e，然后就可以开始解密。。。 嗯？？？ 密文呢？ 解压之后的文件里面还有一个 flag.enc 文件，密文应该就在里面 但是打开文件 <img data-src="https://img-blog.csdnimg.cn/20210405204049918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210405204107961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 一堆乱码是什么鬼？ 用 python 读取文件： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\BUUCTF\Crypto\RSA(1)\0eaf8d6c-3fe5-4549-9e81-94ac42535e7b\flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = f.read()</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure> 得到一串 bytes ：b'A0YJ^8x|$y[9c(9bb' bytes_to_long 之后应该就是密文了 解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\BUUCTF\Crypto\RSA(1)\0eaf8d6c-3fe5-4549-9e81-94ac42535e7b\flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = f.read()</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">c = bytes_to_long(f)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 这是我参考了大佬的建议自己写的版本 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210405204527775.png" alt="在这里插入图片描述" /> 高亮处即为 flag ，但是有一堆 padding</p>
<p>然后是另一个参考了 wp 的版本： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">key = rsa.PrivateKey(n, e, <span class="built_in">int</span>(d), p, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\BUUCTF\Crypto\RSA(1)\0eaf8d6c-3fe5-4549-9e81-94ac42535e7b\flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f, key))</span><br></pre></td></tr></table></figure> 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210405204703573.png" alt="在这里插入图片描述" /> 属实恶心人</p>
<h2 id="结语">结语</h2>
<p>作业肝完了，假期也结束了 感觉什么都没干啊啊啊啊啊啊啊啊 希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-6</title>
    <url>/uncategorized/2021/04/06/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-6</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-6">BUUCTF 每日打卡 2021-4-6</h2>
<h2 id="引言">引言</h2>
<p>假期如期结束了 作业在 deadline 之前写完了，却不知道为什么感觉很疲倦 这大概就是所谓的“假期综合征”吧</p>
<h2 id="异性相吸">异性相吸</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210406164650644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ??? 兄弟，你的思想很危险(滑稽) 解压后有两个文件 key.txt 和 密文.txt <img data-src="https://img-blog.csdnimg.cn/20210406164744313.png" alt="在这里插入图片描述" /> <img data-src="https://img-blog.csdnimg.cn/20210406164759249.png" alt="在这里插入图片描述" /> 不知所云 但是根据题目推断，大概要对两条字符串之间进行操作 “异性相吸” 大概指要对两个字符串之间进行异或操作 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;asadsasdasdasdasdasdasdasdasdasdqwesqf&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\BUUCTF\Crypto\异性相吸\b8c1caee-43d6-42ee-aecc-d72502a5ade2\密文.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    m = f.read()</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    c += <span class="built_in">chr</span>(<span class="built_in">ord</span>(m[i]) ^ <span class="built_in">ord</span>(key[i]))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure> 得到 flag{ea1bc0988992276b7f95b54a7435e89e}</p>
<h2 id="还原大师">还原大师</h2>
<p><img data-src="https://img-blog.csdnimg.cn/2021040616532680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 题目中三处未知处均为大写字母，而且已知 MD5 加密后的部分密文 根据哈希函数的基本特征：原始输入有微小改动，哈希值的变化也会很大 我们只需用三个循环爆破结果，与 MD5 码对应即可，且不用担心 MD5 码缺失的影响 而且我们只改动三个字母，也不用担心哈希碰撞 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            test = <span class="string">&#x27;TASC&#x27;</span> + <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + i) + <span class="string">&#x27;O3RJMV&#x27;</span> + <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + j) + <span class="string">&#x27;WDJKX&#x27;</span> + <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + k) + <span class="string">&#x27;ZM&#x27;</span></span><br><span class="line">            s = hashlib.md5(test.encode(<span class="string">&#x27;utf8&#x27;</span>)).hexdigest().upper()</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">&#x27;E903&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure> 结果唯一： E9032994DABAC08080091151380478A2</p>
<h2 id="rsaroll">RSAROLL</h2>
<p>题目给了花括号里面两个数字和后面一长串数字 花括号里面的应该分别是 n 和 e ，而后面一串应该就是密文 根据题目 “RSAROLL” ，推测是将 flag 拆分之后加密 先分解 n：<img data-src="https://img-blog.csdnimg.cn/20210406171629828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到 p, q 再按照 RSA 加密的一般算法进行解密即可 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">920139713</span></span><br><span class="line">p = <span class="number">18443</span></span><br><span class="line">q = <span class="number">49891</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    list_c = f.readlines()[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> list_c:</span><br><span class="line">    c = c.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    m = <span class="built_in">pow</span>(<span class="built_in">int</span>(c), d, n)</span><br><span class="line">    flag += <span class="built_in">str</span>(long_to_bytes(m)).replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure> 实际上解出来每个 m 值就是对应的 ascii 码了，这里用 long_to_bytes 实际上是杀鸡用牛刀了 不过为了保险起见（比如会有 flag 不是逐位加密的情况，而是拆分成一段一段的情况），还是建议 long_to_bytes ，也不费事</p>
<h2 id="结语">结语</h2>
<p>希望能坚持（打哈欠）</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-7</title>
    <url>/uncategorized/2021/04/07/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-7</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-7">BUUCTF 每日打卡 2021-4-7</h2>
<h2 id="引言">引言</h2>
<p>啊———— 原本是上周末的数分高代讨论班愣是拖到了今天，愣是上了三个小时，愣是把今天排成了满课（我囸） 算了，不说了 今天也要坚持</p>
<h2 id="robomunication">robomunication</h2>
<p>打开附件，一个 .mp3 文件，文件加密？(害怕) 点开文件，只能听到 bi bo bi bo 中间还有间段，猜想是摩斯电码，如果不是就是二进制字符串 再看标题：“机器人交流”？ 可以排除文件加密的可能了</p>
<p>“听力测试”我们就不慢慢做了，直接看别人的 <a href="https://blog.csdn.net/CSDN___CSDN/article/details/82532090">wp</a> [doge] 还有 github 上的<a href="https://gist.github.com/Zolmeister/5530467">代码</a> 果不其然是摩斯电码 <img data-src="https://img-blog.csdnimg.cn/20210407223942389.png" alt="https://www.jianshu.com/p/7f626c703416" /> 对照摩斯电码表 <img data-src="https://img-blog.csdnimg.cn/20210407224024399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到结果 HELLOWHATISTHEKEYITISBOOPBEEP flag 即为 BOOPBEEP</p>
<h2 id="unencode">Unencode</h2>
<p>题目就给了一串字符：89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM] 我直接 ？？？ 最后还是只能找 <a href="https://blog.csdn.net/weixin_44017838/article/details/104885539">wp</a> [捂脸] 原来是一个 UUencode（没见过😭） UUencode 编码解码网站：<a href="http://ctf.ssleye.com/uu.html">http://ctf.ssleye.com/uu.html</a> 那么，UUencode 是字母加密的？ <img data-src="https://img-blog.csdnimg.cn/20210407225116117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="https://zh.wikipedia.org/wiki/Uuencode" /> 与 base64 有些相似，但后面 +32 的操作导致加密之后容易出现除了字母和数字的字母，这大概是一个比较明显的特征 而且加密之后最大的 ascii 码值为 95 为 “_” ，所以不可能出现小写字母，这也是一个特征</p>
<h2 id="结语">结语</h2>
<p>今天水的肉眼可见 不过，BUU Crypto 的第一页完成了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-8</title>
    <url>/uncategorized/2021/04/08/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-8</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-8">BUUCTF 每日打卡 2021-4-8</h2>
<h2 id="引言">引言</h2>
<p>数分高代同一天的周四 宿舍停水，体育课上完没法洗澡 来水了澡堂又关门了 忘记今天版本更新导致活动没有毕业 明天要交的作业还没写 真是倒霉的一天</p>
<h2 id="morse">Morse</h2>
<p>这题看题目就猜到是摩斯电码 打开附件： -..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-.. 直接解码： <img data-src="https://img-blog.csdnimg.cn/20210408231045776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 但是结果包上 flag{} 交上去不行，换成小写也不行 重新看结果，没有 f 之后的字母，可能是十六进制数，再用 ascii 码？ 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;6 1 6 6 6 3 7 4 6 6 7 B 3 1 7 3 2 7 7 4 5 F 7 3 3 0 5 F 3 3 3 4 3 5 7 9 7 D &#x27;</span></span><br><span class="line">s = s.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).lower()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(s, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure> 结果为 afctf{1s't_s0_345y} 交上去还是不对，我直接 “？” 把内容用 flag 包起来才行 答案为 flag{1s't_s0_345y}</p>
<h2 id="dangerous-rsa">Dangerous RSA</h2>
<p>看到 e = 3 就知道应该用小公钥指数攻击 <img data-src="https://img-blog.csdnimg.cn/20210408234052841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_e_attack/" /> 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n = <span class="string">&#x27;0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793&#x27;</span></span><br><span class="line">e = <span class="string">&#x27;0x3&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365&#x27;</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">int</span>(c, <span class="number">16</span>)</span><br><span class="line">n = <span class="built_in">int</span>(n, <span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    a, b = iroot(c+k*n, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        m = a</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure> 输出结果为： <img data-src="https://img-blog.csdnimg.cn/2021040823415366.png" alt="在这里插入图片描述" /> 出题人还是很仁慈的，k=0 时就让我们找到了</p>
<h2 id="结语">结语</h2>
<p>才发现昨天的博客写完了没发，还在草稿箱里，真的不是今天去填昨天的坑啊</p>
<p>睡了睡了，明天要交的高代作业还没写，还要搞 C4 看来有的忙活喽 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-9</title>
    <url>/uncategorized/2021/04/09/week2/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-9</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-9">BUUCTF 每日打卡 2021-4-9</h2>
<h2 id="引言">引言</h2>
<p>疲惫的周五 塞满的周末 难受</p>
<h2 id="cipher">Cipher</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210409231522338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 除了“公平的玩吧（密钥自己找）”比较可疑外似乎没什么线索了 让人摸不着头脑 原本以为是普通的替换密码，尝试<a href="https://quipqiup.com/">爆破</a> <img data-src="https://img-blog.csdnimg.cn/20210409232101709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 没有结果</p>
<p>只能找 <a href="https://blog.csdn.net/MikeCoke/article/details/106105451">wp</a></p>
<p>“公平的玩吧”翻译成英文为 playfair 这是Playfair密码（又是没见过的密码） <a href="https://baike.baidu.com/item/playfair%E5%AF%86%E7%A0%81/8999814?fr=aladdin">普莱费尔密码百度百科</a> <a href="http://rumkin.com/tools/cipher/playfair.php">Playfair Cipher解密工具</a></p>
<h2 id="basic-rsa">basic rsa</h2>
<p>这题非常简单，就是最基础的 RSA 甚至给了你 p, q 直接上解密代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">262248800182277040650192055439906580479</span></span><br><span class="line">q = <span class="number">262854994239322828547925595487519915551</span></span><br><span class="line">e = <span class="number">65533</span></span><br><span class="line">c = <span class="number">27565231154623519221597938803435789010285480123476977081867877272451638645710</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 得到 flag{B4by_Rs4}</p>
<h2 id="达芬奇密码">达芬奇密码</h2>
<p>附件内容： 达芬奇隐藏在蒙娜丽莎中的数字列:1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711 记录在达芬奇窗台口的神秘数字串:36968853882116725547342176952286 一脸懵逼 怀疑可能和《达芬奇密码》这部小说有关（出题人经常干这事），可惜我没有读过 只好求助 wp，据说提到了斐波那契数列 一看还这是，只不过是乱序的 于是容易猜到数字串也是乱序的，并且和数字列的乱序一样 解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&#x27;</span></span><br><span class="line">list_a = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">m = <span class="string">&#x27;36968853882116725547342176952286&#x27;</span></span><br><span class="line"></span><br><span class="line">list_f = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(list_a)-<span class="number">2</span>):</span><br><span class="line">    list_f.append(list_f[i] + list_f[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">list_a[<span class="number">0</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(list_f)):</span><br><span class="line">    flag += m[list_a.index(<span class="built_in">str</span>(list_f[i]))]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure> 因为 index() 是从前往后找的，而 list_a 中有两个 '1'，所以第一位第二位会重复 而易知 flag 第一位为 '3' ，所以这里选择用把 list_a 的第 0 位直接换成 '' 这种简单粗暴的办法来防止出错</p>
<h2 id="结语">结语</h2>
<p>写完其实已经第二天了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-3-28</title>
    <url>/uncategorized/2021/03/28/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-3-28</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-3-28">BUUCTF 每日打卡 2021-3-28</h1>
<h1 id="引言">引言</h1>
<p>开学半个月了，原本定的每日一题计划至今还没有实施（咕咕咕） 新学期首次CTF社团培训，让我们按方向分组每周做题发到博客上 （然而搞crypto的好像只有我一个😂） 想起寒假的cryptohack任务还有一大部分没搞，就突然感觉很无力很挫败 然后决定转战BUUOJ 希望这个系列能一直做下去 也当是写日记了</p>
<h1 id="rabbit">Rabbit</h1>
<p>Rabbit, Tank, Best Match 不好意思，搞错了😂 题目就是一串加密字符：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI 然后搜一下Rabbit加密 <img data-src="https://img-blog.csdnimg.cn/2021032810274494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="解密网站：http://www.jsons.cn/rabbitencrypt/" />解密网站：<a href="http://www.jsons.cn/rabbitencrypt/">http://www.jsons.cn/rabbitencrypt/</a> 当然，解出了题目是不够的 一个关于Rabbit加密的文档：<a href="https://www.ietf.org/rfc/rfc4503.txt">https://www.ietf.org/rfc/rfc4503.txt</a> Rabbit流密码（Rabbit Stream Cipher）简介： Rabbit流密码是由Cryptico公司（http://www.cryptico.com）设计的， Rabbit输入128bit的密钥和64bit的<em>IV初始向量</em>，每次迭代后从513bit内部状态中生成128bit的伪随机序列。最大加密消息长度为 <span class="math inline">\(2^{64}\)</span>​ bytes，即16TB，若消息超过该长度，则需要更换密钥对剩下的消息进行处理。 那么，什么是IV初始向量呢？ 在密码学的领域里，初始向量（英语：initialization vector，缩写为IV），或译初向量，又称初始变量（starting variable，缩写为SV），是一个固定长度的输入值。一般的使用上会要求它是随机数或拟随机数（pseudorandom）。使用随机数产生的初始向量才能达到语义安全（消息验证码也可能用到初始向量），并让攻击者难以对原文一致且使用同一把密钥生成的密文进行破解。（摘自wiki）</p>
<h1 id="篱笆墙的影子">篱笆墙的影子</h1>
<p><img data-src="https://img-blog.csdnimg.cn/20210328105527218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 老谜语人了 一看题目就知道这是个<strong>栅栏密码</strong> 密文：felhaagv{ewtehtehfilnakgw} <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="string">&#x27;felhaagv&#123;ewtehtehfilnakgw&#125;&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(m), <span class="number">2</span>):</span><br><span class="line">    c += m[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(m), <span class="number">2</span>):</span><br><span class="line">    c += m[i]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></p>
<h1 id="rsa">RSA</h1>
<p>题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17 求解出d作为flag提交</p>
<p>RSA加密原理： 选择两个大素数p和q，计算出模数N = p * q 计算φ = (p−1) * (q−1) 即N的欧拉函数，然后选择一个e (1&lt;e&lt;φ)，且e和φ互质 取e的模反数为d，计算方法: e * d ≡ 1 (mod φ) 对明文m进行加密：c = pow(m, e, N)，得到的c即为密文 对密文c进行解密，m = pow(c, d, N)，得到的m即为明文 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d = &#x27;</span> + <span class="built_in">str</span>(gmpy2.invert(e, phi)))</span><br></pre></td></tr></table></figure></p>
<h1 id="结语">结语</h1>
<p>炸鱼一时爽，一直炸鱼一直爽（doge） 希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-3-29</title>
    <url>/uncategorized/2021/03/29/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-3-29</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-3-29">BUUCTF 每日打卡 2021-3-29</h1>
<h2 id="引言">引言</h2>
<p>新的一周，计划执行的第二天 又萌生出了一个新的计划：600多页的 <em>C Primer Plus</em> 只要我每天看20页就能一个月看完😂 不过下个月决定学GO语言，不知道能不能执行计划（咕咕咕）</p>
<h2 id="丢失的md5">丢失的MD5</h2>
<p>原题代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            m=hashlib.md5()</span><br><span class="line">            m.update(<span class="string">&#x27;TASC&#x27;</span>+<span class="built_in">chr</span>(i)+<span class="string">&#x27;O3RJMV&#x27;</span>+<span class="built_in">chr</span>(j)+<span class="string">&#x27;WDJKX&#x27;</span>+<span class="built_in">chr</span>(k)+<span class="string">&#x27;ZM&#x27;</span>)</span><br><span class="line">            des=m.hexdigest()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;e9032&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;da&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;911513&#x27;</span> <span class="keyword">in</span> des:</span><br><span class="line">                <span class="built_in">print</span> des</span><br></pre></td></tr></table></figure> 是用python2写的，仅仅修改了print，还是会报错 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/BUUCTF/Crypto/丢失的MD5/丢失的MD5/md5 (2).py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    m.update(<span class="string">&#x27;TASC&#x27;</span>+<span class="built_in">chr</span>(i)+<span class="string">&#x27;O3RJMV&#x27;</span>+<span class="built_in">chr</span>(j)+<span class="string">&#x27;WDJKX&#x27;</span>+<span class="built_in">chr</span>(k)+<span class="string">&#x27;ZM&#x27;</span>)</span><br><span class="line">TypeError: Unicode-objects must be encoded before hashing</span><br></pre></td></tr></table></figure> 要对 m.update() 部分进行 utf-8 编码 修改完后代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            m=hashlib.md5()</span><br><span class="line">            m.update((<span class="string">&#x27;TASC&#x27;</span>+<span class="built_in">chr</span>(i)+<span class="string">&#x27;O3RJMV&#x27;</span>+<span class="built_in">chr</span>(j)+<span class="string">&#x27;WDJKX&#x27;</span>+<span class="built_in">chr</span>(k)+<span class="string">&#x27;ZM&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            des=m.hexdigest()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;e9032&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;da&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;911513&#x27;</span> <span class="keyword">in</span> des:</span><br><span class="line">                <span class="built_in">print</span>(des)</span><br></pre></td></tr></table></figure> 然后运行结果为： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e9032994dabac08080091151380478a2</span><br></pre></td></tr></table></figure> 之后就不知道要干什么了 搜了搜题解[捂脸]，结果说flag就是输出部分（wtm人傻了）</p>
<p>当然，搜题解之前搜了搜关于 MD5 的资料（对于哈希函数这块一直是云里雾里的） MD5加密算法：<a href="https://www.tomorrow.wiki/archives/503">https://www.tomorrow.wiki/archives/503</a>来源TOMORROW星辰：www.tomorrow.wik 简单概括起来，MD5 算法的过程分为四步：处理原文，设置初始值，循环加工，拼接结果。（底层实现非常复杂） 破解MD5加密算法：<a href="https://www.tomorrow.wiki/archives/562">https://www.tomorrow.wiki/archives/562</a>来源TOMORROW星辰：www.tomorrow.wik 破解算法都是利用 MD5 碰撞原理：被加密的数据与 MD5 加密算法所生成的哈希值并不是一一对应的关系，而是多对一，也就是说不同的数据经过 MD5 加密算法处理后，可能生成同样的 MD5 哈希值。通过碰撞寻找可以生成相同的哈希值的数据来实现破解。 其中暴力破解法的时间成本太高了，字典法则是空间成本太高，彩虹表法的时间成本和空间成本都较为均衡，相对较低，实用性更强。但是，计算机技术发展现在，利用分布式技术仍是可以有效利用以上方法进行破解 MD5 加密的。因此，这些方法都是有广泛应用的。 2004 年，中国数学家王小云等提出了一种新的 MD5 碰撞方法，使得 MD5 加密算法破解的效率大大提高。 2009 年，冯登国、谢涛提出了利用差分攻击的，使得 MD5 加密算法的破解复杂度进一步降低。 百度上搜的差分攻击（看不懂）：<a href="https://baike.baidu.com/item/%E5%B7%AE%E5%88%86%E6%94%BB%E5%87%BB">https://baike.baidu.com/item/%E5%B7%AE%E5%88%86%E6%94%BB%E5%87%BB</a></p>
<p>一个小插曲： <img data-src="https://img-blog.csdnimg.cn/20210329215331168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 我还特地搜了一下，我是不会告诉你们俗称“拉面女神”的[滑稽]</p>
<h2 id="结语">结语</h2>
<p>第二天，希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-3-30</title>
    <url>/uncategorized/2021/03/30/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-3-30</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-3-30">BUUCTF 每日打卡 2021-3-30</h1>
<h2 id="引言">引言</h2>
<p>周二，比较轻松的一天 晚上有机器学习选修课（学，都可以学）</p>
<h2 id="alice与bob">Alice与Bob</h2>
<p>题目描述： <img data-src="https://img-blog.csdnimg.cn/20210330075927447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 如题，先进行大整数分解： 分解大整数网站：<a href="http://factordb.com/">http://factordb.com/</a> <img data-src="https://img-blog.csdnimg.cn/20210330075551151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后进行md5加密： 参考博文<a href="https://blog.csdn.net/qq_878799579/article/details/74324869">https://blog.csdn.net/qq_878799579/article/details/74324869</a> <img data-src="https://img-blog.csdnimg.cn/20210330080410603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 输出即结果</p>
<p>至于题干里面提到 Alice 和 Bob ， 初学密码学的时候设置情境，一般将 Alice(A) 作为传递信息的人， Bob(B) 作为接收信息的人， Cat(C) 作为窃听者（有个窃听软件叫 webcat ，大概是这个原因吧），然后这两个人传收信息搞出了一堆加密算法（</p>
<h2 id="rsarsa">rsarsa</h2>
<p>题目描述： Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</p>
<p>p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483 q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407 e = 65537 c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</p>
<p>Use RSA to find the secret message 解题代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入p, q, e, c</span></span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure> 按道理是要 long_to_bytes 一下的，结果出来一堆乱码 b'8eC%Y97t' 把 m 作为 flag 提交即可</p>
<h2 id="大帝的密码武器">大帝的密码武器</h2>
<p>题目描述： 公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。 以下密文被解开后可以获得一个有意义的单词：FRPHEVGL 你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。 密文：ComeChina</p>
<p>直接用在线工具进行解密： 随便找了个网站：<a href="http://ctf.ssleye.com/caesar.html">http://ctf.ssleye.com/caesar.html</a> <img data-src="https://img-blog.csdnimg.cn/20210330082924129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 位移13位得到有意义的单词SECURITY 同样对密文位移13位： <img data-src="https://img-blog.csdnimg.cn/20210330083129893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到答案 PbzrPuvan （这个网站对大小写不敏感，差评）</p>
<h2 id="结语">结语</h2>
<p>晚上机器学习课结束之后大概就不想动脑了，所以在大早上就把每日打卡写完 昨天肝完日常就快12点了，都没时间撸胶了（ 希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-3-31</title>
    <url>/uncategorized/2021/03/31/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-3-31</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-3-31">BUUCTF 每日打卡 2021-3-31</h1>
<h2 id="引言">引言</h2>
<p>3月的最后几天真tnd倒霉透了 抽卡各种暴死，明明是复刻活动让我卡紫皮（wtm上次毕业了） 搭个个人博客各种掉坑 搞了三天总算支棱起来了：<a href="https://luozj1020.github.io/">https://luozj1020.github.io/</a> （害，域名还没整起来） 只是搭了一个框架，把这几天的wp丢了进去 欢迎你们来我的博客看，看累了就。。直接睡觉，没问题的[doge]</p>
<h2 id="hexo-遇到的各种坑">hexo 遇到的各种坑</h2>
<p>既然讲到了搭个人博客，就讲一讲我用 hexo + github 遇到的各种坑 我搭博客主要参考了知乎的这篇文章：<a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a> 但是这个作者参考的是这篇18年文章：<a href="https://godweiyang.com/2018/04/13/hexo-blog/">https://godweiyang.com/2018/04/13/hexo-blog/</a> 以致于我踩了不少坑</p>
<h3 id="node.js">1、Node.js</h3>
<p>首先是 Node.js <img data-src="https://img-blog.csdnimg.cn/20210331204551487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 一定要下右边这个！！！ 我当时贪了下了最新版，结果各种报错</p>
<h3 id="git">2、Git</h3>
<p>记得更新 （虽然我当时更新前后似乎也没什么变化）</p>
<h3 id="hexo">3、Hexo</h3>
<p>参考文章里面有这样一段话：<img data-src="https://img-blog.csdnimg.cn/20210331205002967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结果我 hexo d 了无数次，github 上博客的内容丝毫没有改变 大致会出现这么一段话： <img data-src="https://img-blog.csdnimg.cn/20210331205148440.png" alt="在这里插入图片描述" /> 后来我看到了另一篇知乎文章，作者碰到了和我有一样的问题：<a href="https://zhuanlan.zhihu.com/p/345841098">https://zhuanlan.zhihu.com/p/345841098</a> <img data-src="https://img-blog.csdnimg.cn/202103312053520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 我才得以解决</p>
<p>另一个问题就是我把 .md 文件放到 source 文件夹 hexo g 后生成的网站里面 recent post 文章标题都是 (no title)（好像是这么显示的），后来才发现要在文件开头夹几行字： <img data-src="https://img-blog.csdnimg.cn/20210331205709954.png" alt="在这里插入图片描述" /> 吐槽的大概就这么些 只能说找资料还是要跟进时代吧</p>
<h2 id="windows系统密码">Windows系统密码</h2>
<p>回到正题</p>
<p>题目给了一个 <strong>.hash 文件</strong>，很容易想到哈希函数 MD5 加密 文件内容如下： <img data-src="https://img-blog.csdnimg.cn/20210331210338650.png" alt="在这里插入图片描述" /> 容易猜想第二行 ctf 字样即为flag MD5 解密网站：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a> 先把第一段拿去 MD5 解密： <img data-src="https://img-blog.csdnimg.cn/20210331210518771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 嗯？？？ 还要我付钱？ 再试试第二段： <img data-src="https://img-blog.csdnimg.cn/20210331210627845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 诶 提交上去就是 flag</p>
<h2 id="结语">结语</h2>
<p>传统知识+古典密码明天再写（咕咕咕） 因为里面实际上有两道题，原题 flag 已经找到了；而另一道题加密方法没见过，与题目的 flag 无关 希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-1</title>
    <url>/uncategorized/2021/04/01/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-1</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-4-1">BUUCTF 每日打卡 2021-4-1</h1>
<h2 id="引言">引言</h2>
<p>四月的第一天，今天就鸽了 当然，是骗人的 周四课虽然不多，但数分高代在同一天属实难顶</p>
<h2 id="传统知识古典密码">传统知识+古典密码</h2>
<p>题干如下： 小明某一天收到一封密信，信中写了几个不同的年份 辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。 信的背面还写有“+甲子”，请解出这段密文。</p>
<p>key值：CTF{XXX}</p>
<p>一看是干支纪年法，一查表 <img data-src="https://img-blog.csdnimg.cn/20210331211043907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到列表：[28, 30, 23, 8, 29, 10, 16, 30] 看着应该是 ascii 码 +甲子 即每个数加60（每个数加1就没有什么意义了）</p>
<p>上面这部分是传统知识，题目还提到古典密码，常见的加密内容为字符串，加密后还是字符串的古典密码不外乎栅栏密码、凯撒密码 而且题目信息很少，也不大可能是 维吉尼亚密码 或者 base 加密之类需要字母表的密码 <img data-src="https://img-blog.csdnimg.cn/20210331220339234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结果为 SHUANGYU</p>
<p>其实我是搜了题解的 由于题目给的信息很少，而且输出不是题目给的格式 CTF{XXX} 即使想到了用栅栏密码和凯撒密码，也无法判断那个是正确结果，只能一个个试过去 而且很可能做了一次栅栏（或根本没想到用栅栏），没有正确结果就放弃了 结果应该是和比赛的名字有关联（“SHUANGYU”看起来像"双语"？），比如是 XX杯，这也是 BUUOJ 一个缺失的地方吧</p>
<h2 id="传感器">传感器</h2>
<p>“传统知识+古典密码”的问题暂且不提，但是附件里有另一个题是什么鬼？？？（您搁这儿套娃呢） <img data-src="https://img-blog.csdnimg.cn/20210401210401497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> “传感器”解压之后题目如下： 5555555595555A65556AA696AA6666666955 这是某压力传感器无线数据包解调后但未解码的报文(hex) 已知其ID为0xFED31F，请继续将报文完整解码，提交hex。 提示1：曼联</p>
<p>当时我就想，这个题的结果可能是“传统知识+古典密码”的提示，然后就想先解这题，但是毫无思路 这个“提示1”给了一个足球俱乐部是什么鬼？提示是球队的比分或者创立年份之类的数字吗？可是有什么用呢？ 而“压力传感器无线数据包”的线索也没有头绪（大概给的是高低电频给的二进制编码然后转成了题干（猜的）） 只好去搜题解：<a href="https://blog.csdn.net/MikeCoke/article/details/106146391">https://blog.csdn.net/MikeCoke/article/details/106146391</a> 好家伙，曼联原来指的是<strong>曼彻斯特编码</strong>，我人傻了，没见过 当然，就有必要学习一下曼彻斯特编码 <strong>曼彻斯特码</strong>（Manchester code），又称数字双向码、分相码或相位编码(PE)，是 一种常用的的二元码线路编码方式之一，被物理层使用来编码一个同步位流的时钟和数据。在通信技术中，用来表示所要发送比特 流中的数据与定时信号所结合起来的代码。常用在以太网通信，列车总线控制，工业总线等领域 参考文章：<a href="https://zhuanlan.zhihu.com/p/83958412">CTF中常见的加解密集合</a> 曼彻斯特码编解码原理：<a href="https://blog.csdn.net/i13919135998/article/details/52276029">https://blog.csdn.net/i13919135998/article/details/52276029</a> 曼彻斯特解码电路设计的关键是如何准确地从曼彻斯特码的数据流中提取出“10”和“01”信号，并且把它们转换成普通二进制编码中的“0”和“1”。例如对于曼彻斯特码“01010101”，如果从第一位开始解码，得到的二进制编码就是“1111”，而若从第二位开始解码，得到的二进制编码就是“000”和头尾两个曼彻斯特码。由此可见，如果曼彻斯特码数据流中只有“1”或“0”是不能得到正确的译码结果的，如果曼彻斯特编码数据流中出现“00”，则“00”前后的码元必定是“1”；如果曼彻斯特编码数据流中出现“11”，则“00”前后的码元必定是“0”，因此，我们可以将“00”与“11”作为曼彻斯特码译码的标志位。（阿巴阿巴阿巴） 编码的步骤，是用01表示0，用10表示1。正是因为用跳变沿表示电平，使得它的频率是信号的两倍。 将5555555595555A65556AA696AA6666666955转化为二进制，根据01-&gt;1,10-&gt;0.可以得到 0101-&gt;11 0110-&gt;10 1010-&gt;00 1001-&gt;01 将得到的二进制按照上述转换后，对比ID并不重合，根据八位倒序传输协议将二进制每八位reverse，然后转换十六进制就可以得到flag。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher=<span class="string">&#x27;5555555595555A65556AA696AA6666666955&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iee</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        a=<span class="built_in">bin</span>(<span class="built_in">eval</span>(<span class="string">&#x27;0x&#x27;</span>+cipher[i]))[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">        tmp=tmp+a[<span class="number">1</span>]+a[<span class="number">3</span>]</span><br><span class="line">        <span class="built_in">print</span>(tmp)</span><br><span class="line">    plain=[<span class="built_in">hex</span>(<span class="built_in">int</span>(tmp[i:i+<span class="number">8</span>][::-<span class="number">1</span>],<span class="number">2</span>))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tmp),<span class="number">8</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(plain).upper())</span><br><span class="line"></span><br><span class="line">iee(cipher)</span><br></pre></td></tr></table></figure> 原文链接：<a href="https://blog.csdn.net/qq_45784859/article/details/105602386">https://blog.csdn.net/qq_45784859/article/details/105602386</a></p>
<p>结果其实与 flag 没有什么影响，就不再赘述了</p>
<h2 id="结语">结语</h2>
<p>今天也坚持水完了（？ 希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-2</title>
    <url>/uncategorized/2021/04/02/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-2</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-4-2">BUUCTF 每日打卡 2021-4-2</h1>
<h2 id="引言">引言</h2>
<p>啊，假期就要开始了，好耶！ 明天还有虎符CTF要打（TTK，一直摸TTK）</p>
<h2 id="信息化时代的步伐">信息化时代的步伐</h2>
<p>打开附件，只见一串数字：”606046152623600817831216121621196386“ 我直接“？？？” 再看题目描述： <img data-src="https://img-blog.csdnimg.cn/20210402215456169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 还是摸不着头脑 只好搜题解 说是<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%87%E7%94%B5%E7%A0%81">中文电码</a>，又是没见过的密码[捂脸] “也许中国可以早早进入信息化时代，但是被清政府拒绝了”： 自摩尔斯电码在1835年发明后，一直只能用来传送英语或以拉丁字母拼写的文字。1873年，法国驻华人员威基杰（S·A·Viguer）参照《康熙字典》的部首排列方法，挑选了常用汉字6800多个，编成了第一部汉字电码本《电报新书》。后由任上海电报局首任总办的郑观应将其改编成为《中国电报新编》。（摘自wiki） flag 为：flag{计算机要从娃娃抓起} 这句话是1984年邓小平同志说的：<a href="http://cpc.people.com.cn/n1/2019/1030/c69113-31428714.html">数十年后一位伟人说的话</a> 中文电码加密解密：<a href="http://code.mcdvisa.com/">http://code.mcdvisa.com/</a></p>
<h2 id="rsa1">RSA1</h2>
<p>dp dq 泄露的题没做过（别问，问就是看wp） <img data-src="https://img-blog.csdnimg.cn/20210402220615920.jpg" alt="在这里插入图片描述" /> 当然，剽窃别人的答案是可耻的，我们还要“剽窃”别人的知识（嘿嘿嘿） 参考博客：<a href="https://skysec.top/2018/08/25/RSA%E4%B9%8B%E6%8B%92%E7%BB%9D%E5%A5%97%E8%B7%AF-2/">RSA之拒绝套路(2)</a> 这篇博客讲得很详细，但仍有地方可以细化和纠错 作为一个数理基础不扎实的数院学生，花了老半天才看明白 下面，让我来逐步推导（也当练习 <span class="math inline">\(Latex\)</span>了）： 首先，什么是 <span class="math inline">\(dp\)</span> 和 <span class="math inline">\(dq\)</span>： <span class="math display">\[
\begin{cases}
dp \equiv d\space mod\space (p-1)\\dq \equiv d\space mod\space (q-1)
\end{cases}
\]</span> 然后，由 RSA 加密算法可得： <span class="math display">\[
\begin{cases}
n = p*q\\c \equiv m^{e}\space mod\space n\\m \equiv c^{d}\space mod\space n
\end{cases}
\]</span> 因此，要求出密文 <span class="math inline">\(m\)</span> ，我们必须求出 <span class="math inline">\(c^{d}\)</span> 由 <span class="math inline">\(m \equiv c^{d}\space mod\space n\)</span> 可得 <span class="math inline">\(\exists\space k_{1} \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
m=c^{d}+k_{1}*n=c^{d}+k_{1}*p*q
\]</span> 再对等式两边分别模 <span class="math inline">\(p, q\)</span> ，含 <span class="math inline">\(p, q\)</span> 的项在模 <span class="math inline">\(p, q\)</span> 时为 <span class="math inline">\(0\)</span> 得 <span class="math display">\[
\begin{cases} m_{1} \equiv c^{d}\space mod\space p\cdots\cdots (1)\\m_{2} \equiv c^{d}\space mod\space q \cdots\cdots (2)\end{cases}
\]</span> (原文此处标注错误) 由 <span class="math inline">\((1)\)</span> 式可得 <span class="math inline">\(\exists\space k_{2} \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
c^{d}=k_{2}*p+m_1
\]</span> 代入 <span class="math inline">\((2)\)</span> 式可得 <span class="math display">\[
m_{2} \equiv (m_{1}+k_{2}*p)\space mod\space q
\]</span> 可得 <span class="math inline">\(\exists\space k_{3} \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
m_{2}=m_{1}+k_{2}*p+k_{3}*q
\]</span> 移项，两边模 <span class="math inline">\(q\)</span> 可得 <span class="math display">\[
(m_{2}-m{1})\equiv k_{2}*p\space mod\space q
\]</span> 由于 <span class="math display">\[
gcd(p, q)=1
\]</span> 由裴蜀定理，<span class="math inline">\(\exists\space u,v \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
u*p+v*q=1
\]</span> 两边模 <span class="math inline">\(q\)</span> 得 <span class="math display">\[
u*p\equiv 1\space mod \space q
\]</span> 故可以求p的逆元，且上式中的 <span class="math inline">\(u\)</span> 即为 <span class="math inline">\(p\)</span> 的逆元，即 <span class="math inline">\(p^{-1}(mod\space q)\)</span> ，得到 <span class="math display">\[
(m_{2}-m_{1})*p^{-1}\equiv k_{2}\space mod\space q
\]</span> 将以下三式 <span class="math display">\[
\begin{cases}
k_{2}\equiv (m_{2}-m_{1})*p^{-1}\space mod\space q\\c^{d}=k_{2}*p+m_1\\m \equiv c^{d}\space mod\space n
\end{cases}
\]</span> 合并可得 <span class="math display">\[
m \equiv (((m_{2}-m_{1})*p^{-1}\space mod\space q)*p+m_1)\space mod\space n
\]</span> 最后求 <span class="math inline">\(m_{1},m_{2}\)</span> 因为有 <span class="math display">\[
\begin{cases} d \equiv dp\space mod\space (p-1)\\d \equiv dq\space mod\space (q-1) \end{cases}
\]</span> 又 <span class="math display">\[
\begin{cases} m_{1} \equiv c^{d}\space mod\space p\\m_{2} \equiv c^{d}\space mod\space q \end{cases}
\]</span> 代入得 <span class="math display">\[
\begin{cases} m_{1} \equiv c^{dp\space mod\space (p-1)}\space mod\space p\\m_{2} \equiv c^{dq\space mod\space (q-1) }\space mod\space q \end{cases}
\]</span> 以 <span class="math inline">\(dp\)</span> 为例，由 <span class="math inline">\(d \equiv dp\space mod\space (p-1)\)</span> 可得 <span class="math inline">\(\exists\space k \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
d = dp+k*(p-1)
\]</span> 代入得 <span class="math display">\[
m_{1} \equiv c^{dp+k*(p-1)} \space mod \space p\equiv c^{dp}*c^{k*(p-1)} \space mod \space p
\]</span> 由费马小定理，因为 <span class="math inline">\(p\)</span> 是素数，且 <span class="math inline">\(gce(p, c) = 1\)</span>（由于 <span class="math inline">\(p\)</span> 是大素数，而 <span class="math inline">\(c\)</span> 是偶数），则 <span class="math display">\[
c^{(p-1)} \equiv 1\space mod\space p
\]</span> 故 <span class="math inline">\(\exists\space k_{4} \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
c^{k*(p-1)} = (c^{p-1})^{k} = (1+k_{4}*p)^{k}
\]</span> 对右式二项式展开再模 <span class="math inline">\(p\)</span> 可得 <span class="math display">\[
c^{k*(p-1)}  \equiv 1 \space mod \space p
\]</span> 故 <span class="math display">\[
m_{1} \equiv c^{dp} \space mod \space p
\]</span> 同理可得 <span class="math display">\[
m_{2} \equiv c^{dq} \space mod \space q
\]</span> 最终得方程组 <span class="math display">\[
\begin{cases} m_{1} \equiv c^{dp} \space mod \space p\\m_{2} \equiv c^{dq} \space mod \space q\\m \equiv (((m_{2}-m_{1})*p^{-1}\space mod\space q)*p+m_1)\space mod\space n \end{cases}
\]</span> 代码实现如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">dp, dq, p, q, c</span>):</span></span><br><span class="line">    n = p*q</span><br><span class="line">    InvQ = inverse(p, q)</span><br><span class="line">    m1 = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    m2 = <span class="built_in">pow</span>(c, dq, q)</span><br><span class="line">    m = ((((m2 - m1)*InvQ) % p) * p + m1) % n</span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"></span><br><span class="line">decrypt(dp, dq, p, q, c)</span><br></pre></td></tr></table></figure></p>
<h2 id="结语">结语</h2>
<p>终于肝完了，已经燃尽了（躺） 明天还要打比赛 希望能继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-3</title>
    <url>/uncategorized/2021/04/03/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-3</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-3">BUUCTF 每日打卡 2021-4-3</h2>
<h2 id="引言">引言</h2>
<p>今天的虎符CTF全队四个人只有我没有做出题来，感觉很对不起队友[叹气] 总共两道 crypto ，第一道 cubic 本质上是一道椭圆曲线加密问题，然而这是我的知识盲区 第二题看到 .sage 文件，点开挺长的代码，还涉及位运算，我直接懒得看了 最后第一题68人解出来，第二题仅有13题解出来 楞看了一下午的椭圆曲线加密，把加密原理大致看懂了（怎么破解还没看） 等 wp 出来之后我分两天写一下吧</p>
<h2 id="凯撒替换呵呵">凯撒？替换？呵呵</h2>
<p>密文：MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO} 尝试用凯撒解密： <img data-src="https://img-blog.csdnimg.cn/2021040322124019.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" /> 不知道什么玩意儿 再用<a href="https://quipqiup.com/">替换密码爆破网站</a>： <img data-src="https://img-blog.csdnimg.cn/20210403221320667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第一条有意义的语句删除空格，加大括号即为 flag</p>
<h2 id="old-fashion">old-fashion</h2>
<p>看题目就能猜到是古典密码 然后看到题目的一串字符：Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l 猜想是替换密码 只不过没有 flag 前缀提示了<img data-src="https://img-blog.csdnimg.cn/2021040322135021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 尝试爆破，结尾显示的就是 flag</p>
<h2 id="权限获得第一步">权限获得第一步</h2>
<p>题目内容位Administrator:500:806EDC27AA52E314AAD3B435B51404EE:F4AD50F57683D4260DFD48AA351A17A8::: 联系题目 <img data-src="https://img-blog.csdnimg.cn/20210403221418319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 联想到之前的《Windows系统密码》，易知用 MD5 解密 不出所料，前面一段仍然是“付费内容” <img data-src="https://img-blog.csdnimg.cn/20210403221438264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第二段解密后为 flag <img data-src="https://img-blog.csdnimg.cn/20210403221447813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> “答案为非常规形式”大概是指结果为纯数字</p>
<h2 id="萌萌哒的八戒">萌萌哒的八戒</h2>
<p>一看跟猪有关就知道是猪圈密码了 <img data-src="https://img-blog.csdnimg.cn/20210403221503108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />题目给了一张图片：</p>
<p>题目给了一张图片：</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210403221518318.jpg" alt="在这里插入图片描述" /> 对照猪圈密码表： <img data-src="https://img-blog.csdnimg.cn/20210403221749629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 可得明文：WHENTHEPIGWANTTOEAT</p>
<h2 id="结语">结语</h2>
<p>总算水完了（？） 比赛打完了，这两天天写写作业，摆弄摆弄博客，玩玩胶就把清明假期过去了 <img data-src="https://img-blog.csdnimg.cn/20210403221649822.png" alt="在这里插入图片描述" /> 希望能坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-4</title>
    <url>/uncategorized/2021/04/04/week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-4</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-4">BUUCTF 每日打卡 2021-4-4</h2>
<h2 id="引言">引言</h2>
<p>今天把数分作业肝完了，明天肝完高代，假期就过去了 MG正义到了（堆积+1）</p>
<h2 id="rsa3">RSA3</h2>
<p>看到 c1, c2, e1, e2, n 就猜到是共模攻击 见 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">CTF Wiki Crypto 部分 非对称加密 RSA 模数相关攻击</a> <img data-src="https://img-blog.csdnimg.cn/20210404191609511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n = <span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1 = <span class="number">11187289</span></span><br><span class="line">c2 = <span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2 = <span class="number">9647291</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(GCD(e1, e2)) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span>(<span class="params">a, b</span>):</span> <span class="comment"># 扩展欧几里得算法，求ua+vb=gcd(a,b)中的u,v</span></span><br><span class="line">	<span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">		u, v = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">		<span class="keyword">return</span> (u, v)</span><br><span class="line">	<span class="keyword">if</span> a &lt; b:</span><br><span class="line">		a, b = b, a</span><br><span class="line">	u, v = exgcd(b, a%b)</span><br><span class="line">	u, v = v, u - a // b * v</span><br><span class="line">	<span class="keyword">return</span> (u, v)</span><br><span class="line"></span><br><span class="line">u, v = exgcd(e1, e2)</span><br><span class="line"><span class="built_in">print</span>(u, v)</span><br><span class="line">m = gmpy2.powmod(c1, u, n) * gmpy2.powmod(c2, v, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>得到 flag : flag{49d91077a1abcb14f1a9d546c80be9ef}</p>
<h2 id="世上无难事">世上无难事</h2>
<p>题目给了一串字符： VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09 不知道是什么，猜想为替换密码，尝试爆破：<a href="https://quipqiup.com/">https://quipqiup.com/</a> 得到结果： <img data-src="https://img-blog.csdnimg.cn/2021040419230693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> flag 为 640E11012805F211B0AB24FF02A1ED09 再将大写字母替换成小写字母： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;640E11012805F211B0AB24FF02A1ED09&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= <span class="built_in">ord</span>(key[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(key[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += key[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></p>
<h2 id="结语">结语</h2>
<p>已经4号了，GO语言还没开始学（咕咕咕） 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-19</title>
    <url>/uncategorized/2021/04/19/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-19</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-19">BUUCTF 每日打卡 2021-4-19</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="signin">signin</h2>
<p>一看题目，签到题 附件内容： welcome to crypto world！！ 密文：424a447b57653163306d655f74345f424a444354467d 密文十六进制转码就行 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">s = <span class="string">&#x27;424a447b57653163306d655f74345f424a444354467d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(s, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure></p>
<h2 id="crypto-rsa0">crypto-rsa0</h2>
<p>拿到一个压缩包附件 解压的时候发现： <img data-src="https://img-blog.csdnimg.cn/20210419220625214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 嗯？不对劲 再把里面的压缩包解压 <img data-src="https://img-blog.csdnimg.cn/20210419220717290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 嗯？ 给了一个提示：怎么办呢，出题人也太坏了，竟然把压缩包给伪加密了！ 额。。。 什么是伪加密？ 参考博客：<a href="https://www.cnblogs.com/0yst3r-2046/p/11890498.html">https://www.cnblogs.com/0yst3r-2046/p/11890498.html</a></p>
<p>阿巴阿巴阿巴 绿色框住的 50 4B 是压缩源文件目录区 ，它对应的绿色框柱的 09 00 影响加密属性，当数字为奇数是为加密，为偶数时不加密。 阿巴阿巴阿巴</p>
<p>好家伙，只要把 50 4B 后面的 09 00 改成偶数就行</p>
<p>然后就缺工具了 网上下 winhex 各种出问题 经过大佬指点，搞了 010 editor 的破解版（欸嘿嘿~） 然后搜索 50 4B 把后面的 09 00 修改即可 一个小插曲： <img data-src="https://img-blog.csdnimg.cn/20210419221504127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 解压之后得到 RSA 加密代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">FLAG=<span class="comment">#hidden, please solve it</span></span><br><span class="line">flag=<span class="built_in">int</span>.from_bytes(FLAG,byteorder = <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">N=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">enc = <span class="built_in">pow</span>(flag,e,N)</span><br><span class="line"><span class="built_in">print</span> (enc)</span><br></pre></td></tr></table></figure>
<p>啊这，p,q 都告诉了吗 直接解密就行 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411</span></span><br><span class="line">q = <span class="number">7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223</span></span><br><span class="line">c = <span class="number">50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：actf{n0w_y0u_see_RSA}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-20</title>
    <url>/uncategorized/2021/04/20/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-20</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-20">BUUCTF 每日打卡 2021-4-20</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="一张谍报">一张谍报</h2>
<p>题目给了一份报纸 <img data-src="https://img-blog.csdnimg.cn/20210420225220955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 完全摸不着头脑 只能找 <a href="https://blkstone.github.io/2017/12/17/dbappsec-ctf/">wp</a> flag：南天菩萨放鹰捉猴头</p>
<h2 id="samemod">SameMod</h2>
<p>共模攻击 不再赘述 详见 CTFwiki <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">共模攻击</a> 题目给的数据都和 CTFwiki 的一模一样（啊这） 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span></span><br><span class="line">e1 = <span class="number">773</span></span><br><span class="line">e2 = <span class="number">839</span></span><br><span class="line">message1=<span class="number">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span></span><br><span class="line">message2=<span class="number">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span></span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    message1 = gmpy2.invert(message1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    message2 = gmpy2.invert(message2, n)</span><br><span class="line">plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">plain = <span class="built_in">str</span>(plain)</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plain):</span><br><span class="line">    <span class="keyword">if</span> plain[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(plain[i:i + <span class="number">3</span>]))</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(plain[i:i + <span class="number">2</span>]))</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>结果为：flag{whenwethinkitispossible}</p>
<h2 id="babyrsa">BabyRSA</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;GWHT&#123;******&#125;&#x27;</span></span><br><span class="line">secret = <span class="string">&#x27;******&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line">half = <span class="built_in">len</span>(flag) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">flag1 = flag[:half]</span><br><span class="line">flag2 = flag[half:]</span><br><span class="line"></span><br><span class="line">secret_num = getPrime(<span class="number">1024</span>) * bytes_to_long(secret)</span><br><span class="line"></span><br><span class="line">p = sympy.nextprime(secret_num)</span><br><span class="line">q = sympy.nextprime(p)</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">F1 = bytes_to_long(flag1)</span><br><span class="line">F2 = bytes_to_long(flag2)</span><br><span class="line"></span><br><span class="line">c1 = F1 + F2</span><br><span class="line">c2 = <span class="built_in">pow</span>(F1, <span class="number">3</span>) + <span class="built_in">pow</span>(F2, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">assert</span>(c2 &lt; N)</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">pow</span>(c1, e, N)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, e, N)</span><br><span class="line"></span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&#x27;secret&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;N=&#x27;</span> + <span class="built_in">str</span>(N) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;m1=&#x27;</span> + <span class="built_in">str</span>(m1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;m2=&#x27;</span> + <span class="built_in">str</span>(m2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.close()</span><br></pre></td></tr></table></figure>
<p>看来是把 flag 分成两段加密了 输出数据如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N=<span class="number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span></span><br><span class="line">m1=<span class="number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span></span><br><span class="line">m2=<span class="number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span></span><br></pre></td></tr></table></figure>
<p>老规矩，先试试能不能爆破 N ： <img data-src="https://img-blog.csdnimg.cn/20210420233738222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这 爆破出来了 根据 RSA 的常规套路解出 c1, c2 由于 <span class="math display">\[
\begin{cases}
c_{1} = f_{1} + f_{2} \\
c_{2} = f_{1}^{3} + f_{2}^{3}
\end{cases}
\]</span> c2 又可以进行因式分解 <span class="math display">\[
c_{2} = f_{1}^{3} + f_{2}^{3} = (f_{1} + f_{2} )(f_{1}^{2} - f_{1} f_{2} + f_{2}^{2})
\]</span> 将 <span class="math inline">\(c_{1} = f_{1} + f_{2}\)</span> 代入得 <span class="math display">\[
\frac{c_{2}}{c_{1}} = f_{1}^{2} - f_{1} f_{2} + f_{2}^{2} = (f_{1} + f_{2} )^{2} - 3f_{1} f_{2}
\]</span> 可以求出 <span class="math inline">\(f_{1} f_{2}\)</span> 记为 <span class="math inline">\(c_{3}\)</span> 然后可以构造一元二次方程 <span class="math display">\[
x^{2} - c_{1}x + c_{3} = 0
\]</span> 解出结果即为 <span class="math inline">\(f1,f2\)</span> 最后解密即可 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377747699</span></span><br><span class="line">q = <span class="number">797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377748737</span></span><br><span class="line">N = <span class="number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span></span><br><span class="line">m1= <span class="number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span></span><br><span class="line">m2 = <span class="number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span></span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;0x10001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, d, N) <span class="comment"># f1 + f2</span></span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, d, N) <span class="comment"># f1^3 + f2^3</span></span><br><span class="line">c3 = (c1**<span class="number">2</span> - c2//c1) // <span class="number">3</span> <span class="comment"># f1 * f2</span></span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">f1, f2 = solve(Eq(x**<span class="number">2</span> - c1*x + c3,<span class="number">0</span>),x)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(f2) + long_to_bytes(f1))</span><br></pre></td></tr></table></figure>
<p>结果为：GWHT{f709e0e2cfe7e530ca8972959a1033b2}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-21</title>
    <url>/uncategorized/2021/04/21/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-21</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡">2021-4-21 BUUCTF 每日打卡</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="yxx">yxx</h2>
<p>题目给了一个密文、一个明文 密文一堆乱码 明文：lovelovelovelovelovelovelovelove 联想到之前做过的一道题：<a href="https://blog.csdn.net/weixin_52446095/article/details/115464659?spm=1001.2014.3001.5501">异性相吸</a> 大概又是要做异或操作 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;lovelovelovelovelovelovelovelove&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;密文.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    m = f.read()</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    c += <span class="built_in">chr</span>(<span class="built_in">ord</span>(m[i]) ^ <span class="built_in">ord</span>(key[i]))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>结果为：flag:nctf{xor_xor_xor_biueiubiu} 但是怎么都不对 找到大佬的 <a href="https://www.codeleading.com/article/51553078742/">wp</a> 结果为：flag:nctf{xor_xor_xor_biubiubiu} 啊这 感觉也没什么不对的啊</p>
<h2 id="babyrsa">babyrsa</h2>
<p>一道非常基础的 RSA 题 n 不长，可以爆破 <img data-src="https://img-blog.csdnimg.cn/20210421214054795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">28767758880940662779934612526152562406674613203406706867456395986985664083182</span></span><br><span class="line">n = <span class="number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">189239861511125143212536989589123569301</span></span><br><span class="line">q = <span class="number">386123125371923651191219869811293586459</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：wctf2020{just_<span class="citation" data-cites="_piece_0f_cak3">@_piece_0f_cak3</span>}</p>
<h2 id="rsa4">RSA4</h2>
<p>附件给了三对 N 和 c 猜测是广播攻击 但是，怎么没有 e 果断找 <a href="https://blog.csdn.net/weixin_44017838/article/details/105058745">wp</a>（擦汗） 啊这 原来给的是五进制数吗 猜想 e=3 是什么操作？ 不过每对 N 和 c 都相差一位，e 也不会达到哪去就是了。。。 至于 CRT 算法，懒得写了，直接用 sagemath 封装好的 <img data-src="https://img-blog.csdnimg.cn/20210421220158328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 求出了 m <img data-src="https://img-blog.csdnimg.cn/20210421220221500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到结果</p>
<h2 id="结语">结语</h2>
<p>总算把第二页刷完了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-22</title>
    <url>/uncategorized/2021/04/22/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-22</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-22">BUUCTF 每日打卡 2021-4-22</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="浪里淘沙">浪里淘沙</h2>
<p>题目描述： <img data-src="https://img-blog.csdnimg.cn/20210422202220495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 附件内容： <img data-src="https://img-blog.csdnimg.cn/20210422202243579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 一脸懵逼 答案见 <a href="https://blog.csdn.net/weixin_44017838/article/details/104888540">wp</a>[doge]</p>
<h2 id="vigenère">Vigenère</h2>
<p>维吉尼亚密码 不管，直接<a href="https://www.guballa.de/vigenere-solver">爆破</a> 答案： <img data-src="https://img-blog.csdnimg.cn/20210422202410305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="这是什么觅">这是什么觅🐎</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210422204405934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 扫了二维码，什么都没发现 附件没有后缀 用 010editor 打开 <img data-src="https://img-blog.csdnimg.cn/20210422204956382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 发现是 zip 文件 后缀名改为 .zip <img data-src="https://img-blog.csdnimg.cn/20210422205124431.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 内容是一张图片 右下角的数字和字母容易猜测代表 分别代表日历中的列和行 得到的日期，对应字母表中的字母 结果为 calendar</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-23</title>
    <url>/uncategorized/2021/04/23/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-23</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-4-23">BUUCTF 每日打卡 2021-4-23</h1>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="babyrsa">babyRSA</h2>
<p>题目只给了 e, d, c 根据加密代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextPrime</span>(<span class="params">n</span>):</span></span><br><span class="line">    n += <span class="number">2</span> <span class="keyword">if</span> n &amp; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(n):</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = nextPrime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag.encode()), e, n)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们得知 p 是一个 1024 位的素数，而 q 是 p 的下一个素数 所以，根据 <span class="math display">\[
\varphi = (p-1)*(q-1)
\]</span> 可以大致推断 <span class="math inline">\(\varphi\)</span> 介于 <span class="math inline">\((2^{1023})^2\)</span> 与 <span class="math inline">\((2^{1024})^2\)</span> 之间 根据 <span class="math display">\[
e * d \equiv 1 \space (mod \space \varphi)
\]</span> 推出 <span class="math inline">\(\exists\space k \in\mathbb{Z}, \space s.t.\)</span> <span class="math display">\[
e * d = 1 +  k * \varphi
\]</span> 再计算 <span class="math inline">\(e * d - 1\)</span> ，发现是一个 2066 位的数 可以推出 <span class="math inline">\(k\)</span> 是介于 <span class="math inline">\(2^{15}\)</span> 与 <span class="math inline">\(2^{16}\)</span> 之间的数 据此可以爆破出 <span class="math inline">\(k\)</span>，然后得出 p, q ，完成解密 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d = <span class="number">19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span></span><br><span class="line">c = <span class="number">5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span></span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;0x10001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">kphi = e*d-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(kphi)))</span><br><span class="line">p = <span class="number">0</span></span><br><span class="line">q = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">15</span>), <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">16</span>)):</span><br><span class="line">    <span class="keyword">if</span> kphi % k == <span class="number">0</span>:</span><br><span class="line">        p = prevprime(iroot(kphi//k, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">        q = nextprime(p)</span><br><span class="line">        <span class="keyword">if</span> (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*k == kphi:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>参考博客：<a href="https://blog.csdn.net/weixin_45441024/article/details/110351394">https://blog.csdn.net/weixin_45441024/article/details/110351394</a></p>
<h2 id="easyrsa">easyrsa</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Derivative</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">z=Fraction(<span class="number">1</span>,Derivative(arctan(p),p))-Fraction(<span class="number">1</span>,Derivative(arth(q),q))</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c,z,n)</span><br></pre></td></tr></table></figure>
<p>特别的地方就是引入了一个 z 不管，先尝试<a href="http://factordb.com/">爆破</a> n： <img data-src="https://img-blog.csdnimg.cn/20210423201754971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这 让我爆破出来了 然后就是常规的 RSA 操作 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">105909195259921349656664570904199242969110902804477734660927330311460997899731622163728968380757294196277263615386525795293086103142131020215128282050307177125962302515483190468569376643751587606016315185736245896434947691528567696271911398179288329609207435393579332931583829355558784305002360873458907029141</span></span><br><span class="line">q = <span class="number">144564833334456076455156647979862690498796694770100520405218930055633597500009574663803955456004439398699669751249623406199542605271188909145969364476344963078599240058180033000440459281558347909876143313940657252737586803051935392596519226965519859474501391969755712097119163926672753588797180811711004203301</span></span><br><span class="line">n = <span class="number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span></span><br><span class="line">c = <span class="number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>回过来我们揣测出题人引入 <span class="math inline">\(z\)</span> 的意图 首先 <span class="math display">\[
z = \frac{1}{\frac{d(arctan(p))}{dp}} + \frac{1}{\frac{d(arth(q))}{dq}}
\]</span> 又因为反正切函数和反双曲正切函数的导数分别为： <span class="math display">\[
\begin{cases}
\dfrac{d(arctan(x))}{dx} = \dfrac{1}{1 + x^{2}},\\
\dfrac{d(arth(x))}{dx} = \dfrac{1}{1 - x^{2}}
\end{cases}
\]</span> 所以 <span class="math display">\[
z = \frac{1}{\frac{1}{1 + p^{2}}} + \frac{1}{\frac{1}{1 - q^{2}}}=p^{2} + q^{2}
\]</span> 又因为 <span class="math inline">\(n = p*q\)</span>，我们可以求出 <span class="math inline">\(p + q\)</span> 再根据 <span class="math display">\[
\varphi = (p-1)*(q-1) = p*q - p - q + 1 = n - (p+q) + 1
\]</span> 可以求出 <span class="math inline">\(\varphi\)</span> 然后进行解密 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span></span><br><span class="line">c = <span class="number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span></span><br><span class="line">z = <span class="number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p_q = iroot(z + <span class="number">2</span>*n, <span class="number">2</span>)[<span class="number">0</span>] <span class="comment"># p+q</span></span><br><span class="line">phi = n - p_q + <span class="number">1</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：BJD{Advanced_mathematics_is_too_hard!!!} 高等数学太难了!!!（要不要来尝试数分高代呢）</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-24</title>
    <url>/uncategorized/2021/04/24/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-24</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-4-24">BUUCTF 每日打卡 2021-4-24</h1>
<h2 id="引言">引言</h2>
<p>今天社团招新 不知道最后会留下几个人 不过好像有各种 dl</p>
<h2 id="你能看出这是什么加密么">你能看出这是什么加密么</h2>
<p>附件内容如下： <img data-src="https://img-blog.csdnimg.cn/20210424212602804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这不一看就是 RSA 嘛 复制粘贴之后： <img data-src="https://img-blog.csdnimg.cn/20210424212711945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 嗯？ 怎么后面还有乱码？ 不管，先删了试试看能把也能解密 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(<span class="string">&#x27;0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">q = <span class="built_in">int</span>(<span class="string">&#x27;0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;0x10001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">c = <span class="built_in">int</span>(<span class="string">&#x27;0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/20210424212821672.png" alt="在这里插入图片描述" /> 嗯？ 一堆乱码 翻到最后发现： <img data-src="https://img-blog.csdnimg.cn/20210424212854763.png" alt="在这里插入图片描述" /> 啊这 结果就是：afctf{R54_|5_$0_$imp13}</p>
<h2 id="crypto-rsa3">crypto-rsa3</h2>
<p>普通的 RSA n 不长，可以直接<a href="http://factordb.com/">爆破</a> 结果为： <img data-src="https://img-blog.csdnimg.cn/20210424213134863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后解密即可 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683</span></span><br><span class="line">c = <span class="number">1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049</span></span><br><span class="line">p = <span class="number">13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179231</span></span><br><span class="line">q = <span class="number">13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179293</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：actf{p_and_q_should_not_be_so_close_in_value}</p>
<h2 id="结语">结语</h2>
<p>下午纳新坐了几个小时 风大天冷又拉肚子 早点休息了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-25</title>
    <url>/uncategorized/2021/04/25/week4/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-25</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-4-25">BUUCTF 每日打卡 2021-4-25</h1>
<h2 id="引言">引言</h2>
<p>每次机器学习都因为一些小错误搞了半天 我吐了</p>
<h2 id="鸡藕椒盐味">鸡藕椒盐味</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210425223305213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 什么玩意？ 直接找 <a href="https://www.dazhuanlan.com/2019/12/17/5df7e64bc03b2/">wp</a>（ 原来“鸡藕椒盐味”是“奇偶校验位”的谐音 然后用汉明码还原最后md5 <a href="https://blog.csdn.net/weixin_44017838/article/details/104889490">代码</a></p>
<h2 id="crypto-classic0">crypto-classic0</h2>
<p>拿到附件解压 <img data-src="https://img-blog.csdnimg.cn/2021042523210447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 嗯？ 没解压完？ 难道又是伪加密？ 用 010editor 看了之后，也没有伪加密的特征啊 里面还有个压缩包要密码 <img data-src="https://img-blog.csdnimg.cn/20210425232245660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 给了个提示 <img data-src="https://img-blog.csdnimg.cn/20210425232321333.png" alt="在这里插入图片描述" /> 还是摸不着头脑 只能找 <a href="https://blog.csdn.net/seven749/article/details/109606928">wp</a>（ 结果是个工具题 要用 ziperello 爆破 但是找了半天找不到都下载失败了（ 然后在 <a href="https://www.bilibili.com/video/BV1EK4y187WG?from=search&amp;seid=579101326676298682">b站上</a>，找到了这么一个<a href="https://ww.lanzous.com/icug02f">链接</a> 找到了一个代替的软件 <img data-src="https://img-blog.csdnimg.cn/20210425232722549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 爆破出密码 加密代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">25</span>] = ***</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		flag[i] -= <span class="number">3</span>;</span><br><span class="line">		flag[i] ^= <span class="number">0x7</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据加密代码写解密代码即可 代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">25</span>] = <span class="string">&quot;Ygvdmq[lYate[elghqvakl&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">        flag[i] ^= <span class="number">0x7</span>;</span><br><span class="line">		flag[i] += <span class="number">3</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果为：actf{my_naive_encrytion}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-12</title>
    <url>/uncategorized/2021/04/12/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-12</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-12">BUUCTF 每日打卡 2021-4-12</h2>
<h2 id="引言">引言</h2>
<p>周一整天都想睡 上周末的任务还没完成 哎。。。</p>
<h2 id="rsa5">RSA5</h2>
<p>附件给了 e = 65537 和一串的 n 和 c 猜想是广播攻击 但是这个 e..... 是不是有点大？ 参考 ctfwiki 的广播攻击 <img data-src="https://img-blog.csdnimg.cn/20210412234801450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 其中有一个条件：n 要互素 我寻思出题人不会蠢到给个漏洞吧 然后忽略了这个条件，直接莽 用 sagemath 封装好的 CRT(中国剩余定理)，算出 <span class="math inline">\(m^{e}\)</span>： <img data-src="https://img-blog.csdnimg.cn/20210412235137761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后一开根： <img data-src="https://img-blog.csdnimg.cn/20210412235205677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结果： <img data-src="https://img-blog.csdnimg.cn/20210412235221683.png" alt="在这里插入图片描述" /> 我人傻了 开出来不是整数（我囸） 看了别人的解法，才知道其中有两个 n 是不互素的（啊这） 这波是聪明反被聪明误 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">list_n = []</span><br><span class="line">list_c = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = f.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">        list_n.append(<span class="built_in">int</span>(line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">elif</span> line[<span class="number">0</span>] == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        list_c.append(<span class="built_in">int</span>(line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(list_n)</span><br><span class="line"><span class="built_in">print</span>(list_c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(list_n)):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(list_n[i], list_n[j]) != <span class="number">1</span>:</span><br><span class="line">            p = gmpy2.gcd(list_n[i], list_n[j])</span><br><span class="line">            k_p, k_q = i, j</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line"></span><br><span class="line">n = list_n[k_p]</span><br><span class="line">q = n//p</span><br><span class="line"><span class="built_in">print</span>(p, q)</span><br><span class="line">c = list_c[k_p]</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果：flag{abdcbe5fd94e23b3de429223ab9c2fdf}</p>
<h2 id="传感器">传感器</h2>
<p>之前吐槽过 见我 <a href="https://blog.csdn.net/weixin_52446095/article/details/115384023?spm=1001.2014.3001.5501">2021-4-1的博客</a></p>
<h2 id="结语">结语</h2>
<p>又还有一堆事没干 感觉开始滚雪球了啊 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-13</title>
    <url>/uncategorized/2021/04/13/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-13</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-13">BUUCTF 每日打卡 2021-4-13</h2>
<h2 id="引言">引言</h2>
<p>又是昏昏沉沉的一天</p>
<h2 id="密码学的心声">密码学的心声</h2>
<p>题目描述如下： <img data-src="https://img-blog.csdnimg.cn/20210413165527635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 附件内容： <img data-src="https://img-blog.csdnimg.cn/20210413160442691.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 从歌词可知，这是八进制加密，要用 ascii 码解密 尝试把全部内容八进制转十进制解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;111114157166145123145143165162151164171126145162171115165143150&#x27;</span></span><br><span class="line">h = <span class="built_in">int</span>(c, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(h))</span><br></pre></td></tr></table></figure>
<p>结果为：b'92a)99LgS8y+19NG92i6h' ？？？ 参考wp后得知要三个数字一组八进制转十进制解密 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;111114157166145123145143165162151164171126145162171115165143150&#x27;</span></span><br><span class="line">list_c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">3</span>):</span><br><span class="line">    list_c.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(c[i:i+<span class="number">3</span>], <span class="number">8</span>)))</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + m.join(list_c) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure> 结果为：flag{ILoveSecurityVeryMuch}</p>
<h2 id="rot">rot</h2>
<p>附件内容： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">破解下面的密文：</span><br><span class="line"><span class="number">83</span> <span class="number">89</span> <span class="number">78</span> <span class="number">84</span> <span class="number">45</span> <span class="number">86</span> <span class="number">96</span> <span class="number">45</span> <span class="number">115</span> <span class="number">121</span> <span class="number">110</span> <span class="number">116</span> <span class="number">136</span> <span class="number">132</span> <span class="number">132</span> <span class="number">132</span> <span class="number">108</span> <span class="number">128</span> <span class="number">117</span> <span class="number">118</span> <span class="number">134</span> <span class="number">110</span> <span class="number">123</span> <span class="number">111</span> <span class="number">110</span> <span class="number">127</span> <span class="number">108</span> <span class="number">112</span> <span class="number">124</span> <span class="number">122</span> <span class="number">108</span> <span class="number">118</span> <span class="number">128</span> <span class="number">108</span> <span class="number">131</span> <span class="number">114</span> <span class="number">127</span> <span class="number">134</span> <span class="number">108</span> <span class="number">116</span> <span class="number">124</span> <span class="number">124</span> <span class="number">113</span> <span class="number">108</span> <span class="number">76</span> <span class="number">76</span> <span class="number">76</span> <span class="number">76</span> <span class="number">138</span> <span class="number">23</span> <span class="number">90</span> <span class="number">81</span> <span class="number">66</span> <span class="number">71</span> <span class="number">64</span> <span class="number">69</span> <span class="number">114</span> <span class="number">65</span> <span class="number">112</span> <span class="number">64</span> <span class="number">66</span> <span class="number">63</span> <span class="number">69</span> <span class="number">61</span> <span class="number">70</span> <span class="number">114</span> <span class="number">62</span> <span class="number">66</span> <span class="number">61</span> <span class="number">62</span> <span class="number">69</span> <span class="number">67</span> <span class="number">70</span> <span class="number">63</span> <span class="number">61</span> <span class="number">110</span> <span class="number">110</span> <span class="number">112</span> <span class="number">64</span> <span class="number">68</span> <span class="number">62</span> <span class="number">70</span> <span class="number">61</span> <span class="number">112</span> <span class="number">111</span> <span class="number">112</span></span><br><span class="line">flag格式flag&#123;&#125;</span><br></pre></td></tr></table></figure> 看到题目知道是 rot 移位加密 尝试根据 flag 的格式进行移位 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#x27;</span></span><br><span class="line">list_c = c.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_c)</span><br><span class="line">k = list_c[<span class="number">0</span>]</span><br><span class="line">list_m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_c)):</span><br><span class="line">    list_c[i] = <span class="built_in">chr</span>(<span class="built_in">int</span>(list_c[i]) + <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>) - <span class="built_in">int</span>(k))</span><br><span class="line">    list_m.append(<span class="built_in">ord</span>(list_c[i]))</span><br><span class="line"><span class="built_in">print</span>(list_m)</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m.join(list_c))</span><br></pre></td></tr></table></figure> 结果为：flag@is@ ____*mdUZSX TSURXPY QUPQXVYRPSWQYP</p>
<p>flag is '一串乱码' ____ '一串乱码' 盯着这串字符琢磨了半天 最后求助wp，但是只告诉我们会得到一串带 "?" 的 flag，和一串 MD5 具体怎么得到的讲的很含糊 后来受 dl 指点，尝试将前四位向大写的 “FLAG” 移位 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#x27;</span></span><br><span class="line">list_c = c.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_c)</span><br><span class="line">k = list_c[<span class="number">0</span>]</span><br><span class="line">list_m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_c)):</span><br><span class="line">    list_c[i] = <span class="built_in">chr</span>(<span class="built_in">int</span>(list_c[i]) + <span class="built_in">ord</span>(<span class="string">&#x27;F&#x27;</span>) - <span class="built_in">int</span>(k))</span><br><span class="line">    list_m.append(<span class="built_in">ord</span>(list_c[i]))</span><br><span class="line"><span class="built_in">print</span>(list_m)</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m.join(list_c))</span><br></pre></td></tr></table></figure> 结果为： FLAG IS flag{www_shiyanbar_com_is_very_good_????} MD5:38e4c352809e150186920aac37190cbc （移位的时候中间产生了换行符） 这波啊，这波出题人在第五层 拿 MD5 <a href="https://www.cmd5.com/">在线解密</a>： <img data-src="https://img-blog.csdnimg.cn/20210413171636859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这（这也在你的计算之中吗？出题人）</p>
<p>容易想到要用哈希碰撞 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;flag&#123;www_shiyanbar_com_is_very_good_????&#125;&#x27;</span></span><br><span class="line">md_5 = <span class="string">&#x27;38e4c352809e150186920aac37190cbc&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">                k = flag.replace(<span class="string">&#x27;????&#x27;</span>, <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(s) + <span class="built_in">chr</span>(t))</span><br><span class="line">                x = hashlib.md5(k.encode()).hexdigest()</span><br><span class="line">                <span class="keyword">if</span> x == md_5:</span><br><span class="line">                    <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure> 根据 ascii 码表减少了循环次数 跑了几分钟结果出来了：flag{www_shiyanbar_com_is_very_good_<span class="citation" data-cites="8Mu">@8Mu</span>}</p>
<h2 id="结语">结语</h2>
<p>晚上还有机器学习 溜了溜了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-14</title>
    <url>/uncategorized/2021/04/14/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-14</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-14">BUUCTF 每日打卡 2021-4-14</h2>
<h2 id="引言">引言</h2>
<p>今日无战事</p>
<h2 id="这是base">这是base??</h2>
<p>附件内容： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>:&#123;<span class="number">0</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;O&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;y&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;U&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;V&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;H&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;I&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;h&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="number">41</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;S&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">61</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;+&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;/&#x27;</span>, <span class="number">64</span>: <span class="string">&#x27;=&#x27;</span>&#125;</span><br><span class="line">chipertext:</span><br><span class="line">FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</span><br></pre></td></tr></table></figure> 熟悉 base64 加密原理的容易解出这题 这里不再赘述 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict = </span></span><br><span class="line"><span class="comment"># chipertext = </span></span><br><span class="line">list_d = []</span><br><span class="line"><span class="keyword">for</span> key,values <span class="keyword">in</span>  <span class="built_in">dict</span>.items():</span><br><span class="line">    list_d.append(values)</span><br><span class="line"><span class="built_in">print</span>(list_d)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chipertext)//<span class="number">4</span>):</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        tmp += <span class="built_in">bin</span>(list_d.index(chipertext[i*<span class="number">4</span>+j])).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(tmp[k*<span class="number">8</span>:k*<span class="number">8</span>+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>得到 flag：BJD{D0_Y0u_kNoW_Th1s_b4se_map}</p>
<h2 id="keyboard">Keyboard</h2>
<p>看到题目就知道是键盘密码 附件内容：ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee 键盘密码有两种，一种是电脑键盘，另一种是手机键盘。 每段都是四个及以下字符构成，猜想对应手机键盘上按键对应的第几个字母 再看里面出现的的字母只有 “wertyui” 对应九宫格 <img data-src="https://img-blog.csdnimg.cn/20210414222718112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="string">&#x27;ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee&#x27;</span></span><br><span class="line">list_m = m.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">dict_key1 = &#123;<span class="string">&#x27;w&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;u&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">8</span>&#125;</span><br><span class="line">dict_key2 = &#123;<span class="number">2</span>: <span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;def&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;ghi&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;jkl&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;mno&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;pqrs&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;tuv&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;wxyz&#x27;</span>&#125;</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> list_m:</span><br><span class="line">    i = dict_key1[s[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">    flag += dict_key2[i][<span class="built_in">len</span>(s)-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></p>
<h2 id="这是什么">这是什么</h2>
<p>题目描述：小明是一个软件专业的高材生，但是老师布置的这次的作业似乎不怎么靠谱，因为他们老师以前是学物理的！喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。你快帮小明看一下这题，小明准备好了一箱子辣条。 注意：得到的 flag 请包上 flag{} 提交 附件给了一个 apk 文件 第一反应，把它装到模拟器上 <img data-src="https://img-blog.csdnimg.cn/20210414224014231.png" alt="在这里插入图片描述" /> 啊这 然后想通过反编译来得到内容 参考文章：<a href="https://www.zhihu.com/question/29370382">https://www.zhihu.com/question/29370382</a> 结果 apktool 反编译出来只有这个： <img data-src="https://img-blog.csdnimg.cn/20210414224132305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 和参考文章里所描述的 会反编译成 smali 文件 不符 求助 wp 结果只要把文件后缀改成 .text 就行了 回想题目描述：“喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。” 恍然大悟（不过为什么一定是 .text？） <img data-src="https://img-blog.csdnimg.cn/20210414224341382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 这是 jsfuck 编码（对应题目“这是什么”） 然后拿去<a href="http://codertab.com/JsUnFuck">在线解码</a> 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210414224648589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-15</title>
    <url>/uncategorized/2021/04/15/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-15</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-15">BUUCTF 每日打卡 2021-4-15</h2>
<h2 id="引言">引言</h2>
<p>今天也是元气满满的一天（打哈欠）</p>
<h2 id="childrsa">childRSA</h2>
<p>题目给了 n和c 照例碰运气<a href="http://factordb.com/">爆破 n</a>： <img data-src="https://img-blog.csdnimg.cn/20210415214932298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这 真让我爆破出来了 然后就是 RSA 常规操作 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p, q, c, n</span></span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;0x10001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果为：NCTF{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}</p>
<h2 id="bbbbbbrsa">bbbbbbrsa</h2>
<p>附件 python2 加密代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode <span class="keyword">as</span> b32encode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,gcd,iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> a2b_hex,b2a_hex</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;******************************&quot;</span></span><br><span class="line"></span><br><span class="line">nbit = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">p = getPrime(nbit)</span><br><span class="line">q = getPrime(nbit)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> p</span><br><span class="line"><span class="built_in">print</span> n</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = random.randint(<span class="number">50000</span>,<span class="number">70000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="keyword">if</span> gcd(e,phi) == <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		e -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(<span class="built_in">int</span>(b2a_hex(flag),<span class="number">16</span>),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> b32encode(<span class="built_in">str</span>(c))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2373740699529364991763589324200093466206785561836101840381622237225512234632</span></span><br></pre></td></tr></table></figure> 这个注释就很魔性 一猜就知道是 c 另一个附件内容为： p = 177077389675257695042507998165006460849 n = 37421829509887796274897162249367329400988647145613325367337968063341372726061 c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM</p>
<p>根据加密代码，c 经过了 base64 加密并且倒序输出了 为了保险起见，还是先解码给出的 c 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">base64_bytes = c.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">message_bytes = base64.b64decode(base64_bytes)</span><br><span class="line">message = message_bytes.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line">c = <span class="built_in">int</span>(message)</span><br></pre></td></tr></table></figure> c = 2373740699529364991763589324200093466206785561836101840381622237225512234632 啊这 跟注释一模一样 解密代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">177077389675257695042507998165006460849</span></span><br><span class="line">n = <span class="number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50000</span>, <span class="number">70000</span>):</span><br><span class="line">    <span class="keyword">if</span> math.gcd(e, phi) == <span class="number">1</span>:</span><br><span class="line">        d = inverse(e, phi)</span><br><span class="line">        m = <span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">in</span> m <span class="keyword">and</span> <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure> 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210415215614224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>啊。。。好像也没什么好说的 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-16</title>
    <url>/uncategorized/2021/04/16/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-16</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-16">BUUCTF 每日打卡 2021-4-16</h2>
<h2 id="引言">引言</h2>
<p>今天是个值得纪念的日子 12-4 出货了 瞬间感觉心情舒畅</p>
<h2 id="古典密码知多少">古典密码知多少</h2>
<p>附件如下： <img data-src="https://img-blog.csdnimg.cn/2021041621560778.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 其中，蓝色部分为猪圈密码： <img data-src="https://img-blog.csdnimg.cn/20210416215729259.png" alt="在这里插入图片描述" /></p>
<p>橙色部分为圣堂武士密码： <img data-src="https://img-blog.csdnimg.cn/20210416215646348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 黑色部分为<a href="https://blog.csdn.net/MikeCoke/article/details/105533829">银河密码</a>： <img data-src="https://img-blog.csdnimg.cn/20210416215825165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 解密结果如下： <img data-src="https://img-blog.csdnimg.cn/2021041621584675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 下方还有一段话，提示我们要进行栅栏解密，而且结果均为大写字母 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;FGCPFLIRTUASYON&#x27;</span></span><br><span class="line">factors = [fac <span class="keyword">for</span> fac <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(s)) <span class="keyword">if</span> <span class="built_in">len</span>(s)%fac == <span class="number">0</span>] <span class="comment">#取得密文长度的所有因数</span></span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> factors:</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fac): <span class="comment">#按一定的步长取几组字符，并连接起来，这里组数就等于步长数</span></span><br><span class="line">        flag += s[i::fac]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(fac)+<span class="string">&#x27;栏：&#x27;</span>+flag)</span><br></pre></td></tr></table></figure> 参考博客：<a href="https://www.cnblogs.com/lnjoy/p/railfence.html">https://www.cnblogs.com/lnjoy/p/railfence.html</a> 结果为：FLAGISCRYPTOFUN 最后应该提交 flag{CRYPTOFUN}</p>
<h2 id="rsa">RSA</h2>
<p>加密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span>(e&lt;<span class="number">100000</span>)</span><br><span class="line">n=p*q</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span> c,n</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(<span class="number">294</span>,e,n)</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">m=bytes_to_long(<span class="string">&quot;BJD&quot;</span>*<span class="number">32</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span> c,n</span><br></pre></td></tr></table></figure> 将上半部分的输出记为 n1, c1，pow(294,e,n) 记为 k；将下半部分的输出记为 n2, c2 容易看出 <span class="math inline">\((n1, n2) = q\)</span> ，据此可以求出 p,q 由于 e&lt;100000 并且知道 pow(294,e,n) 和 pow(bytes_to_long("BJD"*32),e,n2)，所以可以遍历 e 来求出 e 剩下就是 RSA 的常规操作了 解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span></span><br><span class="line">n1 = <span class="number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span></span><br><span class="line">c2 = <span class="number">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span></span><br><span class="line">n2 = <span class="number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span></span><br><span class="line">k = <span class="number">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">bytes</span>((<span class="string">&quot;BJD&quot;</span>*<span class="number">32</span>).encode())</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="number">294</span>, e, n1) == k <span class="keyword">and</span> <span class="built_in">pow</span>(bytes_to_long(m), e, n2) == c2:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">q = math.gcd(n1, n2)</span><br><span class="line">p1 = n1 // q</span><br><span class="line">phi = (p1-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, d, n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果为：BJD{p_is_common_divisor}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-17</title>
    <url>/uncategorized/2021/04/17/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-17</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-4-17">BUUCTF 每日打卡 2021-4-17</h1>
<h2 id="引言">引言</h2>
<p>今日无事</p>
<h2 id="佛说只能四天">佛说：只能四天</h2>
<p>附件给了一串。。。乱码？ 难不成是乱码题？ 尊即寂修我劫修如婆愍闍嚤婆莊愍耨羅嚴是喼婆斯吶眾喼修迦慧迦嚩喼斯願嚤摩隸所迦摩吽即塞願修咒莊波斯訶喃壽祗僧若即亦嘇蜜迦須色喼羅囉咒諦若陀喃慧愍夷羅波若劫蜜斯哆咒塞隸蜜波哆咤慧聞亦吽念彌諸嘚嚴諦咒陀叻咤叻諦缽隸祗婆諦嚩阿兜宣囉吽色缽吶諸劫婆咤咤喼愍尊寂色缽嘚闍兜阿婆若叻般壽聞彌即念若降宣空陀壽愍嚤亦喼寂僧迦色莊壽吽哆尊僧喼喃壽嘚兜我空所吶般所即諸吽薩咤諸莊囉隸般咤色空咤亦喃亦色兜哆嘇亦隸空闍修眾哆咒婆菩迦壽薩塞宣嚩缽寂夷摩所修囉菩阿伏嘚宣嚩薩塞菩波吶波菩哆若慧愍蜜訶壽色咒兜摩缽摩諦劫諸陀即壽所波咤聞如訶摩壽宣咤彌即嚩蜜叻劫嘇缽所摩闍壽波壽劫修訶如嚩嘇囉薩色嚤薩壽修闍夷闍是壽僧劫祗蜜嚴嚩我若空伏諦念降若心吽咤隸嘚耨缽伏吽色寂喃喼吽壽夷若心眾祗喃慧嚴即聞空僧須夷嚴叻心願哆波隸塞吶心須嘇摩咤壽嘚吶夷亦心亦喃若咒壽亦壽囑囑 一脸懵逼 只能找 <a href="https://blog.csdn.net/weixin_45883223/article/details/105193948">wp</a> 题目有一条提示：圣经分为《旧约全书》和《新约全书》 原来是叫<a href="http://hi.pcmoe.net/buddha.html">新约佛论禅加密</a>： <img data-src="https://img-blog.csdnimg.cn/20210417222025611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 解密结果是一串社会主义核心价值观 又懵逼了。。。 原来是叫<a href="http://ctf.ssleye.com/cvencode.html">核心价值观编码</a>。。。 解密结果： <img data-src="https://img-blog.csdnimg.cn/20210417222137380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 解码结果结尾是 “doyouknowfence” 还要<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏解密</a>。。。 解密结果： <img data-src="https://img-blog.csdnimg.cn/20210417222335279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结尾出现了 “doyouknowCaesar” 结合提示：凯撒不是最后一步，by the way，凯撒为什么叫做凯撒？ 还要<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒解密</a>。。。 而凯撒密码最初位移是 3 位。。。（凯撒为什么叫做凯撒） 解密结果： <img data-src="https://img-blog.csdnimg.cn/20210417222554786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 最后得到的结果还要 <a href="https://www.qqxiuzi.cn/bianma/base.php">base32 解码</a>。。。 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210417222706775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 老千层饼了。。。 如果不是有 wp，我想破脑袋也不可能想出来。。。</p>
<h2 id="天干地支甲子">天干地支+甲子</h2>
<p>不禁想起了那题 <a href="https://blog.csdn.net/weixin_52446095/article/details/115384023?spm=1001.2014.3001">传统知识+古典密码</a> 不过这题简单得多，只要找到对应的数字再 +60 用 ascii 码 转成字符就行</p>
<p>得到得字符串用MRCTF{}包裹 一天Eki收到了一封来自Sndav的信，但是他有点迷希望您来解决一下 甲戌 11 甲寅 51 甲寅 51 癸卯 40 己酉 46 甲寅 51 辛丑 38</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">11</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">40</span>, <span class="number">46</span>, <span class="number">51</span>, <span class="number">38</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i + <span class="number">60</span>) <span class="keyword">for</span> i <span class="keyword">in</span> a))</span><br></pre></td></tr></table></figure>
<p>结果为：Goodjob</p>
<h2 id="结语">结语</h2>
<p>明天没有训练 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-18</title>
    <url>/uncategorized/2021/04/18/week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-18</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-18">BUUCTF 每日打卡 2021-4-18</h2>
<h2 id="引言">引言</h2>
<p>老师晚上将近十点发作业就离谱 你永远无法到达完成作业的真实</p>
<h2 id="vigenere">vigenere</h2>
<p>看题目就知道是<strong>维吉尼亚密码</strong> 虽然清楚加密原理，但是懒得思考了 找到的解密网站都要提供 key 参考 <a href="https://blog.csdn.net/ao52426055/article/details/109304646">wp</a> 直接<a href="https://www.guballa.de/vigenere-solver">爆破</a> <img data-src="https://img-blog.csdnimg.cn/202104182239180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210418223942776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 用下划线连接单词即为 flag</p>
<h2 id="rsa_output">rsa_output</h2>
<p>看到附件内容，感觉在哪见过 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>,<span class="number">2767</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>,<span class="number">3659</span>&#125;</span><br><span class="line"></span><br><span class="line">message1=<span class="number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span></span><br><span class="line"></span><br><span class="line">message2=<span class="number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span></span><br></pre></td></tr></table></figure> 打开 CTFwiki 找 发现是共模攻击 <img data-src="https://img-blog.csdnimg.cn/20210418224627991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 附件格式和下面给的例子完全一样（啊这） 只要复制粘贴然后修改一下就行 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span></span><br><span class="line">e1 = <span class="number">2767</span></span><br><span class="line">e2 = <span class="number">3659</span></span><br><span class="line">message1=<span class="number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span></span><br><span class="line">message2=<span class="number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span></span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    message1 = gmpy2.invert(message1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    message2 = gmpy2.invert(message2, n)</span><br><span class="line">plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plain))</span><br></pre></td></tr></table></figure>
<p>结果为：BJD{r3a_C0mmoN_moD@_4ttack}</p>
<h2 id="keyboard">keyboard</h2>
<p>又是 keyboard。。。 键盘密码附件内容： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">得到的flag用</span><br><span class="line">MRCTF&#123;xxxxxx&#125;形式上叫</span><br><span class="line">都为小写字母</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">666</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">444</span></span><br><span class="line"><span class="number">555</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="number">666</span></span><br><span class="line"><span class="number">66</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure> 很明显是手机键盘加密 数字对应按键，长度对应第几个字母 <img data-src="https://img-blog.csdnimg.cn/20210418225113384.png" alt="在这里插入图片描述" /> 结果为： <img data-src="https://img-blog.csdnimg.cn/20210418225431395.png" alt="在这里插入图片描述" /> 但不知道为什么正确的 flag 是 “mobiephone”（因为单词拼错了？）。。。</p>
<h2 id="结语">结语</h2>
<p>8说了 写作业 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-27</title>
    <url>/uncategorized/2021/04/27/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-27</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-27">BUUCTF 每日打卡 2021-4-27</h2>
<h2 id="引言">引言</h2>
<p>明天数分考试 我吐了</p>
<h2 id="rsa">RSA</h2>
<p>附件如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=(((y%x)**<span class="number">5</span>)%(x%y))**<span class="number">2019</span>+y**<span class="number">316</span>+(y+<span class="number">1</span>)/x</span><br><span class="line">p=next_prime(z*x*y)</span><br><span class="line">q=next_prime(z)</span><br><span class="line">A =  <span class="number">2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724</span></span><br><span class="line">n =  <span class="number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span></span><br><span class="line">c =  <span class="number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span></span><br></pre></td></tr></table></figure>
<p>拿到 n ，先<a href="http://factordb.com/">爆破</a>： <img data-src="https://img-blog.csdnimg.cn/20210427233142596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到 p,q 但是没给 e 没想法。。。 找 <a href="https://paper.seebug.org/1059/#rsa">wp</a> 爆破出 e=65537 啊这。。。 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569</span></span><br><span class="line">q = <span class="number">139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183</span></span><br><span class="line">n =  <span class="number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span></span><br><span class="line">c =  <span class="number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>
<p>（wp 爆破 x,y，我直接爆破 p,q，结果是一样的。嗯，就这样）</p>
<h2 id="结语">结语</h2>
<p>明天考试，希望及格 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-26</title>
    <url>/uncategorized/2021/04/26/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-26</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-26">BUUCTF 每日打卡 2021-4-26</h2>
<h2 id="引言">引言</h2>
<p>一道 babyRSA 搞了一晚上[捂脸] 因为一些 sb 错误</p>
<h2 id="babyrsa">babyRSA</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myGetPrime</span>():</span></span><br><span class="line">    A= getPrime(<span class="number">513</span>)</span><br><span class="line">    <span class="built_in">print</span>(A)</span><br><span class="line">    B=A-random.randint(<span class="number">1e3</span>,<span class="number">1e5</span>)</span><br><span class="line">    <span class="built_in">print</span>(B)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextPrime((B!)%A)</span><br><span class="line">p=myGetPrime()</span><br><span class="line"><span class="comment">#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span></span><br><span class="line"><span class="comment">#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span></span><br><span class="line"></span><br><span class="line">q=myGetPrime()</span><br><span class="line"><span class="comment">#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span></span><br><span class="line"><span class="comment">#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span></span><br><span class="line"></span><br><span class="line">r=myGetPrime()</span><br><span class="line"></span><br><span class="line">n=p*q*r</span><br><span class="line"><span class="comment">#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span></span><br><span class="line">c=<span class="built_in">pow</span>(flag,e,n)</span><br><span class="line"><span class="comment">#e=0x1001</span></span><br><span class="line"><span class="comment">#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span></span><br><span class="line"><span class="comment">#so,what is the flag?</span></span><br></pre></td></tr></table></figure>
<p>三元的 RSA 就没解出来过[捂脸] 参考博客：<a href="https://www.cnblogs.com/jane315/p/13805724.html">https://www.cnblogs.com/jane315/p/13805724.html</a> 看到阶乘，没想到威尔逊定理 p,q,r = nextPrime((B!)%A) 先上威尔逊定理： 若 <span class="math inline">\(p\)</span> 是素数，则 <span class="math display">\[
(p-1)! \equiv -1 \space mod \space p
\]</span> 有加密代码可得 <span class="math inline">\(A\)</span> 是素数，且 <span class="math inline">\(B\)</span> 小于 <span class="math inline">\(A\)</span> 方法一： <span class="math display">\[
p(B+1)(B+2)\cdots(A-1) \equiv (A-1)! \equiv -1 \space mod \space A
\]</span> 即 <span class="math display">\[
p[-(B+1)(B+2)\cdots(A-1)]\equiv 1 \space mod \space A
\]</span> 即 <span class="math inline">\(p\)</span> 是 <span class="math inline">\(-(B+1)(B+2)\cdots(A-1)\)</span> 模 <span class="math inline">\(A\)</span> 的逆元 求 <span class="math inline">\(p,q\)</span> 的函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">a, b</span>):</span> <span class="comment"># 求p,q</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b+<span class="number">1</span>, a):</span><br><span class="line">        k *= i</span><br><span class="line">        k %= a</span><br><span class="line">    <span class="keyword">return</span> next_prime((-inverse(k, a))%a)</span><br></pre></td></tr></table></figure>
<p>方法二： 利用威尔逊定理的推论： <span class="math display">\[
(p-2)! \equiv 1 \space mod \space p
\]</span> 推理过程如下： <img data-src="https://img-blog.csdnimg.cn/20210426233101517.png" alt="在这里插入图片描述" /> 来源于 <a href="https://zh.wikipedia.org/wiki/%E5%A8%81%E5%B0%94%E9%80%8A%E5%AE%9A%E7%90%86">wiki</a> 求 <span class="math inline">\(p,q\)</span> 的函数如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">a, b</span>):</span> <span class="comment"># 求p,q</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b+<span class="number">1</span>, a-<span class="number">1</span>):</span><br><span class="line">        k *= i</span><br><span class="line">        k %= a</span><br><span class="line">    <span class="keyword">return</span> next_prime(inverse(k, a))</span><br></pre></td></tr></table></figure> 解密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">A1 = <span class="number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span></span><br><span class="line">B1 = <span class="number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span></span><br><span class="line">A2 = <span class="number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span></span><br><span class="line">B2 = <span class="number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span></span><br><span class="line">n = <span class="number">85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span></span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;0x1001&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">c = <span class="number">75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">a, b</span>):</span> <span class="comment"># 求p,q</span></span><br><span class="line"></span><br><span class="line">p = get(A1, B1)</span><br><span class="line">q = get(A2, B2)</span><br><span class="line">r = (n // p) // q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> get 函数忘记加 next_prime 然后搞了半天[捂脸]</p>
<h2 id="结语">结语</h2>
<p>早点睡了 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-28</title>
    <url>/uncategorized/2021/04/28/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-28</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-28">BUUCTF 每日打卡 2021-4-28</h2>
<h2 id="引言">引言</h2>
<p>数分考完了 明天蓝帽杯</p>
<h2 id="可怜的rsa">可怜的RSA</h2>
<p>附件给了公钥： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/<span class="number">4</span></span><br><span class="line">3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv</span><br><span class="line">tcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59</span><br><span class="line">NeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT</span><br><span class="line">+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt</span><br><span class="line">Si8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM</span><br><span class="line">5q5TAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure> 提取公钥代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public.key&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    <span class="built_in">print</span>(key.n)</span><br><span class="line">    <span class="built_in">print</span>(key.e)</span><br></pre></td></tr></table></figure>
<p>得到 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br></pre></td></tr></table></figure> 然后<a href="http://factordb.com/">爆破</a>就可以求出 p,q <img data-src="https://img-blog.csdnimg.cn/20210428222452204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">3133337</span></span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br></pre></td></tr></table></figure></p>
<p>附件密文如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/<span class="number">6</span>/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==</span><br></pre></td></tr></table></figure> 容易发现经过了 base64 加密 尝试解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p,q,n,e</span></span><br><span class="line">c = bytes_to_long(base64.b64decode(<span class="string">b&#x27;GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==&#x27;</span>))</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>发现是一堆乱码 <img data-src="https://img-blog.csdnimg.cn/20210428222655128.png" alt="在这里插入图片描述" /> 嗯？ 最后求助 <a href="https://www.cnblogs.com/vict0r/p/13764404.html">wp</a> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p,q,n,e</span></span><br><span class="line">c = base64.b64decode(<span class="string">b&#x27;GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==&#x27;</span>)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">key_info = RSA.construct((n, e, d, p, q))</span><br><span class="line">key = RSA.importKey(key_info.exportKey())</span><br><span class="line">key = PKCS1_OAEP.new(key)</span><br><span class="line"><span class="built_in">print</span>(key.decrypt(c))</span><br></pre></td></tr></table></figure>
<p>结果为：afctf{R54_|5_$0_B0rin9} 啊这 多西得？ 我们知道， Crypto.Util 包中 long_to_bytes 方法是将字符串转化成二进制然后转化成十进制 示例如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(bytes_to_long(<span class="string">b&#x27;AB&#x27;</span>))</span><br><span class="line"><span class="number">16706</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)))</span><br><span class="line"><span class="number">0b1000001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)))</span><br><span class="line"><span class="number">0b1000010</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)))</span><br><span class="line"><span class="number">0x41</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)))</span><br><span class="line"><span class="number">0x42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;4142&#x27;</span>,<span class="number">16</span>))</span><br><span class="line"><span class="number">16706</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;100000101000010&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="number">16706</span></span><br></pre></td></tr></table></figure> 然后我又找了 Crypto.Cipher 包中的 decrypt 方法<a href="https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/Cipher/PKCS1_OAEP.py">源码</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, ciphertext</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Decrypt a message with PKCS#1 OAEP.</span></span><br><span class="line"><span class="string">    :param ciphertext: The encrypted message.</span></span><br><span class="line"><span class="string">    :type ciphertext: bytes/bytearray/memoryview</span></span><br><span class="line"><span class="string">    :returns: The original message (plaintext).</span></span><br><span class="line"><span class="string">    :rtype: bytes</span></span><br><span class="line"><span class="string">    :raises ValueError:</span></span><br><span class="line"><span class="string">        if the ciphertext has the wrong length, or if decryption</span></span><br><span class="line"><span class="string">        fails the integrity check (in which case, the decryption</span></span><br><span class="line"><span class="string">        key is probably wrong).</span></span><br><span class="line"><span class="string">    :raises TypeError:</span></span><br><span class="line"><span class="string">        if the RSA key has no private half (i.e. you are trying</span></span><br><span class="line"><span class="string">        to decrypt using a public key).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># See 7.1.2 in RFC3447</span></span><br><span class="line">    modBits = Crypto.Util.number.size(self._key.n)</span><br><span class="line">    k = ceil_div(modBits,<span class="number">8</span>) <span class="comment"># Convert from bits to bytes</span></span><br><span class="line">    hLen = self._hashObj.digest_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 1b and 1c</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ciphertext) != k <span class="keyword">or</span> k&lt;hLen+<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Ciphertext with incorrect length.&quot;</span>)</span><br><span class="line">    <span class="comment"># Step 2a (O2SIP)</span></span><br><span class="line">    ct_int = bytes_to_long(ciphertext)</span><br><span class="line">    <span class="comment"># Step 2b (RSADP)</span></span><br><span class="line">    m_int = self._key._decrypt(ct_int)</span><br><span class="line">    <span class="comment"># Complete step 2c (I2OSP)</span></span><br><span class="line">    em = long_to_bytes(m_int, k)</span><br><span class="line">    <span class="comment"># Step 3a</span></span><br><span class="line">    lHash = self._hashObj.new(self._label).digest()</span><br><span class="line">    <span class="comment"># Step 3b</span></span><br><span class="line">    y = em[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># y must be 0, but we MUST NOT check it here in order not to</span></span><br><span class="line">    <span class="comment"># allow attacks like Manger&#x27;s (http://dl.acm.org/citation.cfm?id=704143)</span></span><br><span class="line">    maskedSeed = em[<span class="number">1</span>:hLen+<span class="number">1</span>]</span><br><span class="line">    maskedDB = em[hLen+<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># Step 3c</span></span><br><span class="line">    seedMask = self._mgf(maskedDB, hLen)</span><br><span class="line">    <span class="comment"># Step 3d</span></span><br><span class="line">    seed = strxor(maskedSeed, seedMask)</span><br><span class="line">    <span class="comment"># Step 3e</span></span><br><span class="line">    dbMask = self._mgf(seed, k-hLen-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Step 3f</span></span><br><span class="line">    db = strxor(maskedDB, dbMask)</span><br><span class="line">    <span class="comment"># Step 3g</span></span><br><span class="line">    one_pos = hLen + db[hLen:].find(<span class="string">b&#x27;\x01&#x27;</span>)</span><br><span class="line">    lHash1 = db[:hLen]</span><br><span class="line">    invalid = bord(y) | <span class="built_in">int</span>(one_pos &lt; hLen)</span><br><span class="line">    hash_compare = strxor(lHash1, lHash)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> hash_compare:</span><br><span class="line">        invalid |= bord(x)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> db[hLen:one_pos]:</span><br><span class="line">        invalid |= bord(x)</span><br><span class="line">    <span class="keyword">if</span> invalid != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Incorrect decryption.&quot;</span>)</span><br><span class="line">    <span class="comment"># Step 4</span></span><br><span class="line">    <span class="keyword">return</span> db[one_pos + <span class="number">1</span>:]</span><br></pre></td></tr></table></figure>
<p>其中也有 long_to_bytes 和 bytes_to_long 方法，原理类似（大概） 因为举例比较麻烦，所以就没有尝试 浏览了一下源码（因为不怎么看得懂），发现里面有 hash, xor 之类的字眼 而且看注释内容（也可见于<a href="https://pycryptodome.readthedocs.io/en/latest/src/cipher/oaep.html">官方文档</a>） 发现它对密文长度也做了要求，如果密文长度错误会报错 ValueError 就很迷。。。</p>
<p>那么如果碰到了该怎么办？ 那就先尝试第一种代码，再尝试第二种代码咯[扶额]</p>
<h2 id="single">Single</h2>
<p>加密代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;Plain.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;Cipher.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	map&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; f;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">26</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">		arr[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">random_shuffle</span>(arr,arr+<span class="number">26</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">		f[<span class="string">&#x27;a&#x27;</span>+i]=<span class="string">&#x27;a&#x27;</span>+arr[i];</span><br><span class="line">		f[<span class="string">&#x27;A&#x27;</span>+i]=<span class="string">&#x27;A&#x27;</span>+arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span>((ch=<span class="built_in">getchar</span>())!=EOF)&#123;</span><br><span class="line">		<span class="keyword">if</span>(f.<span class="built_in">count</span>(ch))&#123;</span><br><span class="line">			<span class="built_in">putchar</span>(f[ch]);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">putchar</span>(ch);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这学期刚学 C 语言 大致看了一下 大概就是给明文随机移位了一下 密文如下： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Jmqrida rva <span class="title">Lfmz</span> <span class="params">(JRL)</span> eu m uqajemf seny xl enlxdomrexn uajiderc jxoqarerexnu. Rvada mda rvdaa jxooxn rcqau xl JRLu: Paxqmdyc, Mrrmjs-Yalanja mny oekay.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Paxqmdyc-urcfa JRLu vmu m jxiqfa xl giaurexnu (rmusu) en dmnza xl jmrazxdeau. Lxd akmoqfa, Wab, Lxdanuej, Jdcqrx, Benmdc xd uxoarvenz afua. Ramo jmn zmen uxoa qxenru lxd atadc uxftay rmus. Oxda qxenru lxd oxda jxoqfejmray rmusu iuimffc. Rva nakr rmus en jvmen jmn ba xqanay xnfc mlrad uxoa ramo uxfta qdatexiu rmus. Rvan rva zmoa reoa eu xtad uio xl qxenru uvxwu cxi m JRL wenad. Lmoxiu akmoqfa xl uijv JRL eu Yaljxn JRL gimfu.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Waff, mrrmjs-yalanja eu mnxrvad enradaurenz seny xl jxoqarerexnu. Vada atadc ramo vmu xwn narwxds(xd xnfc xna vxur) werv tifnmdmbfa uadtejau. Cxid ramo vmu reoa lxd qmrjvenz cxid uadtejau mny yatafxqenz akqfxeru iuimffc. Ux, rvan xdzmnehadu jxnnajru qmdrejeqmnru xl jxoqarerexn mny rva wmdzmoa urmdru! Cxi uvxify qdxrajr xwn uadtejau lxd yalanja qxenru mny vmjs xqqxnanru lxd mrrmjs qxenru. Veurxdejmffc rveu eu m ledur rcqa xl JRLu, atadcbxyc snxwu mbxir YAL JXN JRL - uxoarvenz fesa m Wxdfy Jiq xl mff xrvad jxoqarerexnu.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Oekay jxoqarerexnu omc tmdc qxuuebfa lxdomru. Er omc ba uxoarvenz fesa wmdzmoa werv uqajemf reoa lxd rmus-bmuay afaoanru (a.z. IJUB eJRL).</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">JRL zmoau xlran rxijv xn omnc xrvad muqajru xl enlxdomrexn uajiderc: jdcqrxzdmqvc, urazx, benmdc mnmfcueu, datadua anzanaadenz, oxbefa uajiderc mny xrvadu. Zxxy ramou zanadmffc vmta urdxnz useffu mny akqadeanja en mff rvaua euuiau.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Iuimffc, lfmz eu uxoa urdenz xl dmnyxo ymrm xd rakr en uxoa lxdomr. Akmoqfa mljrl&#123;</span>Xv_I_lxiny_er_neja_rDc&#125;</span><br></pre></td></tr></table></figure> 尝试<a href="https://quipqiup.com/">爆破</a> <img data-src="https://img-blog.csdnimg.cn/20210428225044309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这 完事了</p>
<h2 id="结语">结语</h2>
<p>这几天的博客属实水 主要是数分考试的原因 （但是差不多凉了，求求给我及格吧） 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-29</title>
    <url>/uncategorized/2021/04/29/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-29</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-29">BUUCTF 每日打卡 2021-4-29</h2>
<h2 id="引言">引言</h2>
<p>蓝帽杯就一道 crypto 又是斐波那契数列，又是 AES 网上查到什么斐波那契数列双混沌加密 反正就是没做出来。。。 等什么时候 wp 出来再说吧。。。</p>
<h2 id="boom">boom</h2>
<p>附件是一个 .exe 文件 不会是个 re 题吧。。。 在命令行打开（如果不在命令行打开，最后输出会直接关闭窗口） <img data-src="https://img-blog.csdnimg.cn/20210429185222439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> Do you like van♂ you see?（大雾） 下一步 <img data-src="https://img-blog.csdnimg.cn/20210429185246243.png" alt="在这里插入图片描述" /> 提交 md5 可以直接<a href="https://www.cmd5.com/">查询</a>得到 <img data-src="https://img-blog.csdnimg.cn/20210429184816708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 输入结果 <img data-src="https://img-blog.csdnimg.cn/20210429185334753.png" alt="在这里插入图片描述" /> 下一步 <img data-src="https://img-blog.csdnimg.cn/20210429185357601.png" alt="在这里插入图片描述" /> 解三元一次方程组 当然你可以手算 这里我们直接用 sagemath 计算（躺） 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210429185524985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 最后一步： <img data-src="https://img-blog.csdnimg.cn/20210429185617123.png" alt="在这里插入图片描述" /> 还是用 sagemath 求解 <img data-src="https://img-blog.csdnimg.cn/20210429185656219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 输入其中一个解即可 <img data-src="https://img-blog.csdnimg.cn/2021042918572871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 当然你可以 re [doge] 把它丢尽 IDA 里面，可以得到程序的框架 这里用的的软件是 IDA Freeware 7.0 先看输出 flag 的部分： <img data-src="https://img-blog.csdnimg.cn/20210429190130563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 发现 flag 是由三部分组成 第一部分： <img data-src="https://img-blog.csdnimg.cn/20210429185912455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第二部分： <img data-src="https://img-blog.csdnimg.cn/20210429190033880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第三部分： <img data-src="https://img-blog.csdnimg.cn/20210429190054324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 容易知道 flag 即为上面三部分答案拼接而成</p>
<h2 id="bse">B@se</h2>
<p>附件内容如下： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">密文：MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==</span><br><span class="line">JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/</span><br><span class="line"></span><br><span class="line">oh holy shit, something is missing...</span><br></pre></td></tr></table></figure> 第一行是密文 第二行容易猜到是重新排列的 Base64 编码对照表 只是其中几个字符缺失了 编写代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">key, start, end</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">chr</span>(i) <span class="keyword">in</span> key:</span><br><span class="line">            s += <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">unknown = judge(key, <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)) + judge(key, <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)) + judge(key, <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">unknown_list = <span class="built_in">list</span>(unknown)</span><br><span class="line"><span class="built_in">print</span>(unknown_list)</span><br></pre></td></tr></table></figure> 可以得出缺失的字符为 ['j', 'u', '3', '4'] 对其进行排列组合，替换对照表中缺失的字符 然后按照 Base64 的编码规则编写程序 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c, key</span>):</span></span><br><span class="line">    b = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> c[i] == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            b += <span class="string">&#x27;0&#x27;</span>*<span class="number">6</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b += <span class="built_in">bin</span>(<span class="built_in">list</span>(key).index(c[i]))[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b), <span class="number">8</span>):</span><br><span class="line">        s += <span class="built_in">chr</span>(<span class="built_in">int</span>(b[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">key, start, end</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">chr</span>(i) <span class="keyword">in</span> key:</span><br><span class="line">            s += <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">unknown = judge(key, <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)) + judge(key, <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)) + judge(key, <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">unknown_list = <span class="built_in">list</span>(unknown)</span><br><span class="line"><span class="built_in">print</span>(unknown_list)</span><br><span class="line">combination = <span class="built_in">list</span>(itertools.permutations(unknown_list,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(combination)):</span><br><span class="line">    key_new = key.replace(<span class="string">&#x27;****&#x27;</span>, <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(combination[i])))</span><br><span class="line">    <span class="built_in">print</span>(key_new)</span><br><span class="line">    decrypt(c, key_new)</span><br></pre></td></tr></table></figure>
<p>输出结果为： <img data-src="https://img-blog.csdnimg.cn/20210429205713681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 可以看到会有很多重复的内容 应该是由于有些字符在编码表中没有对应的字符，或者对应的字符在不同排列组合的编码表中的位置相同 结果为：wctf2120{base64_1s_v3ry_e@sy_and_fuN}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-4-30</title>
    <url>/uncategorized/2021/04/30/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-4-30</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-4-30">BUUCTF 每日打卡 2021-4-30</h2>
<h2 id="引言">引言</h2>
<p>啊 五一假期开始了</p>
<h2 id="坏蛋是雷宾">坏蛋是雷宾</h2>
<p>题目描述如下： <img data-src="https://img-blog.csdnimg.cn/20210430230435523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 看到校验码，想起之前一个奇偶校验位的题 但是好像行不通 只能找 <a href="https://blog.csdn.net/weixin_44017838/article/details/104895787">wp</a> 得知是 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_e_attack/#rsa-rabin">RSA 衍生算法——Rabin 算法</a> <img data-src="https://img-blog.csdnimg.cn/20210430230903257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> wp 中没有采用原始的攻击方法 而是采用下面的方法 <img data-src="https://img-blog.csdnimg.cn/2021043023095216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 如果把 wp 中的代码放到 python3 中运行会报错： TypeError: pow() 3rd argument not allowed unless all arguments are integers 应该为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># p = q = 3 (mod 4)</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br></pre></td></tr></table></figure>
<p>另一处值得注意的地方是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inv_p = invert(p, q)</span><br><span class="line">inv_q = invert(q, p)</span><br></pre></td></tr></table></figure>
<p>没有采用扩展欧几里得求 <span class="math inline">\(y_{p},y_{q}\)</span> ，而是采用求逆元的方法 原理是： 由于 <span class="math display">\[
y_{p} * p + y_{q} * q = 1
\]</span> 所以两边分别对 <span class="math inline">\(p, q\)</span> 取模 可得 <span class="math display">\[
\begin{cases}
y_{p}*q \equiv 1\space (mod \space p)\\
y_{q}*p \equiv 1\space (mod \space q)
\end{cases}
\]</span> 直接用 gmpy2 库中的 gcdext() 方法实现扩展欧几里得算法的代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">g, yp, yq = gmpy2.gcdext(p, q)</span><br></pre></td></tr></table></figure> 下一步： <img data-src="https://img-blog.csdnimg.cn/20210430231746752.png" alt="在这里插入图片描述" /> 根据题目描述：密文是162853095，校验码二进制值是110001，根据说明是放在明文后一起加密的，明文与密文长度相同。 从四个明文中找到正确的明文 完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">523798549</span></span><br><span class="line">p = <span class="number">10663</span></span><br><span class="line">q = <span class="number">49123</span></span><br><span class="line">c = <span class="number">162853095</span></span><br><span class="line"><span class="comment"># p = q = 3 (mod 4)</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line">g, yp, yq = gmpy2.gcdext(p, q)</span><br><span class="line"></span><br><span class="line">a = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">b = n - a</span><br><span class="line">c = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">d = n - c</span><br><span class="line"></span><br><span class="line">check = <span class="string">&#x27;110001&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bin</span>(i)[<span class="number">2</span>:][-<span class="built_in">len</span>(check):] == check:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        m = i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:][:-<span class="built_in">len</span>(check)], <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>n 可以直接爆破，这里不再赘述 最后得到的 m，<a href="https://tool.chinaz.com/tools/md5.aspx">MD5 加密</a> 结果如下： <img data-src="https://img-blog.csdnimg.cn/20210430232002397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 哈希值即为 flag</p>
<h2 id="结语">结语</h2>
<p>累了累了 还是好好享受假期吧 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-6</title>
    <url>/uncategorized/2021/05/06/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-6</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-5-6">BUUCTF 每日打卡 2021-5-6</h2>
<h2 id="引言">引言</h2>
<p>五一假期全鸽了。。。 果然当鸽子会上瘾。。。 假期前一天晚上留了半小时搞这道 RSA &amp; what ，结果搞到凌晨把我心态搞崩了 然后就鸽了。。。 今天终于搞出来了</p>
<h2 id="rsa-what">RSA &amp; what</h2>
<p>首先，加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">N = p*q</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_enc_key</span>(<span class="params">N,Phi</span>):</span></span><br><span class="line">    e = getPrime(N)</span><br><span class="line">    <span class="keyword">if</span> Phi % e == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> get_enc_key(N, Phi)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">e1 = get_enc_key(randint(<span class="number">10</span>, <span class="number">12</span>), Phi)</span><br><span class="line">e2 = get_enc_key(randint(<span class="number">10</span>, <span class="number">12</span>), Phi)</span><br><span class="line"></span><br><span class="line">fr = <span class="built_in">open</span>(<span class="string">r&quot;./base64&quot;</span>, <span class="string">&quot;rb&quot;</span>)<span class="comment">#flag is in this file</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">r&quot;./HUB1&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">r&quot;./HUB2&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">base64 = fr.read(<span class="number">255</span>) <span class="comment"># 读取255个字节</span></span><br><span class="line">f1.write(<span class="string">&quot;%d\n%d\n&quot;</span> % (N, e1))</span><br><span class="line">f2.write(<span class="string">&quot;%d\n%d\n&quot;</span> % (N, e2))</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(base64)&gt;<span class="number">0</span>:</span><br><span class="line">    pt = bytes_to_long(base64)</span><br><span class="line">    ct1 = powmod(pt, e1, N)</span><br><span class="line">    ct2 = powmod(pt, e2, N)</span><br><span class="line">    f1.write(<span class="string">&quot;\n%d&quot;</span> % ct1)</span><br><span class="line">    f2.write(<span class="string">&quot;\n%d&quot;</span> % ct2)</span><br><span class="line">    base64 = fr.read(<span class="number">255</span>)</span><br><span class="line">fr.close()</span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure>
<p>是<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">共模攻击</a> <img data-src="https://img-blog.csdnimg.cn/20210507001231135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 将 base64 加密的文件每段读取 255 个字节用不同的 e 加密分别存储在 HUB1, HUB2 两个文件中 然后就写代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcdext</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.readlines()</span><br><span class="line">    n = content[<span class="number">0</span>]</span><br><span class="line">    e = <span class="built_in">int</span>(content[<span class="number">1</span>])</span><br><span class="line">    list_c = content[<span class="number">3</span>:]</span><br><span class="line">    <span class="keyword">return</span> (n, e, list_c)</span><br><span class="line"></span><br><span class="line">n, e1, list_c1 = get(<span class="string">&#x27;HUB1&#x27;</span>)</span><br><span class="line">n, e2, list_c2 = get(<span class="string">&#x27;HUB2&#x27;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(n)</span><br><span class="line">g, u, v = gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">list_c3 = []</span><br><span class="line">list_c4 = []</span><br><span class="line"><span class="keyword">if</span> u &lt; <span class="number">0</span>:</span><br><span class="line">    u = -u</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_c1)):</span><br><span class="line">        list_c3.append(inverse(<span class="built_in">int</span>(list_c1[i]), n))</span><br><span class="line">        list_c4.append(<span class="built_in">int</span>(list_c2[i]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    v = -v</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_c2)):`在这里插入代码片`</span><br><span class="line">        list_c4.append(inverse(<span class="built_in">int</span>(list_c2[i]), n))</span><br><span class="line">        list_c3.append(<span class="built_in">int</span>(list_c1[i]))</span><br><span class="line">list_c = <span class="built_in">list</span>(<span class="built_in">zip</span>(list_c3, list_c4))</span><br><span class="line"></span><br><span class="line">mm = <span class="string">&#x27;&#x27;</span>.encode()</span><br><span class="line"><span class="keyword">for</span> c3, c4 <span class="keyword">in</span> list_c:</span><br><span class="line">    m = (<span class="built_in">pow</span>(c3, u, n) * <span class="built_in">pow</span>(c4, v, n)) % n</span><br><span class="line">    <span class="built_in">print</span>((long_to_bytes(m)))</span><br><span class="line">    mm += long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(mm)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(mm))</span><br></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;VEhJUz==\nRkxBR3==\nSVN=\nSElEREVOLo==\nQ0FO\nWU9V\nRklORM==\nSVT=\nT1VUP4==\nRE8=\nWU9V\nS05PV9==\nQkFTRTY0P5==\nWW91bmdD\nVEhJTku=\nWU9V\nQVJF\nTk9U\nVEhBVE==\nRkFNSUxJQVI=\nV0lUSO==\nQkFTRTY0Lh==\nQmFzZTY0\naXO=\nYW==\nZ3JvdXA=\nb2b=\nc2ltaWxhcn==\nYmluYXJ5LXRvLXRleHR=\nZW5jb2Rpbm&#x27;</span></span><br><span class="line"><span class="string">b&#x27;e=\nc2NoZW1lc0==\ndGhhdD==\ncmVwcmVzZW50\nYmluYXJ5\nZGF0YW==\naW5=\nYW6=\nQVNDSUl=\nc3RyaW5n\nZm9ybWF0\nYnk=\ndHJhbnNsYXRpbmd=\naXS=\naW50b1==\nYT==\ncmFkaXgtNjQ=\ncmVwcmVzZW50YXRpb24u\nVGhl\ndGVybc==\nQmFzZTY0\nb3JpZ2luYXRlc8==\nZnJvbd==\nYY==\nc3BlY2lmaWN=\nTUlNRT==\nY29udGVudI=&#x27;</span></span><br><span class="line"><span class="string">b&#x27;=\ndHJhbnNmZXI=\nZW5jb2Rpbmcu\nVGhl\ncGFydGljdWxhct==\nc2V0\nb2b=\nNjR=\nY2hhcmFjdGVyc5==\nY2hvc2Vu\ndG+=\ncmVwcmVzZW50\ndGhl\nNjQ=\ncGxhY2UtdmFsdWVz\nZm9y\ndGhl\nYmFzZd==\ndmFyaWVz\nYmV0d2Vlbt==\naW1wbGVtZW50YXRpb25zLp==\nVGhl\nZ2VuZXJhbI==\nc3RyYXRlZ3n=\naXO=\ndG9=\nY2hvb3Nl\nNjR&#x27;</span></span><br><span class="line"><span class="string">b&#x27;=\nY2hhcmFjdGVyc5==\ndGhhdA==\nYXJl\nYm90aN==\nbWVtYmVyc5==\nb2a=\nYS==\nc3Vic2V0\nY29tbW9u\ndG8=\nbW9zdM==\nZW5jb2RpbmdzLA==\nYW5k\nYWxzb8==\ncHJpbnRhYmxlLg==\nVGhpc9==\nY29tYmluYXRpb25=\nbGVhdmVz\ndGhl\nZGF0YW==\ndW5saWtlbHk=\ndG/=\nYmV=\nbW9kaWZpZWS=\naW5=\ndHJhbnNpdE==\ndGhyb3V&#x27;</span></span><br><span class="line"><span class="string">b&#x27;naN==\naW5mb3JtYXRpb26=\nc3lzdGVtcyw=\nc3VjaN==\nYXM=\nRS1tYWlsLD==\ndGhhdA==\nd2VyZQ==\ndHJhZGl0aW9uYWxseQ==\nbm90\nOC1iaXQ=\nY2xlYW4uWzFd\nRm9y\nZXhhbXBsZSw=\nTUlNRSdz\nQmFzZTY0\naW1wbGVtZW50YXRpb24=\ndXNlcw==\nQahDWiw=\nYahDeiw=\nYW5k\nMKhDOQ==\nZm9y\ndGhl\nZmlyc3Q=\nNjI=\ndmFs&#x27;</span></span><br><span class="line"><span class="string">b&#x27;dWVzLg==\nT3RoZXI=\ndmFyaWF0aW9ucw==\nc2hhcmU=\ndGhpcw==\ncHJvcGVydHk=\nYnV0\nZGlmZmVy\naW4=\ndGhl\nc3ltYm9scw==\nY2hvc2Vu\nZm9y\ndGhl\nbGFzdA==\ndHdv\ndmFsdWVzOw==\nYW4=\nZXhhbXBsZQ==\naXM=\nVVRGLTcu&#x27;</span></span><br><span class="line"><span class="string">b&#x27;VEhJUz==\nRkxBR3==\nSVN=\nSElEREVOLo==\nQ0FO\nWU9V\nRklORM==\nSVT=\nT1VUP4==\nRE8=\nWU9V\nS05PV9==\nQkFTRTY0P5==\nWW91bmdD\nVEhJTku=\nWU9V\nQVJF\nTk9U\nVEhBVE==\nRkFNSUxJQVI=\nV0lUSO==\nQkFTRTY0Lh==\nQmFzZTY0\naXO=\nYW==\nZ3JvdXA=\nb2b=\nc2ltaWxhcn==\nYmluYXJ5LXRvLXRleHR=\nZW5jb2Rpbme=\nc2NoZW1lc0==\ndGhhdD==\ncmVwcmVzZW50\nYmluYXJ5\nZGF0YW==\naW5=\nYW6=\nQVNDSUl=\nc3RyaW5n\nZm9ybWF0\nYnk=\ndHJhbnNsYXRpbmd=\naXS=\naW50b1==\nYT==\ncmFkaXgtNjQ=\ncmVwcmVzZW50YXRpb24u\nVGhl\ndGVybc==\nQmFzZTY0\nb3JpZ2luYXRlc8==\nZnJvbd==\nYY==\nc3BlY2lmaWN=\nTUlNRT==\nY29udGVudI==\ndHJhbnNmZXI=\nZW5jb2Rpbmcu\nVGhl\ncGFydGljdWxhct==\nc2V0\nb2b=\nNjR=\nY2hhcmFjdGVyc5==\nY2hvc2Vu\ndG+=\ncmVwcmVzZW50\ndGhl\nNjQ=\ncGxhY2UtdmFsdWVz\nZm9y\ndGhl\nYmFzZd==\ndmFyaWVz\nYmV0d2Vlbt==\naW1wbGVtZW50YXRpb25zLp==\nVGhl\nZ2VuZXJhbI==\nc3RyYXRlZ3n=\naXO=\ndG9=\nY2hvb3Nl\nNjR=\nY2hhcmFjdGVyc5==\ndGhhdA==\nYXJl\nYm90aN==\nbWVtYmVyc5==\nb2a=\nYS==\nc3Vic2V0\nY29tbW9u\ndG8=\nbW9zdM==\nZW5jb2RpbmdzLA==\nYW5k\nYWxzb8==\ncHJpbnRhYmxlLg==\nVGhpc9==\nY29tYmluYXRpb25=\nbGVhdmVz\ndGhl\nZGF0YW==\ndW5saWtlbHk=\ndG/=\nYmV=\nbW9kaWZpZWS=\naW5=\ndHJhbnNpdE==\ndGhyb3VnaN==\naW5mb3JtYXRpb26=\nc3lzdGVtcyw=\nc3VjaN==\nYXM=\nRS1tYWlsLD==\ndGhhdA==\nd2VyZQ==\ndHJhZGl0aW9uYWxseQ==\nbm90\nOC1iaXQ=\nY2xlYW4uWzFd\nRm9y\nZXhhbXBsZSw=\nTUlNRSdz\nQmFzZTY0\naW1wbGVtZW50YXRpb24=\ndXNlcw==\nQahDWiw=\nYahDeiw=\nYW5k\nMKhDOQ==\nZm9y\ndGhl\nZmlyc3Q=\nNjI=\ndmFsdWVzLg==\nT3RoZXI=\ndmFyaWF0aW9ucw==\nc2hhcmU=\ndGhpcw==\ncHJvcGVydHk=\nYnV0\nZGlmZmVy\naW4=\ndGhl\nc3ltYm9scw==\nY2hvc2Vu\nZm9y\ndGhl\nbGFzdA==\ndHdv\ndmFsdWVzOw==\nYW4=\nZXhhbXBsZQ==\naXM=\nVVRGLTcu&#x27;</span></span><br><span class="line"><span class="string">b&#x27;THIS&#x27;</span></span><br></pre></td></tr></table></figure>
<p>嗯？怎么就一个 <code>b'THIS'</code> ？ 搞了半天 心态崩了 找了很多资料（包括一些 wp）都不能解决 终于找到了合适的 <a href="https://www.codeleading.com/article/48943375092/">wp</a>(泪目) 中间那个 <code>\n</code> 原来是换行符。。。 后面加了一段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">M = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mm:</span><br><span class="line">    k = long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> k == <span class="string">b&#x27;\n&#x27;</span>:</span><br><span class="line">        M += base64.b64decode(temp)</span><br><span class="line">        temp = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    temp += k</span><br><span class="line"><span class="built_in">print</span>(M)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;THISFLAGISHIDDEN.CANYOUFINDITOUT?DOYOUKNOWBASE64?YoungCTHINKYOUARENOTTHATFAMILIARWITHBASE64.Base64isagroupofsimilarbinary-to-textencodingschemesthatrepresentbinarydatainanASCIIstringformatbytranslatingitintoaradix-64representation.ThetermBase64originatesfromaspecificMIMEcontenttransferencoding.Theparticularsetof64characterschosentorepresentthe64place-valuesforthebasevariesbetweenimplementations.Thegeneralstrategyistochoose64charactersthatarebothmembersofasubsetcommontomostencodings,andalsoprintable.Thiscombinationleavesthedataunlikelytobemodifiedintransitthroughinformationsystems,suchasE-mail,thatweretraditionallynot8-bitclean.[1]Forexample,MIME&#x27;sBase64implementationusesA\xa8CZ,a\xa8Cz,and0\xa8C9forthefirst62values.Othervariationssharethispropertybutdifferinthesymbolschosenforthelasttwovalues;anexampleisUTF-7.&quot;</span></span><br></pre></td></tr></table></figure>
<p>看了半天看不出名堂 不就是把 base64 加密解释了一遍吗？ <code>THIS FLAG IS HIDDEN</code> 所以是怎么隐藏的呢？ 参照 wp ，是 base64 隐写 再加一段代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = mm</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span></span><br><span class="line">    base64chars = <span class="string">b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span>():</span></span><br><span class="line">    line=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    bin_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        k=long_to_bytes(i)</span><br><span class="line">        <span class="keyword">if</span> k==<span class="string">b&#x27;\n&#x27;</span>:</span><br><span class="line">            steg_line = line</span><br><span class="line">            norm_line = base64.b64encode(base64.b64decode(line))</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="comment">#print(diff)</span></span><br><span class="line">            pads_num = steg_line.count(<span class="string">b&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span>(goflag(bin_str))</span><br><span class="line">            line=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        line+=k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span>(<span class="params">bin_str</span>):</span></span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/20210507002527114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>可以暂停，但不能放弃 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-7</title>
    <url>/uncategorized/2021/05/07/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-7</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-5-7">BUUCTF 每日打卡 2021-5-7</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="大数计算">大数计算</h2>
<p>题目描述： flag等于 wctf2020{Part1-Part2-Part3-Part4} 每一Part都为数的十六进制形式（不需要0x)，并用 '-' 连接 Part1 = <span class="math inline">\(2020*2019*2018* \cdots *3*2*1\)</span> 的前8位 Part2 = <span class="math inline">\(520^{1314} + 2333^{666}\)</span> 的前8位 Part3 = 宇宙终极问题的答案 <span class="math inline">\(x,y,z\)</span> 绝对值和的前8位 Part4 = 见图片附件，计算结果乘上<span class="math inline">\(1314\)</span></p>
<h3 id="part1">Part1</h3>
<p>编写一个简单的代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2020</span>):</span><br><span class="line">    result *= (i+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure> 结果为： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">386096951826724872377527755309254829575652833764136996704568320001962744375418996245016343070140495922821200614629613676056064037951380768693631095293969806083283419391122768593135371533669789505644746708636245286071667761717496505605794126236016354348784410240335472055757629538266448781423997420044753128592681490931155652500393981945786030349664533711594345568989302186320705026331591010701401806321162676014168267730443127229747356930582741007966787455099581158386524638372751639313267766129679555735375331455412649323831848690561911358863665291691253184884758093169216097558804246779418405854622335480512182276766264945125914275956103428084284556933827302002697216249895052496440541172520541257873419634034161103824199316296993063661010122247477806751684315159325496718242301326410047304634788457407629483612153384782033983257542806498117448100169850242485622135551834378243035590642352839055096183047501262709727667023809372071930180723811416036636750921242111077253225291490924545632327925057149716099795229733989622278323677405784299876565959582090676790727740307049077225508605566490968403536385735238912741726753153654163800192588170739101544001978507890178193666229850683801023093469605890012191345770905436000032556827322145416135640856057548854287333531160062595436210299154833029310707445362782649537335586073636441409352069691324058033881627521130303343921325446543099236423768017622330952822024309856222944411670467670029292434583401736238439303991700945727580238299750982559170548833139100553910689597287121942263594164151082680213395221663587816012606720015052645832622621471333102685422392447559330215438244237647008830170109515277728376740158127469507982306996887556451828368694363732003992198093879746125762368988032934128856143997941342867059780561839990632437177907064694382432079447096605996943877612866685823347086095028180222170710715928986388757360066746071573539728102642573049976996579847448174187164026466837941823296708220196587010386827277994485087677372620093957914089258169972214872563807439573846201771190457487767436383507920863265001158985530332683629614342467843804937221206800149726658420435494370022064907930073825842356140820286864504429150801511854514365890388184309207375633689423525046829286070427382305637485912596973375367419760345739950217980127302509287481854594278265427658981413690677647108075218848723615631183228998263867303745241836596694419145869217246024705077412378592333080136866437588005631900741990955327512376380828834010898865112109122200117679929527578871952101638590795253704401058529870302842722801768976320289167271902599225625767622305121280203492060037659871687735744553956446891872856397638184308752827275833141465241377237087280607247672227911921476510099466427100947464296939925307947903326972670620615266725024373992589830067802295068263706563543372266200657231075725406225813916087447037257516901879820294473007469699120258797394881069240769625444137446394025363698666039205630857709229029682411964627222481342313835400760000248298282014684789191216782161001313299389221096618273488723978734883910176473532912398103689047801184926163882078889516242948227926207222798398599415190198383379958023224921700008504785581886491831617089767423337158587605657695370924035915232465034278959481229277255278641922703818140279236081674495149412290836894544282115179683616118844191583046672479060000997496671880332878428953950612778358032083448023516233258828937364836898528863330898553728662430714476112310836556548819026772896916666672491022632933230082044594787660656479369609508622352899543941383995692550547567969679794689990261140429300073943357022253659335410345587776835600085239314982274092032142617241600285547606153599286848476863161163541783080974843391064827635422937416295803320652151693691769908939733927283127338535832997562295235291634892349205745118756949780889187123971284330764415768476973033998802916258114465575907763749305205635060986278491975514474464672254458806857234410272869494209351555904987662052843555593641077334735000243185871626166435489995567743531839402525319028777252590673740070657146817606781166399960411132861682002655514447098043836381875601009788125213646389121448684764478666800367960493084953255241805961090727464679546615218982157594620688546771982908471364789755878887707044374010944486692997646137003523014144478339200998768863760703237203498326237220307578035692438887844741169784356786186401985299971489879829923194004083856969480041497397289465262863214647978593940815429794201584815761969377077597754446250785589118819688309472535988847810731264852902520018791994847255177619133199103397784696304617128344478292442325121108591633318029061667864784808515527387560252024100796176430107903015131441779467272344895619105502295519265018507118428238756968370367729287885962903983789250413811180716741127223957387264111710541149510905192956624428207083391894030881029258437087456354854256388583861141432235437699695203894352189291895609764592583127247584093330090479305172063745326415499877435366649909958866611266850377258481988425964258871356114398124542854504460141256012894066714195604604296809443585918770552117029738264919661512180130075143844966812954224436082616963714987190523714733696955227936508156266340713059106114761487944040893851195897985233581632996731726844059926287692271399731200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure> Part1：38609695 转十六进制：24D231F</p>
<h3 id="part2">Part2</h3>
<p>直接用 python 算：<img data-src="https://img-blog.csdnimg.cn/20210507232309432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 结果为： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">67358675073930576996073993722567461850164722807074564948878417317473402927052829127082792032180094796252395096433983198952274168335392450509538309593385666431514980590592716015855911289321506036686643999492477513757215924758776455044536037020140456863773999261918973328815695045710068615401644013371977309012103898412096306361548001024977583422217671458264501188363086490125698404411163875599250631472344791340890807258094473727320110195601853152755087240330894053335818131077110273175715028846928201286446627946414753140891422257217210657051018005119011231825729783206822743971574711110393874816976266354981853740848193017816398023462606903346766612687790408415070020255296249418676249807212441079026250983961692920652966680193496784706192692613628105543621116002202680144634223494461659625064734199269350540205779713480943543889927915919259683768965037082643370773459533965219810073840472443356812334913011267861631024583721439843313283632252393379630383299598523037929812133138807072044576906149490490113840653244256197362973674055842990181720796496141363505718393822270218527760700369994972831534842781472514105407807279417668179333578100464787815389196826955497201910672296944059409606029603730111157226386643599020499425611604798218989413785508164561159754542908177698601111851024642335136611527906723782867198103433350776510482418582828560882474001127337861205717439932975849518063393530401772837736924736914846285298676339811297353234924091794918188257309391813418599493372303068163108621417737278803530572213749972358034814384186787621021593911334049398408117962215128441151972529070470429717565266547734379348873150272523271822724131161260146953117253978239691913721988312421114234651848572209530437943447365774218261113652983590167268527243129712467973675150813885739222841289549709569689560918679552000804353102265587269536197104995365208113361238214793349376601709287320691962025569441318004962409752672175447871755400848907951316397028636550476284126600721896236978828578849024817047688627396567760215637844575781201340411713410901387415097150001810731644704906580463682092951091073376627966232966312329119203820184242415159480596553046863575499835934379905722318707119304564096837225570386337451111503621022869027771621941235105328508169429847297696160848087696110478698810948121137387936577551170478133221632051268190997414006106830275793171130669067945012054593847771690058584752626174521036167711725373472145872472987785584869677825221641781524433380680668092633822451335545271833203427482749996978964078435417941459565163307999239089382722108845684107513974453105597828187596947603390837292678451072673709372346741758978218449321284455510126397518967502185664874536990177693703924032798926123849737513057251304979953532246771553748100752530930394182885368167026727688409697271253702259642032797882327918994179815400383367337203215938064919399556687943521993823720750997305976057751840104981535895783291939176032118935838607493242555676289868798140683411268035331709077028634328818544056041101480762484035614265528718720132396302035616727694893643384384202696363883821952117653841426152212136741932330060968422184519178149199302895488289650118600183818496708016481413704242955462575482947926185049572277249034187278692428277207506362256097428904426717710977347411241809884859683037796946927621459794307572757322054131305574740424632144992602305052743261521941792148633841874961055208272462900770503933839068194426250247291864679430728943202539192872303333804358392481348403129810207376835075575297015491422237138339359562906817960418892175230875862569</span></span><br></pre></td></tr></table></figure> Part2：67358675 转十六进制：403CFD3</p>
<h3 id="part3">Part3</h3>
<p>宇宙终极问题：求 <span class="math inline">\(x,y,z\)</span> 满足方程 <span class="math inline">\(x^{3} + y^{3} + z^{3} = 42\)</span> （别看知乎，里面答案都是错的，不过提供了 42 和 丢番图方程两个线索） 参考文章：<a href="https://www.theregister.com/2019/09/07/three_cubes_problem/">https://www.theregister.com/2019/09/07/three_cubes_problem/</a> 可知 <span class="math display">\[
\begin{cases}
x = -80538738812075974\\
y =  80435758145817515\\
z =  12602123297335631\\
\end{cases}
\]</span> 分别取绝对值相加： <img data-src="https://img-blog.csdnimg.cn/20210508000255327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<p>结果为：173576620255229120 Part3：17357662 转十六进制：108DB5E</p>
<h3 id="part4">Part4</h3>
<p>先计算下面的定积分： <img data-src="https://img-blog.csdnimg.cn/20210507233058802.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 当然可以手算： <span class="math display">\[
\mathop{ \int }\nolimits_0^222x \text{d} x + 36 = x^{2} |^{22}_{0} + 36 = 520
\]</span> 或者可以用 SageMath： <img data-src="https://img-blog.csdnimg.cn/20210507234242652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 计算结果： <img data-src="https://img-blog.csdnimg.cn/20210507234359224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> Part4：683280 转十六进制：A6D10</p>
<p>最终得到 flag：wctf2020{24d231f-403cfd3-108db5e-a6d10}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-8</title>
    <url>/uncategorized/2021/05/08/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-8</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-5-8">BUUCTF 每日打卡 2021-5-8</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="together">together</h2>
<p>附件有两个 公钥,pem 和 flag(base64编码) 文件 联想题目，容易猜想是 RSA 共模攻击 编写代码验证： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey1.pem&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    <span class="built_in">print</span>(key.n)</span><br><span class="line">    <span class="built_in">print</span>(key.e)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey2.pem&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    <span class="built_in">print</span>(key.n)</span><br><span class="line">    <span class="built_in">print</span>(key.e)</span><br></pre></td></tr></table></figure> 输出结果： <img data-src="https://img-blog.csdnimg.cn/20210508125546497.png" alt="在这里插入图片描述" /> 猜想成立 然后进行共模攻击 完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey1.pem&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    n1 = key.n</span><br><span class="line">    e1 = key.e</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey2.pem&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.import_key(f.read())</span><br><span class="line">    n2 = key.n</span><br><span class="line">    e2 = key.e</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> n1 == n2</span><br><span class="line">n = n1</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myflag1&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c1 = <span class="built_in">int</span>(base64.b64decode(f.read()).<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(c1)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myflag2&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c2 = <span class="built_in">int</span>(base64.b64decode(f.read()).<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line">g, u, v = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> u &lt; <span class="number">0</span>:</span><br><span class="line">    u = -u</span><br><span class="line">    c1 = inverse(c1, n)</span><br><span class="line"><span class="keyword">if</span> v &lt; <span class="number">0</span>:</span><br><span class="line">    v = -v</span><br><span class="line">    c2 = inverse(c2, n)</span><br><span class="line"></span><br><span class="line">m = (<span class="built_in">pow</span>(c1, u, n) * <span class="built_in">pow</span>(c2, v, n)) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：flag{23re_SDxF_y78hu_5rFgS}</p>
<h2 id="babyrsa">babyRSA</h2>
<p>加密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&quot;MRCTF&#123;xxxx&#125;&quot;</span></span><br><span class="line">base = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_p</span>():</span></span><br><span class="line">    P = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)]</span><br><span class="line">    P[<span class="number">0</span>] = getPrime(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">        P[i] = sympy.nextprime(P[i-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_p :&quot;</span>, P[<span class="number">9</span>])</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">        n *= P[i]</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    factor = <span class="built_in">pow</span>(p, base, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_factor :&quot;</span>, factor)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_q</span>():</span></span><br><span class="line">    sub_Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q = sub_Q ** Q_2 % Q_1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_1: &quot;</span>, Q_1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_2: &quot;</span>, Q_2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sub_Q: &quot;</span>, sub_Q)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(Q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _E = base</span><br><span class="line">    _P = gen_p()</span><br><span class="line">    _Q = gen_q()</span><br><span class="line">    <span class="keyword">assert</span> (gcd(_E, (_P - <span class="number">1</span>) * (_Q - <span class="number">1</span>)) == <span class="number">1</span>)</span><br><span class="line">    _M = bytes_to_long(flag)</span><br><span class="line">    _C = <span class="built_in">pow</span>(_M, _E, _P * _Q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Ciphertext = &quot;</span>, _C)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P_p : 206027926847308612719677572554991143421</span></span><br><span class="line"><span class="string">P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line"><span class="string">Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line"><span class="string">Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line"><span class="string">sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line"><span class="string">Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure> 其实他原附件给的代码里面定义的 <code>GCD()</code> 函数根本没有用到，我把它删了 分析代码，p 和 q 分别由 <code>gen_p()</code> 和 <code>gen_q()</code> 两个自定义函数获取 其中 q 很容易求，而且把需要用到的数据都给了 需要注意的就是 用原代码的 <code>sympy.nextprime(sub_Q ** Q_2 % Q_1)</code> 求 q 会非常慢，我们用 <code>sympy.nextprime(pow(sub_Q, Q_2, Q_1))</code> 的方式求解 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="comment"># 求 q</span></span><br><span class="line">Q_1 = <span class="number">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line">Q_2 = <span class="number">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line">sub_Q = <span class="number">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line">q = sympy.nextprime(<span class="built_in">pow</span>(sub_Q, Q_2, Q_1))</span><br></pre></td></tr></table></figure> 然后求 p 发现 <code>gen_p()</code> 函数和 RSA 加密算法很相似，只不过 n 是 17 个素数相乘 告诉我们 P[9] 容易求得其他 16 个相邻的素数 最后类似于 RSA 解密即可 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 求 p</span></span><br><span class="line">P_p = <span class="number">206027926847308612719677572554991143421</span></span><br><span class="line">P_factor = <span class="number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line">list_P = [P_p]</span><br><span class="line">P = P_p</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    P = sympy.prevprime(P)</span><br><span class="line">    list_P.append(P)</span><br><span class="line">P = P_p</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    P = sympy.nextprime(P)</span><br><span class="line">    list_P.append(P)</span><br><span class="line"></span><br><span class="line">phi_p = <span class="number">1</span></span><br><span class="line">n_p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_P)):</span><br><span class="line">    n_p *= list_P[i]</span><br><span class="line">    phi_p *= (list_P[i]-<span class="number">1</span>)</span><br><span class="line">d_p = inverse(e, phi_p)</span><br><span class="line">p = sympy.nextprime(<span class="built_in">pow</span>(P_factor, d_p, n_p))</span><br></pre></td></tr></table></figure> 最后就是最基础的 RSA 解密算法了 完整代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求 q</span></span><br><span class="line">Q_1 = <span class="number">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line">Q_2 = <span class="number">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line">sub_Q = <span class="number">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line">q = sympy.nextprime(<span class="built_in">pow</span>(sub_Q, Q_2, Q_1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求 p</span></span><br><span class="line">P_p = <span class="number">206027926847308612719677572554991143421</span></span><br><span class="line">P_factor = <span class="number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line">list_P = [P_p]</span><br><span class="line">P = P_p</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    P = sympy.prevprime(P)</span><br><span class="line">    list_P.append(P)</span><br><span class="line">P = P_p</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    P = sympy.nextprime(P)</span><br><span class="line">    list_P.append(P)</span><br><span class="line"></span><br><span class="line">phi_p = <span class="number">1</span></span><br><span class="line">n_p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_P)):</span><br><span class="line">    n_p *= list_P[i]</span><br><span class="line">    phi_p *= (list_P[i]-<span class="number">1</span>)</span><br><span class="line">d_p = inverse(e, phi_p)</span><br><span class="line">p = sympy.nextprime(<span class="built_in">pow</span>(P_factor, d_p, n_p))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求 c</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure> 结果：MRCTF{sti11_<span class="citation" data-cites="_b">@_b</span><span class="citation" data-cites="by_qu3st10n">@by_qu3st10n</span>}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-9</title>
    <url>/uncategorized/2021/05/09/week5-6/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-9</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-5-9">BUUCTF 每日打卡 2021-5-9</h1>
<h2 id="引言">引言</h2>
<p>今天的红帽杯，集体摸鱼我是没想到的 第一道 crypto 本质上是一个格密码问题（求助别人） 第二道是椭圆曲线加密（直接放弃）</p>
<h2 id="you_raise_me_up">you_raise_me_up</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(flag), n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line"><span class="comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br></pre></td></tr></table></figure>
<p>最后一个有点像 RSA 加密最后一步 没什么思路，就去找 <a href="https://blog.csdn.net/qq_46230755/article/details/111290544">wp</a> 了 原来是一道<a href="https://ctf-wiki.org/crypto/asymmetric/discrete-log/discrete-log/#_1">离散对数题</a> <img data-src="https://img-blog.csdnimg.cn/20210509235207399.png" alt="在这里插入图片描述" /> 对于没学过群论的我来说，一些概念需要补充 <strong>群的阶</strong>： 参考<a href="https://zhuanlan.zhihu.com/p/262254610">知乎文章</a> 首先是群元素的阶： <img data-src="https://img-blog.csdnimg.cn/20210509235448191.png" alt="在这里插入图片描述" /> 下面是两个例子： <img data-src="https://img-blog.csdnimg.cn/20210509235550422.png" alt="在这里插入图片描述" /> 循环群的阶（在加密中一般都考虑循环群）就是指： <img data-src="https://img-blog.csdnimg.cn/20210509235721894.png" alt="在这里插入图片描述" /> 而什么是循环群？举一个例子就是整数模 n ，容易发现在模 n 的情况下 1 和 n+1 是相等的，就像循环一样 <strong>光滑数</strong>： 参考 <a href="https://zh.wikipedia.org/wiki/%E5%85%89%E6%BB%91%E6%95%B8">wiki</a> <img data-src="https://img-blog.csdnimg.cn/20210510000116914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 讲的很明白了</p>
<p>然而上面两个概念这道题不需要知道 ctfwiki 提供了<a href="https://ctf-wiki.org/crypto/asymmetric/discrete-log/discrete-log/#baby-step-giant-step">暴力破解的方法</a>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line">n = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bsgs</span>(<span class="params">g, y, p</span>):</span></span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">pow</span>(p - <span class="number">1</span>, <span class="number">1</span>/<span class="number">2</span>))</span><br><span class="line">    S = &#123;<span class="built_in">pow</span>(g, j, p): j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)&#125;</span><br><span class="line">    gs = <span class="built_in">pow</span>(g, p - <span class="number">1</span> - m, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">return</span> i * m + S[y]</span><br><span class="line">        y = y * gs % p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">flag = bsgs(m, c, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes((flag)))</span><br></pre></td></tr></table></figure>
<p>然而跑了几分钟没有反应 如 wp 所述，建议用 sympy 库求解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line"></span><br><span class="line">flag = sympy.discrete_log(<span class="number">2</span>**<span class="number">512</span>,c,m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>
<p>结果为：flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}</p>
<h2 id="结语">结语</h2>
<p>嘛，还差得远呢 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-10</title>
    <url>/uncategorized/2021/05/10/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-10</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-5-10">BUUCTF 每日打卡 2021-5-10</h1>
<h2 id="引言">引言</h2>
<p>时间太晚了，原本想讲一讲红帽杯的 crypto 的（干啥啥不行，找 wp 第一名）</p>
<h2 id="polybius">Polybius</h2>
<p>波利比奥斯方阵密码（<a href="https://en.wikipedia.org/wiki/Polybius_square">Polybius square</a>） 参考了 <a href="https://blog.csdn.net/weixin_44110537/article/details/107302665">wp</a> 附件内容： 密文：ouauuuoooeeaaiaeauieuooeeiea hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ= flag:解出明文后，请加上BJD{}</p>
<p>hint 解密内容： <img data-src="https://img-blog.csdnimg.cn/20210511000159954.png" alt="在这里插入图片描述" /> 而密文内容有 28 位 联想到波利比奥斯方阵密码加密结果为波利比奥斯方阵中的坐标 如 wp 中所说，密文中的字母对应于 “aeiou” 字符串中字母在波利比奥斯方阵中的位置 由于不知道 "a", "e", "i", "o", "u" 的排列顺序，就有 5<em>4</em>3<em>2</em>1 种情况 而波利比奥斯方阵中（2，4）为可以是 i 或 j 所以一共有 5<em>4</em>3<em>2</em>1*2 种情况 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;aeoiu&quot;</span></span><br><span class="line">sumresult = []</span><br><span class="line">numsumresult = []</span><br><span class="line">cipher = <span class="string">&quot;ouauuuoooeeaaiaeauieuooeeiea&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(s, <span class="number">5</span>): <span class="comment"># 找出全排列</span></span><br><span class="line">    sumresult.append(<span class="string">&quot;&quot;</span>.join(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sumresult:</span><br><span class="line">    temp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> cipher:</span><br><span class="line">        temp += <span class="built_in">str</span>(i.index(j)+<span class="number">1</span>)</span><br><span class="line">    numsumresult.append(temp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;考虑（2，4）位是 i 的情况&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> numsumresult:</span><br><span class="line">    ans_ = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(i), <span class="number">2</span>):</span><br><span class="line">        xx = (<span class="built_in">int</span>(i[j])-<span class="number">1</span>)*<span class="number">5</span> + <span class="built_in">int</span>(i[j+<span class="number">1</span>]) + <span class="number">96</span></span><br><span class="line">        <span class="keyword">if</span> xx &gt; <span class="built_in">ord</span>(<span class="string">&#x27;i&#x27;</span>):</span><br><span class="line">            xx += <span class="number">1</span></span><br><span class="line">        ans_ += <span class="built_in">chr</span>(xx)</span><br><span class="line">    <span class="built_in">print</span>(ans_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;考虑（2，4）位是 j 的情况&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> numsumresult:</span><br><span class="line">    ans_ = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(i), <span class="number">2</span>):</span><br><span class="line">        xx = (<span class="built_in">int</span>(i[j])-<span class="number">1</span>)*<span class="number">5</span> + <span class="built_in">int</span>(i[j+<span class="number">1</span>]) + <span class="number">96</span></span><br><span class="line">        <span class="keyword">if</span> xx &gt; <span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>):</span><br><span class="line">            xx += <span class="number">1</span></span><br><span class="line">        ans_ += <span class="built_in">chr</span>(xx)</span><br><span class="line">    <span class="built_in">print</span>(ans_)</span><br></pre></td></tr></table></figure>
<p>(wp 中指考虑了考虑（2，4）位是 i 的情况，大概是已经找到 flag 了) 结果为： <img data-src="https://img-blog.csdnimg.cn/20210511000910208.png" alt="在这里插入图片描述" /></p>
<h2 id="情书">情书</h2>
<p>附件内容： Premise: Enumerate the alphabet by 0、1、2、..... 、25 Using the RSA system Encryption:0156 0821 1616 0041 0140 2130 1616 0793 Public Key:2537 and 13 Private Key:2537 and 937</p>
<p>flag: wctf2020{Decryption}</p>
<p>唯一 迷惑人的地方就是密文每串数字前两位都是 0 到 25 之间，容易搞错 其实给了密文、密钥直接对每串数字解密就行 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;0156 0821 1616 0041 0140 2130 1616 0793&#x27;</span>.split()</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">n = <span class="number">2537</span></span><br><span class="line">d = <span class="number">937</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    m += <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="built_in">pow</span>(<span class="built_in">int</span>(i), d, n))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>
<p>结果为：iloveyou</p>
<h2 id="结语">结语</h2>
<p>明天再将 红帽杯的 crypto 吧 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-12</title>
    <url>/uncategorized/2021/05/12/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-11</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-5-12">BUUCTF 每日打卡 2021-5-12</h1>
<h2 id="引言">引言</h2>
<p>求 wp 的时候，大佬们告诉我 2021 红帽杯的 crypto 都是原题。。。 一共有三份 wp 其中两份的思路是一样（也就是原题的解答），另外一份是和我同级的 Pheonix dl 当时的解答（感谢 Pheonix dl！）花了一小时解出来的</p>
<h2 id="红帽杯primegame">[2021 红帽杯]primegame</h2>
<p><a href="https://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/">原题</a>加密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random shuffle the primes</span></span><br><span class="line"><span class="comment"># Now you cannot know the order</span></span><br><span class="line">seed = struct.unpack(<span class="string">&#x27;&lt;i&#x27;</span>, flag[<span class="number">5</span>:<span class="number">9</span>])[<span class="number">0</span>]</span><br><span class="line">random.seed(seed)</span><br><span class="line">random.shuffle(primes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use ln function</span></span><br><span class="line"><span class="comment"># Now you cannot know the key itself</span></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sum values</span></span><br><span class="line"><span class="comment"># Now you cannot know the flag</span></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br></pre></td></tr></table></figure> 该代码的结构如下： 1、查找不超过100的素数。（共25个） 2、通过使用 flag 的第6到第9字节作为随机种子，可以对十进制素数数组进行改组。 3、每个改组的素数都取以 e 为底的对数，十进制精度为100。 4、将上一步得到的 ln 值乘以标记的每个字节所获得的值相加，乘以 2 ** 256 然后四舍五入。</p>
<p>对比红帽杯的加密代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]</span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 获取 [2,90] 的素数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j: <span class="comment"># i^2 &gt;= j</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span> <span class="comment"># 保留 100 位小数</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)): <span class="comment"># len(primes) = 24</span></span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"><span class="comment"># 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"><span class="comment"># 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br></pre></td></tr></table></figure> 发现原题代码结构中的第二步（也就是打乱素数数组顺序）是没有的（我说哪来的 random 和 struct 库😂） 而且将 flag 分成两段加密，因此给了两个 ct</p>
<p>首先，这可以转化成<a href="https://blog.csdn.net/qq_33458986/article/details/104366177?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control">背包加密问题</a> 背包加密是对密文的二进制字符串进行加密 至于为什么这道题是背包加密，就我个人的理解的话，大多数加密问题都可以转化成背包问题解决（例如 RSA 中的 CopperSmith 攻击法），给我灵感的是 <code>2 ** 256</code> 也就是 <span class="math inline">\(2^{2^{8}}\)</span>，联想到字符 8 位二进制（虽然没什么根据就是了） 最后也没有思路就是了。。。</p>
<p>wp 的解法也都是转化为对两段分别进行背包问题求解</p>
<h3 id="peonix-dl-解法">Peonix dl 解法</h3>
<p>dl 的手稿： <img data-src="https://img-blog.csdnimg.cn/20210511161219566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 首先，将 flag 前24位转化为 24*8 位的二进制 因为原来的 keys 是直接对每位 flag 进行操作，而现在是要对每位二进制进行操作，所以要重新构造 keys 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>*<span class="number">8</span>):</span><br><span class="line">    flag.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>*<span class="number">8</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>*<span class="number">8</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>*<span class="number">8</span>:]</span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(math.floor(<span class="number">2</span> ** <span class="number">256</span> * (<span class="number">2</span> ** (i % <span class="number">8</span>)) * Decimal(primes[i//<span class="number">8</span>]).ln()))</span><br><span class="line"><span class="built_in">print</span>(keys)</span><br></pre></td></tr></table></figure>
<p>需要注意的是这里的二进制字符串是倒序的，之后解密需要倒回来 如手稿中所写的，由于对 keys 向下取整了，所以答案会偏小，所以需要调整 c（据说调整花了大部分时间，这也是这个方案的一个缺陷） 然后接下来就是构造矩阵，用 LLL 算法解出最短向量得到结果了 这里注意最后结果是一个最后一位是 0，其他都是 -1 或 1 的向量，有把 -1 替换成 0 和 1 替换成 0 并且 -1 替换成 1 两种情况，需要分别尝试 <img data-src="https://img-blog.csdnimg.cn/2021051123223440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 怎么构造矩阵参照<a href="https://blog.csdn.net/qq_33458986/article/details/104366177?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control">背包加密问题</a>，至于 LLL 算法，曾经在研究 cryptohack 的时候 dl 尝试复现过，但是非常慢（当然我也试过，但是失败了），用 sagemath 封装好的速度会比较快 最后把结果倒序之后 long_to_bytes 就行了 结果为： <img data-src="https://img-blog.csdnimg.cn/20210511232614320.png" alt="在这里插入图片描述" /> 我个人认为难点在于构造 keys 以及想到去构造 keys ，还有就是存在需要调整 c 这个缺陷 至于其他部分，想到背包问题就是顺理成章的了</p>
<h3 id="原题解法">原题解法</h3>
<p>在<a href="https://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/">原题</a>中，将 flag 直接作为字符串考虑，而不是转化为二进制再求解 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(Decimal(<span class="built_in">int</span>(primes[i])).ln())</span><br><span class="line"></span><br><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> keys:</span><br><span class="line">    arr.append(<span class="built_in">int</span>(v * <span class="built_in">int</span>(<span class="number">16</span>) ** <span class="built_in">int</span>(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line">ct = <span class="number">737384863737803670841307970259513146291422299366557325168325233349136771464845311</span></span><br><span class="line"><span class="comment">#ct = 425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">res</span>):</span></span><br><span class="line">    h = Decimal(<span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys)):</span><br><span class="line">        h += res[i] * keys[i]</span><br><span class="line"></span><br><span class="line">    ct = <span class="built_in">int</span>(h * <span class="built_in">int</span>(<span class="number">16</span>)**<span class="built_in">int</span>(<span class="number">64</span>))</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">N</span>):</span></span><br><span class="line">    ln = <span class="built_in">len</span>(arr)</span><br><span class="line">    A = Matrix(ZZ, ln + <span class="number">1</span>, ln + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">        A[i, ln] = arr[i] // N</span><br><span class="line">        A[ln, i] = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    A[ln, ln] = ct // N</span><br><span class="line"></span><br><span class="line">    res = A.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln + <span class="number">1</span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">            <span class="keyword">if</span> -<span class="number">64</span> &lt;= res[i][j] &lt; <span class="number">64</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            vec = [<span class="built_in">int</span>(v + <span class="number">64</span>) <span class="keyword">for</span> v <span class="keyword">in</span> res[i][:-<span class="number">1</span>]]</span><br><span class="line">            ret = encrypt(vec)</span><br><span class="line">            <span class="keyword">if</span> ret == ct:</span><br><span class="line">                <span class="built_in">print</span>(N, <span class="built_in">bytes</span>(vec))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>, ret, <span class="built_in">bytes</span>(vec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    f(i)</span><br></pre></td></tr></table></figure> 由于 flag 实际上是可以输入的值，所以将这个问题视为0~127背包而不是0/1背包，因此它们不能超过128，因此我们将边界设置为0~127。 类似于上文所述的方法构造矩阵，对角线位置相同，而将最后一行前面的数替换成 64 (128/2)，不同上文的 1 (2/1) 而在寻找最短向量的时候将范围限制在 [-64, 64] ，不同于上文的 -1/1 而至于整除 N 的操作，可以理解为是一种误差处理的方式，由于加密时乘 <span class="math inline">\(2^{256}\)</span> 造成了很大误差，所以将其放在 N 环上而不是整数环上讨论（我也不懂这是什么道理，但是感觉很有道理） 而 keys 就和原来一样，只是换了个表示</p>
<h2 id="结语">结语</h2>
<p>事实上，类似的问题也可以用类似的方法解，如原题 wp 中提到的 cryptohack 中的一题 太晚了明天再说 分析 wp 究竟能学到什么呢？只能说长点见识吧，我见的还是太少了 太弱小了，因为 我们没有力量~ 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-12</title>
    <url>/uncategorized/2021/05/12/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-12</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-5-12">BUUCTF 每日打卡 2021-5-12</h2>
<h2 id="引言">引言</h2>
<p>昨天爆肝完红帽杯 primegame 的 wp 解析，原本想举一反三一下做一下 cryptohack 的一道类似的题，但是太晚了，今天补上 至于另一道，想留到周末讲，周六还有国赛要打</p>
<h2 id="cryptohackreal-eisenstein">[cryptohack]Real Eisenstein</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210512194217309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> yysy 这个题目描述给了跟没给一样 看加密代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">&quot;crypto&#123;???????????????&#125;&quot;</span></span><br><span class="line">PRIMES = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>]</span><br><span class="line"></span><br><span class="line">h = Decimal(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(FLAG):</span><br><span class="line">    h += <span class="built_in">ord</span>(c) * Decimal(PRIMES[i]).sqrt()</span><br><span class="line"></span><br><span class="line">ct = math.floor(h*<span class="number">16</span>**<span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ciphertext: <span class="subst">&#123;ct&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ciphertext: 1350995397927355657956786955603012410260017344805998076702828160316695004588429433</span></span><br></pre></td></tr></table></figure> 跟红帽杯的加密代码不能说毫不相干，只能说完全一样 唯二不一样的，就是把 primes 限定在 [0, 105] ，把 ln() 换成了 sqrt() 直接上 sage 代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>]</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(Decimal(<span class="built_in">int</span>(primes[i])).sqrt())</span><br><span class="line"></span><br><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> keys:</span><br><span class="line">    arr.append(<span class="built_in">int</span>(v * <span class="built_in">int</span>(<span class="number">16</span>) ** <span class="built_in">int</span>(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line">ct = <span class="number">1350995397927355657956786955603012410260017344805998076702828160316695004588429433</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">res</span>):</span></span><br><span class="line">    h = Decimal(<span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys)):</span><br><span class="line">        h += res[i] * keys[i]</span><br><span class="line">    ct = <span class="built_in">int</span>(h * <span class="built_in">int</span>(<span class="number">16</span>)**<span class="built_in">int</span>(<span class="number">64</span>))</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">N</span>):</span></span><br><span class="line">    ln = <span class="built_in">len</span>(arr)</span><br><span class="line">    A = Matrix(ZZ, ln + <span class="number">1</span>, ln + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">        A[i, i] = <span class="number">1</span></span><br><span class="line">        A[i, ln] = arr[i] // N</span><br><span class="line">        A[ln, i] = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    A[ln, ln] = ct // N</span><br><span class="line"></span><br><span class="line">    res = A.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ln + <span class="number">1</span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ln):</span><br><span class="line">            <span class="keyword">if</span> -<span class="number">64</span> &lt;= res[i][j] &lt; <span class="number">64</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            vec = [<span class="built_in">int</span>(v + <span class="number">64</span>) <span class="keyword">for</span> v <span class="keyword">in</span> res[i][:-<span class="number">1</span>]]</span><br><span class="line">            ret = encrypt(vec)</span><br><span class="line">            <span class="keyword">if</span> ret == ct:</span><br><span class="line">                <span class="built_in">print</span>(N, <span class="built_in">bytes</span>(vec))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>, ret, <span class="built_in">bytes</span>(vec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    f(i)</span><br></pre></td></tr></table></figure> 这里采用“原题”解法，比较方便 结果为： <img data-src="https://img-blog.csdnimg.cn/20210512194651892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> crypto{r34l_t0_23D_m4p}</p>
<h2 id="编码与调制">编码与调制</h2>
<p>直接把 wp 的地址放在题目里面我是没想到的。。。 看到这个题目，想到以前做的一道<a href="https://blog.csdn.net/weixin_52446095/article/details/115384023?spm=1001.2014.3001.5501">传感器</a> 事实上也是考查曼彻斯特编码（当时迷惑的地方就是，如果出现“00”或“11”的情况怎么没有考虑，现在想想，加密的时候也不会出现啊） 将题目给的十六进制字符串转化成二进制，“10”（高电平转低电平）替换成 “1”，“01”（低电平转高电平）替换成 “0”，在转化成字符串就行了 代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">msg = <span class="number">0x2559659965656a9a65656996696965a6695669a9695a699569666a5a6a6569666a59695a69aa696569666aa6</span></span><br><span class="line">s = <span class="built_in">bin</span>(msg)[<span class="number">2</span>:]</span><br><span class="line">r = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> s[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>] == <span class="string">&#x27;10&#x27;</span>:</span><br><span class="line">        r += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(r, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure> 结果为：BJD{DifManchestercode}</p>
<h2 id="crypto-classic1">crypto-classic1</h2>
<p>附件里面还有一个加密了的附件，给了一个附件密码的 hint： 哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律 xdfv ujko98 edft54 xdfv pok,.; wsdr43 这是什么玩意? 低头看双手，键盘加密？ 原来是键盘上对应字符包裹起来的字符 密码为：circle 加密附件文件名是 vigenere，所以是维吉尼亚密码，给了一个密文：SRLU{LZPL_S_UASHKXUPD_NXYTFTJT} 还需要密钥 由于题目来源于[ACTF新生赛2020]，推测 flag 格式为 actf{} 对应维吉尼亚表格： <img data-src="https://img-blog.csdnimg.cn/20210512200329755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 前四位对应的密钥是：spsp 猜想密钥是 sp 解密结果为： <img data-src="https://img-blog.csdnimg.cn/20210512200429363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 但是提交 flag 怎么都不对 只能找 <a href="https://blog.csdn.net/u011718707/article/details/108207138">wp</a> <img data-src="https://img-blog.csdnimg.cn/20210512200525952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 啊这。。。 正确的 flag 为：ACTF{WHAT_A_CLASSICAL_VIGENERE}</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-18</title>
    <url>/uncategorized/2021/05/18/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-18</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-5-18">BUUCTF 每日打卡 2021-5-18</h1>
<h2 id="引言">引言</h2>
<p>果然当鸽子会上瘾。。。 上周五打的国赛24小时不间断就离谱 原本打算通宵打，结果发现到半夜能写的都写了（指就写了一道 200 分的 rsa） 槽点太多，一时不知道从哪开始吐了 总之鸽了三天，今天就肝（水）一期国赛的那道 rsa 吧（咕咕咕）</p>
<h2 id="ciscnrsa">[CISCN]rsa</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> text,flag</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> md5.new(text).hexdigest() == flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">msg1 = text[:xx]</span><br><span class="line">msg2 = text[xx:yy]</span><br><span class="line">msg3 = text[yy:]</span><br><span class="line"></span><br><span class="line">msg1 = bytes_to_long(msg1)</span><br><span class="line">msg2 = bytes_to_long(msg2)</span><br><span class="line">msg3 = bytes_to_long(msg3)</span><br><span class="line"></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">N1 = p1*q1</span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg1,e1,N1)</span><br><span class="line"><span class="built_in">print</span> (e1,N1)</span><br><span class="line"></span><br><span class="line">p2 = getPrime(<span class="number">512</span>)</span><br><span class="line">q2 = getPrime(<span class="number">512</span>)</span><br><span class="line">N2 = p2*q2</span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg2,e2,N2)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg2,e3,N2)</span><br><span class="line"><span class="built_in">print</span> (e2,N2)</span><br><span class="line"><span class="built_in">print</span> (e3,N2)</span><br><span class="line"></span><br><span class="line">p3 = getPrime(<span class="number">512</span>)</span><br><span class="line">q3 = getPrime(<span class="number">512</span>)</span><br><span class="line">N3 = p3*q3</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg3,e3,N3)</span><br><span class="line"><span class="built_in">print</span> (e3,N3)</span><br><span class="line"><span class="built_in">print</span> p3&gt;&gt;<span class="number">200</span></span><br></pre></td></tr></table></figure>
<p>从下往上观察加密代码，发现p3向右移位200位，所以是p高位泄露，采用coppersmith攻击得到p,q</p>
<p>进行解密，得到msg第三部分 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p3 = <span class="number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span></span><br><span class="line">q3 = <span class="number">9918033198963879798362329507637256706010562962487329742400933192721549307087332482107381554368538995776396557446746866861247191248938339640876368268930589</span></span><br><span class="line">n3 = p3*q3</span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">d3 = inverse(e3, (p3-<span class="number">1</span>)*(q3-<span class="number">1</span>))</span><br><span class="line">c4 = <span class="number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span></span><br><span class="line">m3 = <span class="built_in">pow</span>(c4, d3, n3)</span><br><span class="line">m3_ = long_to_bytes(m3)</span><br><span class="line"><span class="built_in">print</span>(m3_)</span><br></pre></td></tr></table></figure>
<p>结果为：b'nd black, and pale, and hectic red,-stricken multitudes: O thou,chariotest to their dark wintry bed'</p>
<p>观察第三部分加密代码，发现使用了相同的模数N2，所以采用共模攻击 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span></span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">c3 = <span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e2, e3)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    c2 = gmpy2.invert(c2, n2)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    c3 = gmpy2.invert(c3, n2)</span><br><span class="line">plain = gmpy2.powmod(c2, s, n2) * gmpy2.powmod(c3, t, n2) % n2</span><br><span class="line">m2_ = long_to_bytes(plain)</span><br><span class="line"><span class="built_in">print</span>(m2_)</span><br></pre></td></tr></table></figure>
<p>结果为：b"n's being,, from whose unseen presence the leaves deaddriven, like ghosts from an enchanter fleeing,, a"</p>
<p>观察第一部分代码，由于e=3，所以采用小公钥指数攻击 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">c1 = <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    a, b = gmpy2.iroot(c1+k*n1, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        m = a</span><br><span class="line">        m1_ = long_to_bytes(m)</span><br><span class="line">        <span class="built_in">print</span>(m1_)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>结果为：b' wild West Wind, thou breath of Autum'</p>
<p>合并之后，结果为： O wild West Wind, thou breath of Autumn's being, Thou, from whose unseen presence the leaves dead Are driven, like ghosts from an enchanter fleeing, Yellow, and black, and pale, and hectic red, Pestilence-stricken multitudes: O thou, Who chariotest to their dark wintry bed 这不是雪莱的西风颂吗</p>
<p>最后进行md5加密 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">m = (m1_+m2_+m3_).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">hl = hashlib.md5()</span><br><span class="line">hl.update(m.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(hl.hexdigest())</span><br></pre></td></tr></table></figure>
<p>结果为：3943e8843a19149497956901e5d98639</p>
<h2 id="结语">结语</h2>
<p>之前画的饼就鸽了 最近没有什么学习动力 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-19</title>
    <url>/uncategorized/2021/05/19/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-19</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="你听过一次一密么">你听过一次一密么？</h2>
<p>没听过 找 wp 搜到了<a href="https://www.ruanx.net/many-time-pad/">一次一密的介绍</a> 再搜索 Many-Time-Pad 然后找到了 <a href="https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py">many-time-pad-attack 脚本</a> 然而是 python2 代码，没有环境 找到了<a href="https://paiza.io/projects/c9fqcRW5l_3001d1xOlVAw?language=python">在线 python2</a>（竟然还支持代码补全） 然后把密文代进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class="line"><span class="comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class="line"></span><br><span class="line">c1=<span class="string">&#x27;25030206463d3d393131555f7f1d061d4052111a19544e2e5d&#x27;</span></span><br><span class="line">c2=<span class="string">&#x27;0f020606150f203f307f5c0a7f24070747130e16545000035d&#x27;</span></span><br><span class="line">c3=<span class="string">&#x27;1203075429152a7020365c167f390f1013170b1006481e1314&#x27;</span></span><br><span class="line">c4=<span class="string">&#x27;0f4610170e1e2235787f7853372c0f065752111b15454e0e09&#x27;</span></span><br><span class="line">c5=<span class="string">&#x27;081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18&#x27;</span></span><br><span class="line">c6=<span class="string">&#x27;0909075412132e247436425332281a1c561f04071d520f0b11&#x27;</span></span><br><span class="line">c7=<span class="string">&#x27;4116111b101e2170203011113a69001b475206011552050219&#x27;</span></span><br><span class="line">c8=<span class="string">&#x27;041006064612297020375453342c17545a01451811411a470e&#x27;</span></span><br><span class="line">c9=<span class="string">&#x27;021311114a5b0335207f7c167f22001b44520c15544801125d&#x27;</span></span><br><span class="line">c10=<span class="string">&#x27;06140611460c26243c7f5c167f3d015446010053005907145d&#x27;</span></span><br><span class="line">c11=<span class="string">&#x27;0f05110d160f263f3a7f4210372c03111313090415481d49&#x27;</span></span><br><span class="line">ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]</span><br><span class="line"><span class="comment"># The target ciphertext we want to crack</span></span><br><span class="line"><span class="comment">#target_cipher = ？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span>     <span class="comment"># xor two strings (trims the longer input)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_fix</span>(<span class="params">target_cipher</span>):</span></span><br><span class="line">    <span class="comment"># To store the final key</span></span><br><span class="line">    final_key = [<span class="literal">None</span>]*<span class="number">150</span></span><br><span class="line">    <span class="comment"># To store the positions we know are broken</span></span><br><span class="line">    known_key_positions = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For each ciphertext</span></span><br><span class="line">    <span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">        counter = collections.Counter()</span><br><span class="line">        <span class="comment"># for each other ciphertext</span></span><br><span class="line">        <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">            <span class="keyword">if</span> current_index != index: <span class="comment"># don&#x27;t xor a ciphertext with itself</span></span><br><span class="line">                <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))): <span class="comment"># Xor the two ciphertexts</span></span><br><span class="line">                    <span class="comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#x27;t know which one)</span></span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[indexOfChar] += <span class="number">1</span> <span class="comment"># Increment the counter at this index</span></span><br><span class="line">        knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class="line">        <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">            <span class="comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class="line">            <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line">        <span class="comment">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class="line">        xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>),<span class="string">&#x27; &#x27;</span>*<span class="number">150</span>)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">            <span class="comment"># Store the key&#x27;s value at the correct position</span></span><br><span class="line">            final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">            <span class="comment"># Record that we known the key at this position</span></span><br><span class="line">            known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct a hex key from the currently known key, adding in &#x27;00&#x27; hex chars where we do not know (to make a complete hex string)</span></span><br><span class="line">    final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line">    <span class="comment"># Xor the currently known key with the target cipher</span></span><br><span class="line">    output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(output)])+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># WAIT.. MANUAL STEP HERE </span></span><br><span class="line">    <span class="comment"># This output are printing a * if that character is not known yet</span></span><br><span class="line">    <span class="comment"># fix the missing characters like this: &quot;Let*M**k*ow if *o&#123;*a&quot; = &quot;cure, Let Me know if you a&quot;</span></span><br><span class="line">    <span class="comment"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class="line">    <span class="comment"># and we have our key to fix the entire text!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#sys.exit(0) #comment and continue if u got a good key</span></span><br><span class="line"></span><br><span class="line">    target_plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fixed:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> target_plaintext+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    key = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),target_plaintext)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Decrypted msg:&quot;</span></span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">        <span class="built_in">print</span> strxor(cipher.decode(<span class="string">&#x27;hex&#x27;</span>),key)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\nPrivate key recovered: &quot;</span>+key+<span class="string">&quot;\n&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphers:</span><br><span class="line">    target_fix(i)</span><br></pre></td></tr></table></figure>
<p>唯一迷惑的地方就是这个 target_plaintext 是什么？ 我怎么知道这个 target_plaintext 是什么 再找 <a href="https://www.pythonf.cn/read/163681">wp</a> 发现 target_plaintext 是用 cure, Let Me know if you a 代（nmd,为什么？） 只能自己试试了 先用空字符串代，结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Fix this sentence:</span><br><span class="line">Dear Frie*d**T*<span class="keyword">is</span> tim* G*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">nderstood*m**m*stake *nj*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">sed One t*m**p*d encr*pz*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">n scheme,*I**e*rd tha* g*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line"><span class="keyword">is</span> the on*y**n*ryptio* c*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">hod that *s**a*hemati*ab*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line"> proven t* ** *ot cra*kk*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">ever <span class="keyword">if</span> t*e**e* <span class="keyword">is</span> ke*t.*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">cure, Let*M**k*ow <span class="keyword">if</span> *o&#123;*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">gree <span class="keyword">with</span>*m**t* use t*i&#125;*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br><span class="line"></span><br><span class="line">Fix this sentence:</span><br><span class="line">ncryption*s**e*e alwa*s </span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line"></span><br><span class="line">Private key recovered: </span><br></pre></td></tr></table></figure>
<p>怎么都是些意义不明的字符？ 尝试修复第一个语句：Dear Frie*d**T<em>is tim</em> G* -&gt; Dear Friend IT is time Go 代入 plaintext 结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Fix this sentence:</span><br><span class="line">Dear Frie*d**T*<span class="keyword">is</span> tim* G*</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line">Dear Friend IT <span class="keyword">is</span> time Go</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line">Dear Friend IT <span class="keyword">is</span> time Go</span><br><span class="line">nderstood muIm!stake anjo</span><br><span class="line">sed One timiIp)d encrypz&amp;</span><br><span class="line">n scheme, I,e)rd that g;</span><br><span class="line"><span class="keyword">is</span> the only,n+ryption c*</span><br><span class="line">hod that <span class="keyword">is</span>,a&lt;hematicab<span class="comment">#</span></span><br><span class="line"> proven to n &amp;ot crackk+</span><br><span class="line">ever <span class="keyword">if</span> the,e1 <span class="keyword">is</span> kept.&lt;</span><br><span class="line">cure, Let MiIk&amp;ow <span class="keyword">if</span> yo&#123;o</span><br><span class="line">gree <span class="keyword">with</span> miIt<span class="string">&#x27; use thi&#125;o</span></span><br><span class="line"><span class="string">ncryption soe%e always </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: afctf&#123;OPT_16I&amp;t3rest1ni2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">nderstood*m**m*stake *nj*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">nderstood muIm!stake anjo</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">Yd` \x&amp;u&#x27;</span>d&lt;II(~<span class="string">&#x27;$qo?&#125;&gt;W&amp;</span></span><br><span class="line"><span class="string">D!wc;Wpc-n@y\(hcakd,pnJ;</span></span><br><span class="line"><span class="string">Cr$t;W=io&quot;pyW*h~1ke&quot;jnN*</span></span><br><span class="line"><span class="string">Bn` &#x27;</span>Z|r!<span class="string">&#x27;zyX=rb,~x$g/O#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">qvo%Ws&amp;u!);&#x27;</span>usa|~,g%F+</span><br><span class="line">Owars[&#123;&amp;u&amp;ly\<span class="number">0</span>:n2?g(t:&lt;</span><br><span class="line">ItveQcunD&lt;I<span class="string">R&#x27;upavjm&#125;!Vo</span></span><br><span class="line"><span class="string">MsaesEtrind&lt;IM&amp;:r2z,9l&#x27;</span>Po</span><br><span class="line">Dbvy<span class="comment">#Ftionz:\$&#x27; s&#123;,&#125;=</span></span><br><span class="line"></span><br><span class="line">Private key recovered: Kggt5IRVU<span class="number">8</span>*6p<span class="string">&#x27;n43z95 D2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">sed One t*m**p*d encr*pz*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">sed One timiIp)d encrypz&amp;</span></span><br><span class="line"><span class="string">Yd` \x&amp;u&#x27;</span>d&lt;II(~<span class="string">&#x27;$qo?&#125;&gt;W&amp;</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">Y v1Mz,=&#x27;</span>@eA 7enb~hpZr</span><br><span class="line">^s%&amp;M7&amp;kpeJ<span class="string">&quot;*5ncprp^c</span></span><br><span class="line"><span class="string">_oar@v=1nzeE5e6(&#123;~v1_j</span></span><br><span class="line"><span class="string">pw=Myieh)&#x27;/b&#x27;eyx~;Vb</span></span><br><span class="line"><span class="string">Rv` OAqieoleA8-:6:azl$u</span></span><br><span class="line"><span class="string">Tuw7C[,e&#x27;D IO/b$esl?e?F&amp;</span></span><br><span class="line"><span class="string">Pr`7O_~=y&#x27;d IP.-&amp;6*kt9@&amp;</span></span><br><span class="line"><span class="string">Ycw+\~&amp;&#x27;z&amp;A,hs$v&#125;~e#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: Vff&amp;	SXEX866m/y`7yk-&gt;T&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">n scheme,*I**e*rd tha* g*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">n scheme, I,e)rd that g;</span></span><br><span class="line"><span class="string">D!wc;Wpc-n@y\(hcakd,pnJ;</span></span><br><span class="line"><span class="string">Y v1Mz,=&#x27;@eA 7enb~hpZr</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">C62e F?c&#x27;&quot;</span>T D_<span class="string">&quot;inpthc C~</span></span><br><span class="line"><span class="string">B*v1&lt;K~xi&#x27;^ LP5srmaueraBw</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5`~&gt;Fq,=!</span></span><br><span class="line"><span class="string">bD/tc csmrkK</span></span><br><span class="line"><span class="string">O3wchJy,=&amp;H JT8;~s jiath</span></span><br><span class="line"><span class="string">I0`tdSi=n`eZ/t` ig,ho[;</span></span><br><span class="line"><span class="string">M7wthTvx!n@eE.;bse!xyi];</span></span><br><span class="line"><span class="string">D&amp;`h8Wvc&#x27;n^cIT,~7alvmhs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: K#qe.XP\s~x/o$rerx nIf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">is the on*y**n*ryptio* c*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">is the only,n+ryption c*</span></span><br><span class="line"><span class="string">Cr$t;W=io&quot;</span>pyW*h~1ke<span class="string">&quot;jnN*</span></span><br><span class="line"><span class="string">^s%&amp;M7&amp;kpeJ&quot;</span>*5ncprp^c</span><br><span class="line">C62e F?c<span class="string">&#x27;&quot;T D_&quot;inpthc C~</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">Ey%&amp;&lt;K3r+kn A[7so=atkhaFf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f3i&gt;F&lt;&amp;m=bI-t~pcrchkOn</span></span><br><span class="line"><span class="string">H`$thJ4&amp;jx G_:;c# kg&#123;t</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">Nc3cdc&quot;PeQ-t&#125;pif&quot;ro_*</span></span><br><span class="line"><span class="string">Jd$chT;rc&quot;peN,;#e vciY*</span></span><br><span class="line"><span class="string">Cu38W;ie&quot;ncD_.~*1lwcrs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: Lp&quot;r.XV_],sss-o9&quot;esv:nMw</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">hod that *s**a*hemati*ab*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">hod that is,a&lt;hematicab#</span></span><br><span class="line"><span class="string">Bn` &#x27;</span>Z|r!<span class="string">&#x27;zyX=rb,~x$g/O#</span></span><br><span class="line"><span class="string">_oar@v=1nzeE5e6(&#123;~v1_j</span></span><br><span class="line"><span class="string">B*v1&lt;K~xi&#x27;</span>^ LP5srmaueraBw</span><br><span class="line">Ey%&amp;&lt;K3r+kn A[7so=atkhaFf</span><br><span class="line">Dear Friend IT <span class="keyword">is</span> time Go</span><br><span class="line">zw=<span class="string">&quot;K&#125;=1h7bA:nbmvoee*Ng</span></span><br><span class="line"><span class="string">I|` tGu=1or OP-!&gt;5vav5p</span></span><br><span class="line"><span class="string">Ow7x_x1&#x27;Ze^:nam|&#123;$.^#</span></span><br><span class="line"><span class="string">Kx`7tYzi-&#x27;zeA;!c&gt;p=pn(X#</span></span><br><span class="line"><span class="string">Biw+$Zzr+&#x27;dcLP9d6,yje2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: Mlf&amp;2U\MX&amp;s&#123;|:u%?pnp7/L~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string"> proven t* ** *ot cra*kk*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string"> proven to n &amp;ot crackk+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">qvo%Ws&amp;u!);&#x27;usa|~,g%F+</span></span><br><span class="line"><span class="string">pw=Myieh)&#x27;/b&#x27;eyx~;Vb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5`~&gt;Fq,=!</span></span><br><span class="line"><span class="string">bD/tc csmrkK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f3i&gt;F&lt;&amp;m=bI-t~pcrchkOn</span></span><br><span class="line"><span class="string">zw=&quot;</span>K&#125;=1h7bA:nbmvoee*Ng</span><br><span class="line">Dear Friend IT <span class="keyword">is</span> time Go</span><br><span class="line">cvovJziei!bG<span class="number">7</span>&amp;ns7piv?x</span><br><span class="line">`axzP,e!	<span class="string">&#x27; ip ~&#125;,$W+</span></span><br><span class="line"><span class="string">gvxvTu=y!)&#x27;</span>!&amp;rsr;xn<span class="string">&quot;Q+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vad&amp;Wu&amp;!7!D#c&#x27;a&#123;lm8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: spi0XSE^u1s= r4rrhx7%Ev</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">ever if t*e**e* is ke*t.*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">ever if the,e1 is kept.&lt;</span></span><br><span class="line"><span class="string">Owars[&#123;&amp;u&amp;ly\0:n2?g(t:&lt;</span></span><br><span class="line"><span class="string">Rv` OAqieoleA8-:6:azl$u</span></span><br><span class="line"><span class="string">O3wchJy,=&amp;H JT8;~s jiath</span></span><br><span class="line"><span class="string">H`$thJ4&amp;jx G_:;c# kg&#123;t</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">I|` tGu=1or OP-!&gt;5vav5p</span></span><br><span class="line"><span class="string">cvovJziei!bG7&amp;ns7piv?x</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">Bfve,X,e&amp;LeZ7&amp;ms=d(l;&lt;</span></span><br><span class="line"><span class="string">Faae X&#125;=y&amp;leE6io 1&quot;</span>|&#125;=&lt;</span><br><span class="line">Opvyp[&#125;&amp;&amp;rcJT4,:28uil<span class="string">&#x27;I</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: @ugtfT[EY0s&#125;x7=)!1q|$:a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">cure, Let*M**k*ow if *o&#123;*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">cure, Let MiIk&amp;ow if yo&#123;o</span></span><br><span class="line"><span class="string">ItveQcunD&lt;IR&#x27;</span>upavjm&#125;!Vo</span><br><span class="line">Tuw7C[,e<span class="string">&#x27;D IO/b$esl?e?F&amp;</span></span><br><span class="line"><span class="string">I0`tdSi=n`eZ/t` ig,ho[;</span></span><br><span class="line"><span class="string">Nc3cdc&quot;PeQ-t&#125;pif&quot;ro_*</span></span><br><span class="line"><span class="string">Ow7x_x1&#x27;</span>Ze^:nam|&#123;$.^<span class="comment">#</span></span><br><span class="line">`axzP,e!	<span class="string">&#x27; ip ~&#125;,$W+</span></span><br><span class="line"><span class="string">Bfve,X,e&amp;LeZ7&amp;ms=d(l;&lt;</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">@bvr,WxynD IK!&amp;qsx/9t&amp;Ao</span></span><br><span class="line"><span class="string">Isan|WcnZ&amp;Z#c$aqx,e&lt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Private key recovered: Fvpcjq\E66v r7rx|9-!U2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">gree with*m**t* use t*i&#125;*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">gree with miIt&#x27;</span> use thi&#125;o</span><br><span class="line">MsaesEtrind&lt;IM&amp;:r2z,<span class="number">9l</span><span class="string">&#x27;Po</span></span><br><span class="line"><span class="string">Pr`7O_~=y&#x27;</span>d IP.-&amp;<span class="number">6</span>*kt9@&amp;</span><br><span class="line">M7wthTvx!n@eE.;bse!xyi];</span><br><span class="line">Jd$chT;rc<span class="string">&quot;peN,;#e vciY*</span></span><br><span class="line"><span class="string">Kx`7tYzi-&#x27;zeA;!c&gt;p=pn(X#</span></span><br><span class="line"><span class="string">gvxvTu=y!)&#x27;!&amp;rsr;xn&quot;</span>Q+</span><br><span class="line">Faae X&#125;=y&amp;leE6io <span class="number">1</span><span class="string">&quot;|&#125;=&lt;</span></span><br><span class="line"><span class="string">@bvr,WxynD IK!&amp;qsx/9t&amp;Ao</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string">MtvnpErrcnz&amp;E&quot;</span>,&amp;<span class="number">2</span>&#125;&gt;xt:</span><br><span class="line"></span><br><span class="line">Private key recovered: BqgcfJTMY866i!=<span class="number">5</span>!t:m&lt;<span class="string">&#x27;S2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fix this sentence:</span></span><br><span class="line"><span class="string">ncryption*s**e*e alwa*s </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Fixed:</span></span><br><span class="line"><span class="string">Dear Friend IT is time Go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decrypted msg:</span></span><br><span class="line"><span class="string">ncryption soe%e always </span></span><br><span class="line"><span class="string">Dbvy#Ftionz:\$&#x27;</span> s&#123;,&#125;=</span><br><span class="line">Ycw+\~&amp;<span class="string">&#x27;z&amp;A,hs$v&#125;~e#</span></span><br><span class="line"><span class="string">D&amp;`h8Wvc&#x27;</span>n^cIT,~7alvmhs</span><br><span class="line">Cu38W;ie<span class="string">&quot;ncD_.~*1lwcrs</span></span><br><span class="line"><span class="string">Biw+$Zzr+&#x27;dcLP9d6,yje2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vad&amp;Wu&amp;!7!D#c&#x27;a&#123;lm8</span></span><br><span class="line"><span class="string">Opvyp[&#125;&amp;&amp;rcJT4,:28uil&#x27;I</span></span><br><span class="line"><span class="string">Isan|WcnZ&amp;Z#c$aqx,e&lt;</span></span><br><span class="line"><span class="string">MtvnpErrcnz&amp;E&quot;</span>,&amp;<span class="number">2</span>&#125;&gt;xt:</span><br><span class="line">Dear Friend IT <span class="keyword">is</span> time G</span><br><span class="line"></span><br><span class="line">Private key recovered: K`p6ITV_&amp;<span class="number">0</span>~x<span class="comment">#x`3&#125;mx-=</span></span><br></pre></td></tr></table></figure>
<p>唉，发现结果中有这么一句：afctf{OPT_16I&amp;t3rest1ni2 但是没有什么进展了 你可以尝试修复其他语句并代入： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nderstood*m**m*stake *nj*</span><br><span class="line">sed One t*m**p*d encr*pz*</span><br><span class="line">n scheme,*I**e*rd tha* g*</span><br><span class="line"><span class="keyword">is</span> the on*y**n*ryptio* c*</span><br><span class="line">hod that *s**a*hemati*ab*</span><br><span class="line">proven t * ** *ot cra * kk *</span><br><span class="line">ever <span class="keyword">if</span> t*e**e* <span class="keyword">is</span> ke*t.*</span><br><span class="line">cure, Let*M**k*ow <span class="keyword">if</span> *o&#123;*</span><br><span class="line">gree <span class="keyword">with</span>*m**t* use t*i&#125;*</span><br><span class="line">ncryption * s ** e * e alwa * s</span><br></pre></td></tr></table></figure> 观察结果，可以得到 flag：afctf{OPT_1s_Int3rest1ng} 当然，我不确定这是不是标准解法 但是这确实可以解出来 有无大佬解释一波？</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-20</title>
    <url>/uncategorized/2021/05/20/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-20</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-5-20">BUUCTF 每日打卡 2021-5-20</h1>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="easyprogram">EasyProgram</h2>
<p>题目给了一堆加密伪代码： get buf unsign s[256] get buf t[256] we have key:whoami we have flag:????????????????????????????????</p>
<p>for i:0 to 256 set s[i]:i</p>
<p>for i:0 to 256 set t[i]:key[(i)mod(key.lenth)]</p>
<p>for i:0 to 256 set j:(j+s[i]+t[i])mod(256) swap:s[i],s[j]</p>
<p>for m:0 to 38 set i:(i + 1)mod(256) set j:(j + S[i])mod(256) swap:s[i],s[j] set x:(s[i] + (s[j]mod(256))mod(256)) set flag[m]:flag[m]^s[x]</p>
<p>fprint flagx to file 可以发现，程序的前三个 for 循环都没有涉及到 flag，知识构造了两个数组 s, t，并且进行了一系列操作 在最后一个 for 循环中将 flag 与数组 s 做异或运算得到密文 所以只要按代码所述构造 s，然后与密文做异或运算即可得出密文 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">flagx = [<span class="built_in">int</span>(<span class="built_in">str</span>(c)[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(flagx)</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line">t = []</span><br><span class="line">key = <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">    s.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">    t.append(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">     j = (j+<span class="built_in">int</span>(s[i]) + <span class="built_in">int</span>(<span class="built_in">ord</span>(t[i]))) % <span class="number">256</span></span><br><span class="line">     s[i], s[j] = s[j], s[i]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>; j = <span class="number">0</span>; x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">38</span>):</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">    x = (s[i] + (s[j] % <span class="number">256</span>)) % <span class="number">256</span></span><br><span class="line">    flagx[m] = flagx[m] ^ s[x]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(flagx[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">38</span>)))</span><br></pre></td></tr></table></figure>
<p>结果为：flag{f238yu28323uf28u2yef2ud8uf289euf} 参考代码：<a href="https://www.codenong.com/cs106478950/">https://www.codenong.com/cs106478950/</a></p>
<h2 id="classical-cipher">Classical Cipher</h2>
<p>附件内容是一个 key.txt 和一个包含了一张图片的加密压缩包 key.txt 内容为： 解密后的flag请用flag{}包裹 压缩包密码：gsv_pvb_rh_zgyzhs 对应明文： ***_key_**_******</p>
<p>看到题目，猜想是凯撒密码 <img data-src="https://img-blog.csdnimg.cn/20210520233321182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 但是不对 然后尝试用词频分析爆破： <img data-src="https://img-blog.csdnimg.cn/20210520233402725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img data-src="https://img-blog.csdnimg.cn/20210520233416278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 试了几个，不行 只能用传统艺能：找 <a href="https://www.anquanke.com/post/id/217151">wp</a> 原来是 <a href="https://ctf-wiki.org/crypto/classical/monoalphabetic/#atbash-cipher">Atbash Cipher</a>（没碰到过） 解压加密压缩包，得到图片： <img data-src="https://img-blog.csdnimg.cn/20210520233730791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> 容易发现其中一种密码是变种的猪圈密码： <img data-src="https://img-blog.csdnimg.cn/20210520233901761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 另一种是啥？ 原来是埃及象形文字（啊这） <img data-src="https://img-blog.csdnimg.cn/20210520234033839.png" alt="在这里插入图片描述" /> 得到结果： <img data-src="https://img-blog.csdnimg.cn/20210520234049138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /> flag 均为小写，即为结果</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-21</title>
    <url>/uncategorized/2021/05/21/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-21</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-5-21">BUUCTF 每日打卡 2021-5-21</h1>
<h2 id="引言">引言</h2>
<p>还有一个月就要期末考了，摸了摸了（ 周末还要组织校赛，考四级口语，事情老多了</p>
<h2 id="base">BASE</h2>
<p>题目给了一个 22.8MB 的 txt 文件，里面都是数字和大写字母 看着好像就是普通的十六进制啊 结果尝试直接转十进制看看有没有头绪， 结果程序半天不出结果。。。 看着也不像 base64 啊 找 <a href="https://shawroot.hatenablog.com/entry/2019/12/30/AFCTF2018/BUUCTF-BASE">wp</a>（ 直接暴力尝试 base16，base32，base64。。。 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;flag_encode.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file2 = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">base = file.read()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        base = base64.b32decode(base).decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            base = base64.b64decode(base).decode()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                base = base64.b16decode(base).decode()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;解码完毕qwq！&quot;</span>)</span><br><span class="line">                file2.write(base)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>结果为：afctf{U_5h0u1d_Us3_T00l5}</p>
<h2 id="ezrsa">EzRSA</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> lcm , powmod</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">gift = lcm(p - <span class="number">1</span> , q - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">54722</span></span><br><span class="line">flag = <span class="string">b&#x27;NPUCTF&#123;******************&#125;&#x27;</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag , <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">c = powmod(m , e , n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n: &#x27;</span> , n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gift: &#x27;</span> , gift)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c: &#x27;</span> , c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n:  17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121</span></span><br><span class="line"><span class="comment">#gift:  2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104</span></span><br><span class="line"><span class="comment">#c:  3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319</span></span><br></pre></td></tr></table></figure>
<p>题目给了 <code>lcm(p - 1 , q - 1)</code>（<span class="math inline">\(p-1\)</span> 和 <span class="math inline">\(q-1\)</span> 的最小公倍数），又因为 <span class="math display">\[
lcm(p-1,q-1) = \frac{(p-1)*(q-1)}{gcd(p-1,q-1)}
\]</span> 所以 <span class="math display">\[
\varphi = (p-1)*(q-1) = gcd(p-1,q-1) * lcm(p-1,q-1)
\]</span> 又因为 <span class="math inline">\(n=p*q\)</span> , <span class="math inline">\(p, q\)</span> 均为大质数，所以有 <span class="math inline">\(n\approx \varphi\)</span> 故 <span class="math display">\[
gcd(p-1,q-1)\approx \frac{n}{lcm(p-1,q-1)} = \frac{n}{gift}
\]</span> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121</span></span><br><span class="line">gift = <span class="number">2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104</span></span><br><span class="line">c = <span class="number">3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319</span></span><br><span class="line">e = <span class="number">54722</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n//gift)</span><br></pre></td></tr></table></figure>
<p>得到结果 <span class="math inline">\(gcd(p-1,q-1)\approx 8\)</span>​​ 另一个奇怪的地方就是 <span class="math inline">\(e = 54722\)</span>​​ 与 <span class="math inline">\(\varphi\)</span>​​ 不互质，与原来的 RSA 加密算法不同 我们令 <span class="math inline">\(e&#39;=e//2\)</span>​​ 因为<span class="math inline">\(e&#39;\)</span>​​与<span class="math inline">\(\varphi\)</span>​​互质 所以有 <span class="math inline">\(ed \equiv 1 \space mod \space \varphi\)</span>​​ 故有 <span class="math inline">\(d&#39;=2*d\space s.t.\space e&#39;d&#39; = ed \equiv 1 \space mod \space n\)</span>​​ 而 <span class="math inline">\(m&#39; \equiv c^{d&#39;} \space mod \space n = c^{2d} \space mod \space n\)</span>​​ 所以 <span class="math inline">\(m \equiv \sqrt{m&#39;} \space mod \space n\)</span>​​ 完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, iroot</span><br><span class="line"></span><br><span class="line">n = <span class="number">17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121</span></span><br><span class="line">gift = <span class="number">2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104</span></span><br><span class="line">c = <span class="number">3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319</span></span><br><span class="line">e = <span class="number">54722</span></span><br><span class="line"></span><br><span class="line">phi = gift * (n//gift)</span><br><span class="line">e = e//<span class="number">2</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = iroot(m, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：NPUCTF{diff1cult_rsa_1s_e@sy}</p>
<h2 id="结语">结语</h2>
<p>不知不觉这个学期算上今天已经更了 47 篇了 总算把前三面刷完了，快要把 1 分题刷穿了 这学期就到这了 希望继续坚持吧</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-14</title>
    <url>/uncategorized/2021/07/14/vacation_week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-14</url>
    <content><![CDATA[<h1 id="buuctf-每日打卡-2021-7-14">BUUCTF 每日打卡 2021-7-14</h1>
<h2 id="引言">引言</h2>
<p>鸽了快两个月，假期继续刷BUU，可以的话继续cryptohack</p>
<h2 id="四面八方">四面八方</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210714174137916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 看题干也看不出来什么 给了一个txt文件 key1:security key2:information</p>
<p>密文啊这是，骚年加油：zhnjinhoopcfcuktlj 摸不着头脑 找wp，知道是没见过的<a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC">四方密码</a> 是一种对称加密，多表替换密码 找了一个靠谱的<a href="http://www.online.crypto-it.net/eng/four-square.html">在线工具</a> <img data-src="https://img-blog.csdnimg.cn/20210714174844185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后把结果换成小写套上flag就行</p>
<h2 id="de1ctf2019babyrsa">[De1CTF2019]babyrsa</h2>
<p>加密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> e1,e2,p,q1p,q1q,hint,flag</span><br><span class="line"></span><br><span class="line">n =  [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L</span>]</span><br><span class="line">c =  [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L</span>]</span><br><span class="line">f=<span class="keyword">lambda</span> m,e,n,c:<span class="built_in">pow</span>(m,e,n)==c</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(f,[p]*<span class="number">4</span>,[<span class="number">4</span>]*<span class="number">4</span>,n,c))==<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e1,ee1,n)==ce1)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(e2+tmp,ee2,n)==ce2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line">hint=<span class="built_in">int</span>(binascii.hexlify(hint),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span>(q1p*q1q==n)</span><br><span class="line"><span class="keyword">assert</span>(q1p&lt;q1q)</span><br><span class="line"><span class="keyword">assert</span>(c==<span class="built_in">pow</span>(hint,e,n))</span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">int</span>(binascii.hexlify(flag),<span class="number">16</span>)</span><br><span class="line">q1=q1p</span><br><span class="line">q2 =  <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 =  <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 =  <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"><span class="keyword">assert</span>(c1==<span class="built_in">pow</span>(flag,e1,p*q1))</span><br><span class="line"><span class="keyword">assert</span>(c2==<span class="built_in">pow</span>(flag,e2,p*q2))</span><br></pre></td></tr></table></figure> 可以看出加密由三部分组成 先试着解密hint看看有什么提示</p>
<h3 id="hint解密">hint解密</h3>
<p>遇事不决，先尝试爆破n <img data-src="https://img-blog.csdnimg.cn/20210714212905119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后就是正常的RSA解密 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line">q1p = <span class="number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span></span><br><span class="line">q1q = <span class="number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088835693</span></span><br><span class="line">phi = (q1q-<span class="number">1</span>) * (q1p-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">hint = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(hint)</span><br></pre></td></tr></table></figure>
<p>解密结果为： <img data-src="https://img-blog.csdnimg.cn/20210714213028344.png" alt="在这里插入图片描述" /> 啊这 果然没那么简单吗 然后看第四部分，也就是加密flag的部分 其中q1p也就是q1已经爆破出来了 还有e1,e2和p未知 再看第二部分，也就是加密e1,e2的部分</p>
<h3 id="e1e2解密">e1,e2解密</h3>
<p>ee1和ee2比较小，可以采用<strong>小公钥指数爆破</strong>的方法 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 =  <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 =  <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp =  <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n  =  <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    a, b = gmpy2.iroot(ce1+k*n, ee1)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        e1 = a</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;e1 =&#x27;</span>, e1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100000</span>):</span><br><span class="line">    a, b = gmpy2.iroot(ce2+k*n, ee2)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        e2 = a</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        e2 -= tmp</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;e2 =&#x27;</span>, e2)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到结果： <img data-src="https://img-blog.csdnimg.cn/2021071421351490.png" alt="在这里插入图片描述" /> 然后解密p</p>
<h3 id="p解密">p解密</h3>
<p>加密p的部分提供了4对n和c 猜测应该采用<strong>广播攻击</strong> 使用广播攻击要满足n互素，否则失败，见<a href="https://blog.csdn.net/weixin_52446095/article/details/115648034?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162626992416780264036681%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162626992416780264036681&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-115648034.pc_v2_rank_blog_default&amp;utm_term=%E5%B9%BF%E6%92%AD&amp;spm=1018.2226.3001.4450">BUUCTF 每日打卡 2021-4-12</a> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n =  [<span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>, <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>, <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>, <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]</span><br><span class="line">c =  [<span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>, <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>, <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>, <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]</span><br><span class="line">e = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(n[i], n[j]) != <span class="number">1</span>:</span><br><span class="line">            p = gmpy2.gcd(n[i], n[j])</span><br><span class="line">            k_p, k_q = i, j</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>此题满足条件 先用sagemath封装好的CRT（中国剩余定理）解出<span class="math inline">\(m^e\)</span>，代码如下： <img data-src="https://img-blog.csdnimg.cn/20210714214240300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 最后开e次方得到m，也就是p 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m_e = <span class="number">146068806215073497344459876631371603884129554507314987227041386431864296983800292232765852493230146632246223391161616274352995602128509562953556195654254929572680238155614318159006433172894208760309766144817665852858474274746295434459658946786114485553768622540321693696983334739989582184316792317376817587284066141025953893816735983622448994863347051427279673308801466174898201800602688359956097373676655607179834345973775227535147398518523539179261883968140504230643073698857288314127486345168652339309386405706576632120711116391426300160476076254612138216623537070845645803721685414583459545099925250474009703135469241079408739336592005949980987466671054020054633554508243871664072158338203090563533576053886607251476483441992750608537110739543678599105838456537686029895264928334606913181627024815548789841726411333636163152202116487198575625907392074866811580053962217284776220330628233642351622897902940633662074194963147661868086182955886918339487179905557899816215131118989868243555958033477834658657082003718410617182774845820310639577794302769424451100567749840744304334325501306470124397022077759031911677326433654909824518845224227308515695216456907499080502091628962571645468099748573164070147303131348996440422701533681</span></span><br><span class="line">x, y = gmpy2.iroot(m_e, e)</span><br><span class="line"><span class="built_in">print</span>(x, y)</span><br><span class="line">p = x</span><br></pre></td></tr></table></figure>
<p>得到结果： <img data-src="https://img-blog.csdnimg.cn/20210714214419879.png" alt="在这里插入图片描述" /> 最后解密flag</p>
<h3 id="flag解密">flag解密</h3>
<p>加密部分看似是普通的RSA加密，但是给了两个式子就很奇怪 尝试直接套RSA解密的话解出来是一堆乱码 解不出来找<a href="https://blog.csdn.net/weixin_44110537/article/details/1e7433092">wp</a>才知道，这和普通的RSA有区别，其中<span class="math inline">\(gcd(e_1, p*q_1) = gcd(e_2, p*q_2) = 14 \neq 1\)</span> 联想到之前解得一道<a href="https://blog.csdn.net/weixin_52446095/article/details/117136443?spm=1001.2014.3001.5501">EzRSA</a>也是这种情况 仿照那道题发现开14次方不能开出来 参照<a href="https://www.codenong.com/cs109681910/">另一个wp</a>（其实就是对之前那个wp的解释，但是之前那个没怎么看懂），给出解法 <span class="math display">\[
\begin{cases}
c_1 \equiv m^{e_1} \space mod \space p*q_1\\
c_2 \equiv m^{e_2} \space mod \space p*q_2
\end{cases}
\Rightarrow
\begin{cases}
c_1 \equiv m^{14*(\frac{e_{1}}{14})} \space mod \space p*q_1\\
c_2 \equiv m^{14*(\frac{e_{2}}{14})} \space mod \space p*q_2
\end{cases}
\]</span> 而<span class="math inline">\(gcd(\frac{e_{1}}{14}, p*q_1) = gcd(\frac{e_{2}}{14}, p*q_2) =1\)</span> 所以<span class="math inline">\(m^{14} \equiv c_{1}^{d_1} \space mod \space p*q_1\)</span>，其中<span class="math inline">\(\frac{e_{1}}{14}*d_1 \equiv 1\space mod \space p*q_1\)</span> 同理，有<span class="math inline">\(m^{14} \equiv c_{2}^{d_2} \space mod \space p*q_2\)</span>，其中<span class="math inline">\(\frac{e_{2}}{14}*d_2 \equiv 1\space mod \space p*q_2\)</span> 此时可以用中国剩余定理求出一个特解,但是不是最终解，是因为<span class="math inline">\(gcd(14, p-1)=14\)</span>亦即<span class="math inline">\(p-1\)</span>是14的整数倍，所以会失败 于是将上两式拆成四式： <span class="math display">\[
\begin{cases}
m^{14} \equiv c_{1}^{d_1}  \space mod \space p \cdots(1)\\
m^{14} \equiv c_{1}^{d_1}  \space mod \space q_1 \cdots(2)\\
m^{14} \equiv c_{2}^{d_2}  \space mod \space p \cdots(3)\\
m^{14} \equiv c_{2}^{d_2}  \space mod \space q_2 \cdots(4)
\end{cases}
\]</span> 选择不含<span class="math inline">\(p\)</span>的式子，亦即(2)和(4)式用中国剩余定理 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">q1 = q1p</span><br><span class="line">q2 =  <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 =  <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 =  <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"></span><br><span class="line">phi1 = (p-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line">phi2 = (p-<span class="number">1</span>) * (q2-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e1, phi1)) <span class="comment"># 14</span></span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e2, phi2)) <span class="comment"># 14</span></span><br><span class="line">d1 = inverse(e1//<span class="number">14</span>, phi1)</span><br><span class="line">d2 = inverse(e2//<span class="number">14</span>, phi2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(c1, d1, q1), <span class="built_in">pow</span>(c2, d2, q2))</span><br></pre></td></tr></table></figure>
<p>先用sagemath封装好的CRT（中国剩余定理）解出<span class="math inline">\(m^14\)</span>，代码如下：m <img data-src="https://img-blog.csdnimg.cn/20210714223500633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 再用<span class="math inline">\(m^{14},q1,q2\)</span>求出<span class="math inline">\(m^2\)</span>，再开平方得到<span class="math inline">\(m\)</span> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m14 = <span class="number">3580483299432395573659317753435578327637985357646700589244795353763573715336139257763207735764180027583647775608064149038853113096146443168864525876633843358404759038299549652788731401504933571857458579919657482494694530749880548630064266049810247928643334919438340898675734894238176854701817798193943787788697804563837637936347825096631189269242445925193015122262187618001159858028229304823201669018674562259904808285226405200475644934113919993329694127412750568776255266590650092290392749263011086241948791335363230476476351250684647853369997799237573793567577022116859682785257602832495614664192557787307332769009</span></span><br><span class="line">d = inverse(<span class="number">7</span>, (q1-<span class="number">1</span>) * (q2-<span class="number">1</span>))</span><br><span class="line">m2 = <span class="built_in">pow</span>(m14, d, q1*q2)</span><br><span class="line"><span class="built_in">print</span>(gmpy2.iroot(m2, <span class="number">2</span>))</span><br><span class="line">m = gmpy2.iroot(m2, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(<span class="number">14</span>, (p-<span class="number">1</span>)))</span><br></pre></td></tr></table></figure>
<p>最后结果为： <img data-src="https://img-blog.csdnimg.cn/2021071422382682.png" alt="在这里插入图片描述" /> 这是一道很综合的RSA，难点主要集中再最后一步</p>
<h2 id="结语">结语</h2>
<p>希望假期也能继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-17</title>
    <url>/uncategorized/2021/07/17/vacation_week1/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-17</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="inshack2019yet-another-rsa-challenge---part-1">[INSHack2019]Yet Another RSA Challenge - Part 1</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">p = subprocess.check_output(<span class="string">&#x27;openssl prime -generate -bits 2048 -hex&#x27;</span>)</span><br><span class="line">q = subprocess.check_output(<span class="string">&#x27;openssl prime -generate -bits 2048 -hex&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="string">&#x27;INSA&#123;REDACTED&#125;&#x27;</span>.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(p,<span class="number">16</span>) * <span class="built_in">int</span>(q,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> N</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;0x&#x27;</span>+p.replace(<span class="string">&#x27;9F&#x27;</span>,<span class="string">&#x27;FC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(flag,<span class="number">65537</span>,N)</span><br></pre></td></tr></table></figure>
<p>其实就是随机生成p,q，然后常规RSA加密，就是输出的时候对p进行了一些小的改动 解题时不能确定原来的p是否也含有“FC”，所以不能直接替换回去，要遍历所有情况，符合条件的p应当整除N 写了一个简陋的递归程序来解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">719579745653303119025873098043848913976880838286635817351790189702008424828505522253331968992725441130409959387942238566082746772468987336980704680915524591881919460709921709513741059003955050088052599067720107149755856317364317707629467090624585752920523062378696431510814381603360130752588995217840721808871896469275562085215852034302374902524921137398710508865248881286824902780186249148613287250056380811479959269915786545911048030947364841177976623684660771594747297272818410589981294227084173316280447729440036251406684111603371364957690353449585185893322538541593242187738587675489180722498945337715511212885934126635221601469699184812336984707723198731876940991485904637481371763302337637617744175461566445514603405016576604569057507997291470369704260553992902776099599438704680775883984720946337235834374667842758010444010254965664863296455406931885650448386682827401907759661117637294838753325610213809162253020362015045242003388829769019579522792182295457962911430276020610658073659629786668639126004851910536565721128484604554703970965744790413684836096724064390486888113608024265771815004188203124405817878645103282802994701531113849607969243815078720289912255827700390198089699808626116357304202660642601149742427766381</span></span><br><span class="line">p = <span class="string">&#x27;0xDCC5A0BD3A1FC0BEB0DA1C2E8CF6B474481B7C12849B76E03C4C946724DB577D2825D6AA193DB559BC9DBABE1DDE8B5E7805E48749EF002F622F7CDBD7853B200E2A027E87E331AFCFD066ED9900F1E5F5E5196A451A6F9E329EB889D773F08E5FBF45AACB818FD186DD74626180294DCC31805A88D1B71DE5BFEF3ED01F12678D906A833A78EDCE9BDAF22BBE45C0BFB7A82AFE42C1C3B8581C83BF43DFE31BFD81527E507686956458905CC9A660604552A060109DC81D01F229A264AB67C6D7168721AB36DE769CEAFB97F238050193EC942078DDF5329A387F46253A4411A9C8BB71F9AEB11AC9623E41C14FCD2739D76E69283E57DDB11FC531B4611EE3&#x27;</span></span><br><span class="line">c = <span class="number">596380963583874022971492302071822444225514552231574984926542429117396590795270181084030717066220888052607057994262255729890598322976783889090993129161030148064314476199052180347747135088933481343974996843632511300255010825580875930722684714290535684951679115573751200980708359500292172387447570080875531002842462002727646367063816531958020271149645805755077133231395881833164790825731218786554806777097126212126561056170733032553159740167058242065879953688453169613384659653035659118823444582576657499974059388261153064772228570460351169216103620379299362366574826080703907036316546232196313193923841110510170689800892941998845140534954264505413254429240789223724066502818922164419890197058252325607667959185100118251170368909192832882776642565026481260424714348087206462283972676596101498123547647078981435969530082351104111747783346230914935599764345176602456069568419879060577771404946743580809330315332836749661503035076868102720709045692483171306425207758972682717326821412843569770615848397477633761506670219845039890098105484693890695897858251238713238301401843678654564558196040100908796513657968507381392735855990706254646471937809011610992016368630851454275478216664521360246605400986428230407975530880206404171034278692756</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_p</span>(<span class="params">tmp, s, l</span>):</span></span><br><span class="line">    s += tmp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> s[-<span class="number">2</span>:] == <span class="string">&#x27;E3&#x27;</span>:</span><br><span class="line">        l.append(s)</span><br><span class="line">        <span class="comment"># print(s)</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> [<span class="string">&#x27;FC&#x27;</span>, <span class="string">&#x27;9F&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> s[-<span class="number">2</span>:] == <span class="string">&#x27;FC&#x27;</span>:</span><br><span class="line">            s = s[:-<span class="number">2</span>]</span><br><span class="line">        s += c</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tmp) &gt; <span class="number">1</span>:</span><br><span class="line">            join_p(tmp[<span class="number">1</span>:], s, l)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">tmp = p.split(<span class="string">&#x27;FC&#x27;</span>)</span><br><span class="line">list_p = join_p(tmp, <span class="string">&#x27;&#x27;</span>, [])</span><br><span class="line"><span class="keyword">for</span> _p <span class="keyword">in</span> list_p:</span><br><span class="line">    <span class="keyword">if</span> N % <span class="built_in">int</span>(_p, <span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">        p = <span class="built_in">int</span>(_p, <span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q = N//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/20210717214230100.png" alt="在这里插入图片描述" /></p>
<h2 id="afctf2018花开藏宝地">[AFCTF2018]花开藏宝地</h2>
<p>题干描述如下： 第80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857号藏宝图</p>
<p>我把我的宝藏都藏在了那里！ 那个神秘的地方！ 于是我把藏宝图分成了5份，交给五位贤者让他们帮我妥善保管，并且只要搜集3份就可以获得宝藏的地址。</p>
<p>第一位贤者将藏宝图放进时空门中说道： “那么口令就是我的生日吧，那可是个好数字呢。”</p>
<p>第二位贤者将藏宝图放进宝箱，【小】声念着自己的名字锁上了宝箱。</p>
<p>第三位贤者将藏宝图施上咒语丢进大海：“只要【大】声喊出那句咒语就可以把水驱逐！”</p>
<p>第四位贤者找了个破锁锁上了宝箱，狡黠地笑着：“谁知道它是坏的呢？”</p>
<p>第五位贤者给藏宝图裹上了隐身衣，放入了一个匣子里</p>
<p>据说，只有拥有【智慧】与【力量】就可以获得宝藏了呢！~ 你是这样的勇者吗？</p>
<p>题目给了五个压缩包，只要搞出三个就行 前三个都可以爆破密码 爆破工具链接详见我<a href="https://blog.csdn.net/weixin_52446095/article/details/116139873?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162653002016780357231951%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162653002016780357231951&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-3-116139873.pc_v2_rank_blog_default&amp;utm_term=%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81&amp;spm=1018.2226.3001.4450">2021-4-25的博客</a> 第一个提示是生日，应当为8位数字密码 爆破结果如下： <img data-src="https://img-blog.csdnimg.cn/20210717214846148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第二个提示是小写名字 爆破结果如下： <img data-src="https://img-blog.csdnimg.cn/20210717215005131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第三个提示是大写咒语 爆破结果如下： <img data-src="https://img-blog.csdnimg.cn/20210717215153129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第四个是伪加密，参考我<a href="https://blog.csdn.net/weixin_52446095/article/details/115875059?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162653022716780269884646%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162653022716780269884646&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-115875059.pc_v2_rank_blog_default&amp;utm_term=%E4%BC%AA%E5%8A%A0%E5%AF%86&amp;spm=1018.2226.3001.4450">2021-4-19的博客</a> 只要把如下图所示位置改成偶数即可 <img data-src="https://img-blog.csdnimg.cn/20210717215930465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 第5个根据<a href="https://csuwangj.github.io/afctf2018-crypto-officialwriteup/">官方wp</a>是NTFS隐写 但是我解压rar文件之后拿ntfsstreamseditor怎么扫都扫不出流文件，我以为是ntfsstreamseditor的问题，然后换了个工具叫AlternateStreamView，也扫不出来 后来又找了一些资料，发现解压工具用的都是WinRAR，而我用的是BandZip 改用WinRAR解压后，就能扫出来了 AlternateStreamView界面如下： <img data-src="https://img-blog.csdnimg.cn/20210717224350633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 之后点导出然后确定即可 <img data-src="https://img-blog.csdnimg.cn/2021071722445797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 附上ntfsstreamseditor的<a href="https://pan.baidu.com/share/link?shareid=111913189&amp;uk=741348754&amp;_at_=1626514741168">下载地址</a>和AlternateStreamView的<a href="http://www.nirsoft.net/utils/alternate_data_streams.html">下载地址</a>以及WinRAR的<a href="https://www.win-rar.com/download.html?&amp;L=0">下载地址</a></p>
<p>得到的文件都是一对(x,m)，不知道是干什么的 看了<a href="https://shawroot.hatenablog.com/entry/2019/12/26/AFCTF2018/BUUCTF-Crypto:%E8%8A%B1%E5%BC%80%E8%97%8F%E5%AE%9D%E5%9C%B0">一个大佬的wp</a>之后知道是<a href="https://webencrypt.org/secretsharing/">门限方案</a> 而题目提示“花开(bloom)”暗指Asmuth-Bloom门限方案 <img data-src="https://img-blog.csdnimg.cn/20210717225140913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 首先是传统艺能sagemath中国剩余定理(CRT)： <img data-src="https://img-blog.csdnimg.cn/20210717225440444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 5对(x,m)全用上结果是一样的： <img data-src="https://img-blog.csdnimg.cn/20210717225534515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后p即为第几号藏宝图 <img data-src="https://img-blog.csdnimg.cn/2021071723072279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 如上图所示，由于<span class="math inline">\(y&lt;p\)</span>，所以只需将<span class="math inline">\(y&#39;(CRT的结果)-Ap\)</span>模<span class="math inline">\(p\)</span>即可得到<span class="math inline">\(S\)</span>（密文）了 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x1 = <span class="number">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span></span><br><span class="line">m1 = <span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span></span><br><span class="line">x2 = <span class="number">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span></span><br><span class="line">m2 = <span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span></span><br><span class="line">x3 = <span class="number">40952412095267791829743119118333311932687870987919948671780408726886151430242690997238831410249436653299224291445012397813221016909468630372862610415470277301591535416193017906909638241212666990959976187895288689640250810487806568164431359887246760313154046201720715301307811951233077581047872827004824833876458687145628724339714212107812941785880896399800008924818580623979723496070665230</span></span><br><span class="line">m3 = <span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820819351</span></span><br><span class="line">x4 = <span class="number">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span></span><br><span class="line">m4 = <span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span></span><br><span class="line">x5 = <span class="number">230502064382947282343660159791611936696520807970361139469603458689311286041516767875903549263861950740778705012699983268093626403307298415066249636346303539570207577050391796770068203937723627361951969413683246596072925692670365490970847825269581004483964261491917680759091791653759514213188778401968676433284753781006738293752440186858616315727565803777032119737689210471541053061940547213</span></span><br><span class="line">m5 = <span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820822249</span></span><br><span class="line">x = [x1, x2, x3]</span><br><span class="line">m = [m1, m2, m3]</span><br><span class="line"></span><br><span class="line">p = <span class="number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span></span><br><span class="line">_m = <span class="number">30876976368086692285558250036880406604917636310753345643851443311621560437660524037995161241308442036379469552063806443002181224753860983594447977830810170201541624128881271226685934621113368082630765925118134834325144756352463621990490982075331418652446742943160748740071265060573720998451298794523954529649159404329795707381755731242527536198482385928070127829060902084889604193497570570666454987614622192127799628914721314092255874223423836747903381309023217090349405981222877770048197886205341954349001378037043986104483577949386469631664327951317484659223470641035291599627126044129328116138456709005193822302098284284434695284085356908092040649892546733042792734012082009931947240120686605195896740999916349434920823829741045025395035620492258352790658333703219086923204432403214249952956353508095035923172933873864816804322018707765332798796032165097476986184856220405455000518836225976464413270841989241690755609748164301706451818506613253021035612120841991720836023832195539291404838851109196963155279844798918459609655314345181964484399235640350608446994546531900893730936604087604005537829207389277430878456169931854713629162410944416019365035094299249030737</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(_m % p))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/20210717230947544.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-13</title>
    <url>/uncategorized/2021/08/13/vacation_week4-5/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-13</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="羊城杯-2020rrrrrrrsa">[羊城杯 2020]RRRRRRRSA</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;GWHT&#123;************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag1 = flag[:<span class="number">19</span>].encode()</span><br><span class="line">flag2 = flag[<span class="number">19</span>:].encode()</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line">P1 = getPrime(<span class="number">1038</span>)</span><br><span class="line">P2 = sympy.nextprime(P1)</span><br><span class="line"><span class="keyword">assert</span>(P2 - P1 &lt; <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">Q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">Q2 = sympy.nextprime(Q1)</span><br><span class="line"></span><br><span class="line">N1 = P1 * P1 * Q1</span><br><span class="line">N2 = P2 * P2 * Q2</span><br><span class="line"></span><br><span class="line">E1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">E2 = sympy.nextprime(E1)</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, E1, N1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, E2, N2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&#x27;secret&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;N1=&#x27;</span> + <span class="built_in">str</span>(N1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;c1=&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;E1=&#x27;</span> + <span class="built_in">str</span>(E1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;N2=&#x27;</span> + <span class="built_in">str</span>(N2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;c2=&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.write(<span class="string">&#x27;E2=&#x27;</span> + <span class="built_in">str</span>(E2) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">output.close()</span><br></pre></td></tr></table></figure>
<p>secret如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N1=<span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span></span><br><span class="line">c1=<span class="number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span></span><br><span class="line">E1=<span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span></span><br><span class="line">N2=<span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span></span><br><span class="line">c2=<span class="number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span></span><br><span class="line">E2=<span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span></span><br></pre></td></tr></table></figure>
<p>刚拿到题目时注意到： <img data-src="https://img-blog.csdnimg.cn/d794e02fd7dd43549f49f1b5a91f8908.png" alt="在这里插入图片描述" /> 想着能不能利用这个条件把<code>P1,P2</code>爆破出来，后来发现数字太大不好爆破 又看这个<code>E1,E2</code>很大，能不能用wiener attack（你要忍一下），结果网上找到脚本解不出来 然后就想干脆直接爆破<code>N1, N2</code>吧，就试着<code>factordb</code>了一下，结果： <img data-src="https://img-blog.csdnimg.cn/ab8d76f8c8c5448485d42461e48ddeaa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 笑死 花里胡哨，一拳打死 然后就是RSA解密，和平常不同的是，<code>N</code>由三个素数相乘，怎么计算φ 可以参考这篇<a href="https://zhuanlan.zhihu.com/p/56548135">欧拉函数的计算式</a> <img data-src="https://img-blog.csdnimg.cn/79e7371a275a4aad9a096897e3d9325f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N1 = <span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span></span><br><span class="line">c1 = <span class="number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span></span><br><span class="line">E1 = <span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span></span><br><span class="line">N2 = <span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span></span><br><span class="line">c2 = <span class="number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span></span><br><span class="line">E2 = <span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span></span><br><span class="line">P1 = <span class="number">2274225198252001349705635635570523977229824105257244100474886998299874359980121470818908135119780772090534507154122446275044273088642034569778714650980895003300783785404556303992237495059194352539844239687490397036174178433587393753764414486675415691276936408808667228951877003555601842900641222777857711016758899</span></span><br><span class="line">Q1 = <span class="number">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947</span></span><br><span class="line">P2 = sympy.nextprime(P1)</span><br><span class="line">Q2 = sympy.nextprime(Q1)</span><br><span class="line"></span><br><span class="line">phi1 = P1 * (P1 - <span class="number">1</span>) * (Q1 - <span class="number">1</span>)</span><br><span class="line">phi2 = P2 * (P2 - <span class="number">1</span>) * (Q2 - <span class="number">1</span>)</span><br><span class="line">d1 = inverse(E1, phi1)</span><br><span class="line">d2 = inverse(E2, phi2)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1, d1, N1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, N2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1) + long_to_bytes(m2))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/73af610698204b3d9150b6f7724b0a10.png" alt="在这里插入图片描述" /> 如果真的是这么解的话那就太草了，就去找了找<a href="https://blog.csdn.net/weixin_44110537/article/details/108560055">大佬的解法</a>，采用了<strong>连分数,低解密指数攻击原理</strong> RSA中有一个很著名的攻击方法，低解密指数攻击，其中的代表就是<a href="https://zhuanlan.zhihu.com/p/21858074">wiener attack</a> 其中就用到了连分数，具体原理网上都有，这里不再赘述 唯一令我疑惑的是，为什么可以用连分数，并且保证有解（这在很多介绍维纳攻击法的文章中是没有提到或者一笔带过的），我找到了一篇<a href="https://arxiv.org/pdf/cs/0402052.pdf">介绍wiener attack的论文</a>，有这样一段话： <img data-src="https://img-blog.csdnimg.cn/436a97630beb4afa8c07ddd841ecb5c8.png" alt="在这里插入图片描述" /> 然后我去搜了关于连分数的勒让德理论，找到了<a href="http://personal.psu.edu/rcv4/677C02.pdf">另一篇论文</a>，给出了证明： <img data-src="https://img-blog.csdnimg.cn/d90a26be9d40448d8499a52812f7dd70.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 关于维纳攻击法的完整推导，我打算出一期完整的博客 关于本题，由于 <span class="math display">\[
\dfrac{N1}{N2} = \left(\dfrac{P1}{P2}\right)^{2}\left(\dfrac{Q1}{Q2}\right)
\]</span> 又因为有<code>P2 = sympy.nextprime(P1)</code>，<code>Q2 = sympy.nextprime(Q1)</code>且<span class="math inline">\(P2-P1&lt;1000\)</span> 所以有<span class="math inline">\(\dfrac{Q1}{Q2} &lt; \dfrac{N1}{N2}\)</span>且<span class="math inline">\(\dfrac{P1}{P2} \approx 1\)</span>，<span class="math inline">\(\dfrac{Q1}{Q2} \to 1\)</span> 但是不能确定是否满足条件： <span class="math display">\[
\left| \dfrac{N1}{N2}-\dfrac{Q1}{Q2}\right| = \left[ \left(\dfrac{P1}{P2} - 1\right)^{2}\right] \left(\dfrac{Q1}{Q2}\right)&lt;\dfrac{1}{2(Q2)^{2}}
\]</span> 可能也是通过猜测得到的解法吧 对wp的代码作了一些修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N1 = <span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span></span><br><span class="line">c1 = <span class="number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span></span><br><span class="line">E1 = <span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span></span><br><span class="line">N2 = <span class="number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span></span><br><span class="line">c2 = <span class="number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span></span><br><span class="line">E2 = <span class="number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuedFra</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    cF = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cF += [x // y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Simplify</span>(<span class="params">ctnf</span>):</span></span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getit</span>(<span class="params">c</span>):</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(c)):</span><br><span class="line">        cf.append(Simplify(c[:i]))</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求渐进分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    <span class="keyword">for</span> (p2, p1) <span class="keyword">in</span> getit(cf):</span><br><span class="line">        <span class="keyword">if</span> p1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> N1 % p1 == <span class="number">0</span> <span class="keyword">and</span> p1 != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> p1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;not find!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q1 = wienerAttack(N1, N2)</span><br><span class="line">p1 = gmpy2.iroot(N1 // q1, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = gmpy2.next_prime(p1)</span><br><span class="line">q2 = gmpy2.next_prime(q1)</span><br><span class="line">phi1 = p1 * (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>)</span><br><span class="line">phi2 = p2 * (p2 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">d1 = inverse(E1, phi1)</span><br><span class="line">d2 = inverse(E2, phi2)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1, d1, N1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, N2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1) + long_to_bytes(m2))</span><br></pre></td></tr></table></figure>
<p>事后，计算<code>(N1/N2-Q1/Q2) - (1/2*Q2**2)</code>，得到结果为<code>-6.76095158601395e+307</code>，与理论相符</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-5</title>
    <url>/uncategorized/2021/08/05/vacation_week4-5/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-5</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="b01lers2020safety_in_numbers">[b01lers2020]safety_in_numbers</h2>
<p>题目给了两个很大的文件： <img data-src="https://img-blog.csdnimg.cn/e920ce23f9444b22b404236b38344b73.png" alt="在这里插入图片描述" /> 加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> Crypto.PublicKey.RSA <span class="keyword">as</span> RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">msg, pubkey</span>):</span></span><br><span class="line">   (n,e) = pubkey</span><br><span class="line">   m = <span class="built_in">int</span>.from_bytes(msg, byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">   c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">   ctxt = (c).to_bytes(c.bit_length() // <span class="number">8</span> + <span class="number">1</span>, byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> ctxt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey.pem&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   ciph = RSA.importKey(f.read())     <span class="comment"># chill out, Crypto.RSA takes its sweet time... (minutes)</span></span><br><span class="line"></span><br><span class="line">pubkey = (ciph.n, ciph.e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   flag = f.read()</span><br><span class="line"></span><br><span class="line">sys.stdout.buffer.write(enc(flag, pubkey))</span><br></pre></td></tr></table></figure>
<p><code># chill out, Crypto.RSA takes its sweet time... (minutes)</code> 啊这 获取公钥代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey.pem&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   ciph = RSA.importKey(f.read())     <span class="comment"># chill out, Crypto.RSA takes its sweet time... (minutes)</span></span><br><span class="line"></span><br><span class="line">e = ciph.e</span><br><span class="line">n = ciph.n</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;publickey.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(n))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/3ed9a5dca220440997f79807bff96693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 发现n是上面一大串，而e=65537 然后关于怎么处理这个ctxt 其实只要知道<code>from_bytes</code>和<code>to_bytes</code>互为“逆运算”就行了，具体可以参照<a href="https://docs.python.org/3.8/library/stdtypes.html">官方文档</a> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   ctxt = f.read()</span><br><span class="line">   <span class="built_in">print</span>(ctxt)</span><br><span class="line">c = <span class="built_in">int</span>.from_bytes(ctxt, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cipher.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(c))</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/b8292ae70c414e3fa456d28b39cf08df.png" alt="在这里插入图片描述" /> 两个文件都非常大 然后就没什么别的信息了，出题人总不能让我做不出来吧 猜测由于n很大，e相对n很小，那么就有可能出现 <span class="math inline">\(c=m^e\)</span> 的情况 试了一下，果然是这样 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   ctxt = f.read()</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">int</span>.from_bytes(ctxt, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = gmpy2.iroot(c, e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m)[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/4608c621ef9842f8b6858ef3fb84db97.png" alt="在这里插入图片描述" /></p>
<h2 id="afctf2018magicnum">[AFCTF2018]MagicNum</h2>
<p>题目就给了一个txt文件，里面一串浮点数： <img data-src="https://img-blog.csdnimg.cn/197e8af5c5454fc089eb6f8d2432b418.png" alt="在这里插入图片描述" /> 想起之前写的<a href="https://blog.csdn.net/weixin_52446095/article/details/119147361?spm=1001.2014.3001.5501">[ACTF新生赛2020]crypto-des</a>也是一样的情况 解密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = [<span class="number">72065910510177138000000000000000.000000</span>, <span class="number">71863209670811371000000.000000</span>, <span class="number">18489682625412760000000000000000.000000</span>, <span class="number">72723257588050687000000.000000</span>, <span class="number">4674659167469766200000000.000000</span>, <span class="number">19061698837499292000000000000000000000.000000</span>,]</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    a += struct.pack(<span class="string">&#x27;&lt;f&#x27;</span>, i).<span class="built_in">hex</span>()        <span class="comment"># 小端</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">    b += struct.pack(<span class="string">&#x27;&gt;f&#x27;</span>, j).<span class="built_in">hex</span>()        <span class="comment"># 大端</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(a, <span class="number">16</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(b, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/4001da20e66e4231864967dd48154c3f.png" alt="在这里插入图片描述" /></p>
<h2 id="xnuca2018warmup">[XNUCA2018]Warmup</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p*q</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	flag = bytes_to_long(fr.read().strip())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_enc_key</span>(<span class="params">BitLen, Phi</span>):</span></span><br><span class="line">    e = getPrime(BitLen)</span><br><span class="line">    <span class="keyword">if</span> Phi % e == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> get_enc_key(BitLen, Phi)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sprint</span>(<span class="params">message</span>):</span></span><br><span class="line">	<span class="built_in">print</span>(message)</span><br><span class="line">	sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">communicate</span>():</span></span><br><span class="line">	sprint(<span class="string">&quot;This is a message distribute system. Please tell me your name: &quot;</span>)</span><br><span class="line">	user = raw_input()</span><br><span class="line">	bakcdoor(user)</span><br><span class="line">	e = get_enc_key(randint(<span class="number">13</span>, <span class="number">13</span> + (<span class="built_in">len</span>(user) % <span class="number">4</span>)), Phi)</span><br><span class="line">	ct = powmod(flag, e, N)</span><br><span class="line">	sprint(<span class="string">&quot;Hi %s, your N is: %d\nAnd your exponent is: %d\nLast but not least, your secret is: %d&quot;</span> % (user, N, e, ct))</span><br><span class="line">	sprint(<span class="string">&quot;You will know the secret after I give you P,Q.\nSee you next time!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	communicate()</span><br></pre></td></tr></table></figure>
<p>明显需要交互嘛 但是没给输出结果 题目给了一个后缀是.pcapng的文件，图片？ 不懂，找<a href="https://blog.csdn.net/MikeCoke/article/details/113819008">wp</a>，考的是<strong>流量包文件提取</strong>，没见过 使用的工具叫<a href="https://www.wireshark.org/">wireshark</a>，建议使用<a href="https://1.as.dl.wireshark.org/">镜像</a>下载 下载下来之后导入文件，选择分析中的追踪TCP流 <img data-src="https://img-blog.csdnimg.cn/fbf03d3eb72140ea8fb72a35befd8bf7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到六段文件 分别为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Alice</span><br><span class="line">Hi Alice, your N is: 25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263</span><br><span class="line">And your exponent is: 7669</span><br><span class="line">Last but not least, your secret is: 22917655888781915689291442748409371798632133107968171254672911561608350738343707972881819762532175014157796940212073777351362314385074785400758102594348355578275080626269137543136225022579321107199602856290254696227966436244618441350564667872879196269074433751811632437228139470723203848006803856868237706401868436321225656126491701750534688966280578771996021459620472731406728379628286405214996461164892486734170662556518782043881759918394674517409304629842710180023814702447187081112856416034885511215626693534876901484105593275741829434329109239483368867518384522955176807332437540578688867077569728548513876841471</span><br><span class="line">You will know the secret after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Bob</span><br><span class="line">Hi Bob, your N is: 16469436076891819107430664586570790058365332532674438789146675997314595491187244459383921424835032067061885275554735557145712521498253296163910390306330135855302922157272936907898045006260883274333834229418152155694295570782207999565052765330228242362968933298758811404031322069181362855243705838799645685066332172969401743211750904509226291946662578751991715996103303976647730874845283020815000321892678220724802450248872234664036667264022384588371373249390642053539194423282694248940736528696713895935252137917260856321114370743803866601761211552228903425850365457360876898940583221394582723557605309072232855822121</span><br><span class="line">And your exponent is: 6581</span><br><span class="line">Last but not least, your secret is: 4505063757912237030635628747221272994572695359194588227137745184038156993684967692950382379416670048352697192034847437641005118396778451573252079960329423730857312903905473153821671728221711196041864671612553117481967219346650953589661738125004385506770270950850305018428133702570007489933820805282374786447043101075368159524627160317546994983074271744438830758703672549021794396005996657563893647623858053340802508275966224731156066494130781524282692069374034848523211418786348920660102645506245253266350928691868117037802311207429854527893101629350899064793606053845768875251087079676571106395735856068973034721101</span><br><span class="line">You will know the secret after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Carol</span><br><span class="line">Hi Carol, your N is: 25118874053328546753024263989563415727502048075025991833569501205632242337113077901532332374775395419348348701048189408092632079814832363732010926177912082562964016670890936281050864496155721672281093344082281963638371977758361202131970609490512245265719538879695944721744492357697438865016952531556200322390888505552979421131419142724258271230059422420336363879787201072494558351266967920357858873458121748582985640375604986741727501058494951533532341125506734541216305271046143705754799910729045435564538502962145048652820879590895993225869189429946329168385872964357133780290864454638364009252548494323438022231349</span><br><span class="line">And your exponent is: 7603</span><br><span class="line">Last but not least, your secret is: 19048737576987045063226590250127232246475809097432504428364908056604025281347091106863818770179886946036828033369811436258683836640686482186295887954603333674790126531024825196275247430917874230019937646154128686565959382549927974721595907720052683326347883917288387011898610688585967549063293999007662179537208541114528645906867834283911530827009496350564818050926992578354845375385136518922278665967914707035675926166195959084130878666446344492398932138098006690696811167313988561319314285936059926219964550560566892932146226765756939758814799908059743886502882106627085404296199027529328251035521224628003832913854</span><br><span class="line">You will know the secret after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Dave</span><br><span class="line">Hi Dave, your N is: 25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263</span><br><span class="line">And your exponent is: 6947</span><br><span class="line">Last but not least, your secret is: 20494665879116666159961016125949070097530413770391893858215547229071116025581822729798313796823204861624912909030975450742122802775879194445232064367771036011021366123393917354134849911675307877324103834871288513274457941036453477034798647182106422619504345055259543675752998330786906376830335403339610903547255965127196315113331300512641046933227008101401416026809256813221480604662012101542846479052832128788279031727880750642499329041780372405567816904384164559191879422615238580181357183882111249939492668328771614509476229785062819586796660370798030562805224704497570446844131650030075004901216141893420140140568</span><br><span class="line">You will know the secret after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Eve</span><br><span class="line">Hi Eve, your N is: 22890921296489391468723563207482439368715048528954857727696611997213849453925407639478311064849002092841332187029922829503732594819405334557899018193836573827538367732876315261107786375883032702336369949813383359822945447348738639898488349249930794685147680602369574583272233186638639006722932514492412473499671240672786609392623108668740611409192410353088792926863759136574234682712437658167544420388503462191966664297486016864300587100339017032869018550693788156823952834586915180769842001379726271815407042736414817319930070363123671954772200618698975099285175523273493454655068815092164026790575552599814897599019</span><br><span class="line">And your exponent is: 32869</span><br><span class="line">Last but not least, your secret is: 10442917988766773396490991940667317808047327971317925137102489044030528557897992672507937554697482807481687087032349144551262471682307071658961878532382971828091109354257621491344013450604760870060142736551478301684143824750833285595247473821108423325384179883193988517286866263448490603966572975638061953752262499593905224215350312955589263376013886143461626877100441513745096129818379335382286822093358933880966180516628821646828214470420085945706208301656296701245704053699525077530655225353466026325593619997021961040046033670273837714651500872492969863747973610655943366074744584652270844784591048670022372904094</span><br><span class="line">You will know the secret after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Frank</span><br><span class="line">Hi Frank, your N is: 13610734669757105262564498565903016628884897465642188626977712600469428943454859353288561953332071112838192895353839306728698072861317475483364599428738408203420859463545743033507453999902768670963760117002226738834212826866972790759618857592183639430006129961804969344458099739275801744555852908477399106370903274847008168191406212026496201683437988789750311357127030874197256108087969060429116893649257007863251857384220793898187863784143099430027004383026281731367512474585221423627626454894508617409600974924819458907176960087389776551021286749078138520414178131682409288175569603840517742966654020297053280120421</span><br><span class="line">And your exponent is: 10369</span><br><span class="line">Last but not least, your secret is: 338230230737795357907632634565480424320738100416872971593313504623031636549506308515885211507225139575284223841381475563865888650857636729319870056097265003381655374810743643787055050913356678153093440043937297044556267703050582739481148800234028265995678045070593516597241200279290432036592464223968778632301959998956082387007036826439290490046693942095006926116019667542427239110629330500882759564195704755475923049022289141527406786806241793809546426372343971278513127134648233599072200913066293287533269250758307985763118372706166149682768349327629911555785267589749222331760647201324907861960876452039787203524</span><br><span class="line">You will know the secret after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>
<p>然后发现，第一段和第四段的N是相同的，采用共模攻击 解密代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">n = 25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263</span><br><span class="line">e1 = 7669</span><br><span class="line">e2 = 6947</span><br><span class="line"></span><br><span class="line">c1 = 22917655888781915689291442748409371798632133107968171254672911561608350738343707972881819762532175014157796940212073777351362314385074785400758102594348355578275080626269137543136225022579321107199602856290254696227966436244618441350564667872879196269074433751811632437228139470723203848006803856868237706401868436321225656126491701750534688966280578771996021459620472731406728379628286405214996461164892486734170662556518782043881759918394674517409304629842710180023814702447187081112856416034885511215626693534876901484105593275741829434329109239483368867518384522955176807332437540578688867077569728548513876841471</span><br><span class="line"></span><br><span class="line">c2 = 20494665879116666159961016125949070097530413770391893858215547229071116025581822729798313796823204861624912909030975450742122802775879194445232064367771036011021366123393917354134849911675307877324103834871288513274457941036453477034798647182106422619504345055259543675752998330786906376830335403339610903547255965127196315113331300512641046933227008101401416026809256813221480604662012101542846479052832128788279031727880750642499329041780372405567816904384164559191879422615238580181357183882111249939492668328771614509476229785062819586796660370798030562805224704497570446844131650030075004901216141893420140140568</span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; 0:</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = inverse(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; 0:</span><br><span class="line">    t = -t</span><br><span class="line">    c2 = inverse(c2, n)</span><br><span class="line">plain = pow(c1, s, n) * pow(c2, t, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plain))</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/3f5867e88c0642e8ba5fa0b372a2e48c.png" alt="在这里插入图片描述" /></p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-26</title>
    <url>/uncategorized/2021/07/26/vacation_week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-26</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>填坑</p>
<h2 id="watevrctf-2019swedish-rsa">[watevrCTF 2019]Swedish RSA</h2>
<p>加密代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="built_in">bytearray</span>(raw_input())</span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line">length = <span class="built_in">len</span>(flag)</span><br><span class="line">bits = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Prime for Finite Field.</span></span><br><span class="line">p = random_prime(<span class="number">2</span>^bits-<span class="number">1</span>, <span class="literal">False</span>, <span class="number">2</span>^(bits-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;downloads/polynomial_rsa.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Prime: &quot;</span> + <span class="built_in">str</span>(p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Univariate Polynomial Ring in y over Finite Field of size p</span></span><br><span class="line">R.&lt;y&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line"><span class="comment">## Analogous to the primes in Z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_irreducable_poly</span>(<span class="params">deg</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        out = R.random_element(degree=deg)</span><br><span class="line">        <span class="keyword">if</span> out.is_irreducible():</span><br><span class="line">            <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment">## Polynomial &quot;primes&quot;</span></span><br><span class="line">P = gen_irreducable_poly(ZZ.random_element(length, <span class="number">2</span>*length))</span><br><span class="line">Q = gen_irreducable_poly(ZZ.random_element(length, <span class="number">2</span>*length))</span><br><span class="line"></span><br><span class="line"><span class="comment">## Public exponent key</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Modulus</span></span><br><span class="line">N = P*Q</span><br><span class="line">file_out.write(<span class="string">&quot;Modulus: &quot;</span> + <span class="built_in">str</span>(N) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Univariate Quotient Polynomial Ring in x over Finite Field of size 659 with modulus N(x)</span></span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Encrypt</span></span><br><span class="line">m = S(flag)</span><br><span class="line">c = m^e</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;Ciphertext: &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line">file_out.close()</span><br></pre></td></tr></table></figure> 给了密文和公钥：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Prime: <span class="number">43753</span></span><br><span class="line">Modulus: <span class="number">34036</span>*y^<span class="number">177</span> + <span class="number">23068</span>*y^<span class="number">176</span> + <span class="number">13147</span>*y^<span class="number">175</span> + <span class="number">36344</span>*y^<span class="number">174</span> + <span class="number">10045</span>*y^<span class="number">173</span> + <span class="number">41049</span>*y^<span class="number">172</span> + <span class="number">17786</span>*y^<span class="number">171</span> + <span class="number">16601</span>*y^<span class="number">170</span> + <span class="number">7929</span>*y^<span class="number">169</span> + <span class="number">37570</span>*y^<span class="number">168</span> + <span class="number">990</span>*y^<span class="number">167</span> + <span class="number">9622</span>*y^<span class="number">166</span> + <span class="number">39273</span>*y^<span class="number">165</span> + <span class="number">35284</span>*y^<span class="number">164</span> + <span class="number">15632</span>*y^<span class="number">163</span> + <span class="number">18850</span>*y^<span class="number">162</span> + <span class="number">8800</span>*y^<span class="number">161</span> + <span class="number">33148</span>*y^<span class="number">160</span> + <span class="number">12147</span>*y^<span class="number">159</span> + <span class="number">40487</span>*y^<span class="number">158</span> + <span class="number">6407</span>*y^<span class="number">157</span> + <span class="number">34111</span>*y^<span class="number">156</span> + <span class="number">8446</span>*y^<span class="number">155</span> + <span class="number">21908</span>*y^<span class="number">154</span> + <span class="number">16812</span>*y^<span class="number">153</span> + <span class="number">40624</span>*y^<span class="number">152</span> + <span class="number">43506</span>*y^<span class="number">151</span> + <span class="number">39116</span>*y^<span class="number">150</span> + <span class="number">33011</span>*y^<span class="number">149</span> + <span class="number">23914</span>*y^<span class="number">148</span> + <span class="number">2210</span>*y^<span class="number">147</span> + <span class="number">23196</span>*y^<span class="number">146</span> + <span class="number">43359</span>*y^<span class="number">145</span> + <span class="number">34455</span>*y^<span class="number">144</span> + <span class="number">17684</span>*y^<span class="number">143</span> + <span class="number">25262</span>*y^<span class="number">142</span> + <span class="number">982</span>*y^<span class="number">141</span> + <span class="number">24015</span>*y^<span class="number">140</span> + <span class="number">27968</span>*y^<span class="number">139</span> + <span class="number">37463</span>*y^<span class="number">138</span> + <span class="number">10667</span>*y^<span class="number">137</span> + <span class="number">39519</span>*y^<span class="number">136</span> + <span class="number">31176</span>*y^<span class="number">135</span> + <span class="number">27520</span>*y^<span class="number">134</span> + <span class="number">32118</span>*y^<span class="number">133</span> + <span class="number">8333</span>*y^<span class="number">132</span> + <span class="number">38945</span>*y^<span class="number">131</span> + <span class="number">34713</span>*y^<span class="number">130</span> + <span class="number">1107</span>*y^<span class="number">129</span> + <span class="number">43604</span>*y^<span class="number">128</span> + <span class="number">4433</span>*y^<span class="number">127</span> + <span class="number">18110</span>*y^<span class="number">126</span> + <span class="number">17658</span>*y^<span class="number">125</span> + <span class="number">32354</span>*y^<span class="number">124</span> + <span class="number">3219</span>*y^<span class="number">123</span> + <span class="number">40238</span>*y^<span class="number">122</span> + <span class="number">10439</span>*y^<span class="number">121</span> + <span class="number">3669</span>*y^<span class="number">120</span> + <span class="number">8713</span>*y^<span class="number">119</span> + <span class="number">21027</span>*y^<span class="number">118</span> + <span class="number">29480</span>*y^<span class="number">117</span> + <span class="number">5477</span>*y^<span class="number">116</span> + <span class="number">24332</span>*y^<span class="number">115</span> + <span class="number">43480</span>*y^<span class="number">114</span> + <span class="number">33406</span>*y^<span class="number">113</span> + <span class="number">43121</span>*y^<span class="number">112</span> + <span class="number">1114</span>*y^<span class="number">111</span> + <span class="number">17198</span>*y^<span class="number">110</span> + <span class="number">22829</span>*y^<span class="number">109</span> + <span class="number">24424</span>*y^<span class="number">108</span> + <span class="number">16523</span>*y^<span class="number">107</span> + <span class="number">20424</span>*y^<span class="number">106</span> + <span class="number">36206</span>*y^<span class="number">105</span> + <span class="number">41849</span>*y^<span class="number">104</span> + <span class="number">3584</span>*y^<span class="number">103</span> + <span class="number">26500</span>*y^<span class="number">102</span> + <span class="number">31897</span>*y^<span class="number">101</span> + <span class="number">34640</span>*y^<span class="number">100</span> + <span class="number">27449</span>*y^<span class="number">99</span> + <span class="number">30962</span>*y^<span class="number">98</span> + <span class="number">41434</span>*y^<span class="number">97</span> + <span class="number">22125</span>*y^<span class="number">96</span> + <span class="number">24314</span>*y^<span class="number">95</span> + <span class="number">3944</span>*y^<span class="number">94</span> + <span class="number">18400</span>*y^<span class="number">93</span> + <span class="number">38476</span>*y^<span class="number">92</span> + <span class="number">28904</span>*y^<span class="number">91</span> + <span class="number">27936</span>*y^<span class="number">90</span> + <span class="number">41867</span>*y^<span class="number">89</span> + <span class="number">25573</span>*y^<span class="number">88</span> + <span class="number">25659</span>*y^<span class="number">87</span> + <span class="number">33443</span>*y^<span class="number">86</span> + <span class="number">18435</span>*y^<span class="number">85</span> + <span class="number">5934</span>*y^<span class="number">84</span> + <span class="number">38030</span>*y^<span class="number">83</span> + <span class="number">17563</span>*y^<span class="number">82</span> + <span class="number">24086</span>*y^<span class="number">81</span> + <span class="number">36782</span>*y^<span class="number">80</span> + <span class="number">20922</span>*y^<span class="number">79</span> + <span class="number">38933</span>*y^<span class="number">78</span> + <span class="number">23448</span>*y^<span class="number">77</span> + <span class="number">10599</span>*y^<span class="number">76</span> + <span class="number">7156</span>*y^<span class="number">75</span> + <span class="number">29044</span>*y^<span class="number">74</span> + <span class="number">23605</span>*y^<span class="number">73</span> + <span class="number">7657</span>*y^<span class="number">72</span> + <span class="number">28200</span>*y^<span class="number">71</span> + <span class="number">2431</span>*y^<span class="number">70</span> + <span class="number">3860</span>*y^<span class="number">69</span> + <span class="number">23259</span>*y^<span class="number">68</span> + <span class="number">14590</span>*y^<span class="number">67</span> + <span class="number">33631</span>*y^<span class="number">66</span> + <span class="number">15673</span>*y^<span class="number">65</span> + <span class="number">36049</span>*y^<span class="number">64</span> + <span class="number">29728</span>*y^<span class="number">63</span> + <span class="number">22413</span>*y^<span class="number">62</span> + <span class="number">18602</span>*y^<span class="number">61</span> + <span class="number">18557</span>*y^<span class="number">60</span> + <span class="number">23505</span>*y^<span class="number">59</span> + <span class="number">17642</span>*y^<span class="number">58</span> + <span class="number">12595</span>*y^<span class="number">57</span> + <span class="number">17255</span>*y^<span class="number">56</span> + <span class="number">15316</span>*y^<span class="number">55</span> + <span class="number">8948</span>*y^<span class="number">54</span> + <span class="number">38</span>*y^<span class="number">53</span> + <span class="number">40329</span>*y^<span class="number">52</span> + <span class="number">9823</span>*y^<span class="number">51</span> + <span class="number">5798</span>*y^<span class="number">50</span> + <span class="number">6379</span>*y^<span class="number">49</span> + <span class="number">8662</span>*y^<span class="number">48</span> + <span class="number">34640</span>*y^<span class="number">47</span> + <span class="number">38321</span>*y^<span class="number">46</span> + <span class="number">18760</span>*y^<span class="number">45</span> + <span class="number">13135</span>*y^<span class="number">44</span> + <span class="number">15926</span>*y^<span class="number">43</span> + <span class="number">34952</span>*y^<span class="number">42</span> + <span class="number">28940</span>*y^<span class="number">41</span> + <span class="number">13558</span>*y^<span class="number">40</span> + <span class="number">42579</span>*y^<span class="number">39</span> + <span class="number">38015</span>*y^<span class="number">38</span> + <span class="number">33788</span>*y^<span class="number">37</span> + <span class="number">12381</span>*y^<span class="number">36</span> + <span class="number">195</span>*y^<span class="number">35</span> + <span class="number">13709</span>*y^<span class="number">34</span> + <span class="number">31500</span>*y^<span class="number">33</span> + <span class="number">32994</span>*y^<span class="number">32</span> + <span class="number">30486</span>*y^<span class="number">31</span> + <span class="number">40414</span>*y^<span class="number">30</span> + <span class="number">2578</span>*y^<span class="number">29</span> + <span class="number">30525</span>*y^<span class="number">28</span> + <span class="number">43067</span>*y^<span class="number">27</span> + <span class="number">6195</span>*y^<span class="number">26</span> + <span class="number">36288</span>*y^<span class="number">25</span> + <span class="number">23236</span>*y^<span class="number">24</span> + <span class="number">21493</span>*y^<span class="number">23</span> + <span class="number">15808</span>*y^<span class="number">22</span> + <span class="number">34500</span>*y^<span class="number">21</span> + <span class="number">6390</span>*y^<span class="number">20</span> + <span class="number">42994</span>*y^<span class="number">19</span> + <span class="number">42151</span>*y^<span class="number">18</span> + <span class="number">19248</span>*y^<span class="number">17</span> + <span class="number">19291</span>*y^<span class="number">16</span> + <span class="number">8124</span>*y^<span class="number">15</span> + <span class="number">40161</span>*y^<span class="number">14</span> + <span class="number">24726</span>*y^<span class="number">13</span> + <span class="number">31874</span>*y^<span class="number">12</span> + <span class="number">30272</span>*y^<span class="number">11</span> + <span class="number">30761</span>*y^<span class="number">10</span> + <span class="number">2296</span>*y^<span class="number">9</span> + <span class="number">11017</span>*y^<span class="number">8</span> + <span class="number">16559</span>*y^<span class="number">7</span> + <span class="number">28949</span>*y^<span class="number">6</span> + <span class="number">40499</span>*y^<span class="number">5</span> + <span class="number">22377</span>*y^<span class="number">4</span> + <span class="number">33628</span>*y^<span class="number">3</span> + <span class="number">30598</span>*y^<span class="number">2</span> + <span class="number">4386</span>*y + <span class="number">23814</span></span><br><span class="line">Ciphertext: <span class="number">5209</span>*x^<span class="number">176</span> + <span class="number">10881</span>*x^<span class="number">175</span> + <span class="number">31096</span>*x^<span class="number">174</span> + <span class="number">23354</span>*x^<span class="number">173</span> + <span class="number">28337</span>*x^<span class="number">172</span> + <span class="number">15982</span>*x^<span class="number">171</span> + <span class="number">13515</span>*x^<span class="number">170</span> + <span class="number">21641</span>*x^<span class="number">169</span> + <span class="number">10254</span>*x^<span class="number">168</span> + <span class="number">34588</span>*x^<span class="number">167</span> + <span class="number">27434</span>*x^<span class="number">166</span> + <span class="number">29552</span>*x^<span class="number">165</span> + <span class="number">7105</span>*x^<span class="number">164</span> + <span class="number">22604</span>*x^<span class="number">163</span> + <span class="number">41253</span>*x^<span class="number">162</span> + <span class="number">42675</span>*x^<span class="number">161</span> + <span class="number">21153</span>*x^<span class="number">160</span> + <span class="number">32838</span>*x^<span class="number">159</span> + <span class="number">34391</span>*x^<span class="number">158</span> + <span class="number">832</span>*x^<span class="number">157</span> + <span class="number">720</span>*x^<span class="number">156</span> + <span class="number">22883</span>*x^<span class="number">155</span> + <span class="number">19236</span>*x^<span class="number">154</span> + <span class="number">33772</span>*x^<span class="number">153</span> + <span class="number">5020</span>*x^<span class="number">152</span> + <span class="number">17943</span>*x^<span class="number">151</span> + <span class="number">26967</span>*x^<span class="number">150</span> + <span class="number">30847</span>*x^<span class="number">149</span> + <span class="number">10306</span>*x^<span class="number">148</span> + <span class="number">33966</span>*x^<span class="number">147</span> + <span class="number">43255</span>*x^<span class="number">146</span> + <span class="number">20342</span>*x^<span class="number">145</span> + <span class="number">4474</span>*x^<span class="number">144</span> + <span class="number">3490</span>*x^<span class="number">143</span> + <span class="number">38033</span>*x^<span class="number">142</span> + <span class="number">11224</span>*x^<span class="number">141</span> + <span class="number">30565</span>*x^<span class="number">140</span> + <span class="number">31967</span>*x^<span class="number">139</span> + <span class="number">32382</span>*x^<span class="number">138</span> + <span class="number">9759</span>*x^<span class="number">137</span> + <span class="number">1030</span>*x^<span class="number">136</span> + <span class="number">32122</span>*x^<span class="number">135</span> + <span class="number">42614</span>*x^<span class="number">134</span> + <span class="number">14280</span>*x^<span class="number">133</span> + <span class="number">16533</span>*x^<span class="number">132</span> + <span class="number">32676</span>*x^<span class="number">131</span> + <span class="number">43070</span>*x^<span class="number">130</span> + <span class="number">36009</span>*x^<span class="number">129</span> + <span class="number">28497</span>*x^<span class="number">128</span> + <span class="number">2940</span>*x^<span class="number">127</span> + <span class="number">9747</span>*x^<span class="number">126</span> + <span class="number">22758</span>*x^<span class="number">125</span> + <span class="number">16615</span>*x^<span class="number">124</span> + <span class="number">14086</span>*x^<span class="number">123</span> + <span class="number">13038</span>*x^<span class="number">122</span> + <span class="number">39603</span>*x^<span class="number">121</span> + <span class="number">36260</span>*x^<span class="number">120</span> + <span class="number">32502</span>*x^<span class="number">119</span> + <span class="number">17619</span>*x^<span class="number">118</span> + <span class="number">17700</span>*x^<span class="number">117</span> + <span class="number">15083</span>*x^<span class="number">116</span> + <span class="number">11311</span>*x^<span class="number">115</span> + <span class="number">36496</span>*x^<span class="number">114</span> + <span class="number">1300</span>*x^<span class="number">113</span> + <span class="number">13601</span>*x^<span class="number">112</span> + <span class="number">43425</span>*x^<span class="number">111</span> + <span class="number">10376</span>*x^<span class="number">110</span> + <span class="number">11551</span>*x^<span class="number">109</span> + <span class="number">13684</span>*x^<span class="number">108</span> + <span class="number">14955</span>*x^<span class="number">107</span> + <span class="number">6661</span>*x^<span class="number">106</span> + <span class="number">12674</span>*x^<span class="number">105</span> + <span class="number">21534</span>*x^<span class="number">104</span> + <span class="number">32132</span>*x^<span class="number">103</span> + <span class="number">34135</span>*x^<span class="number">102</span> + <span class="number">43684</span>*x^<span class="number">101</span> + <span class="number">837</span>*x^<span class="number">100</span> + <span class="number">29311</span>*x^<span class="number">99</span> + <span class="number">4849</span>*x^<span class="number">98</span> + <span class="number">26632</span>*x^<span class="number">97</span> + <span class="number">26662</span>*x^<span class="number">96</span> + <span class="number">10159</span>*x^<span class="number">95</span> + <span class="number">32657</span>*x^<span class="number">94</span> + <span class="number">12149</span>*x^<span class="number">93</span> + <span class="number">17858</span>*x^<span class="number">92</span> + <span class="number">35805</span>*x^<span class="number">91</span> + <span class="number">19391</span>*x^<span class="number">90</span> + <span class="number">30884</span>*x^<span class="number">89</span> + <span class="number">42039</span>*x^<span class="number">88</span> + <span class="number">17292</span>*x^<span class="number">87</span> + <span class="number">4694</span>*x^<span class="number">86</span> + <span class="number">1497</span>*x^<span class="number">85</span> + <span class="number">1744</span>*x^<span class="number">84</span> + <span class="number">31071</span>*x^<span class="number">83</span> + <span class="number">26246</span>*x^<span class="number">82</span> + <span class="number">24402</span>*x^<span class="number">81</span> + <span class="number">22068</span>*x^<span class="number">80</span> + <span class="number">39263</span>*x^<span class="number">79</span> + <span class="number">23703</span>*x^<span class="number">78</span> + <span class="number">21484</span>*x^<span class="number">77</span> + <span class="number">12241</span>*x^<span class="number">76</span> + <span class="number">28821</span>*x^<span class="number">75</span> + <span class="number">32886</span>*x^<span class="number">74</span> + <span class="number">43075</span>*x^<span class="number">73</span> + <span class="number">35741</span>*x^<span class="number">72</span> + <span class="number">19936</span>*x^<span class="number">71</span> + <span class="number">37219</span>*x^<span class="number">70</span> + <span class="number">33411</span>*x^<span class="number">69</span> + <span class="number">8301</span>*x^<span class="number">68</span> + <span class="number">12949</span>*x^<span class="number">67</span> + <span class="number">28611</span>*x^<span class="number">66</span> + <span class="number">42654</span>*x^<span class="number">65</span> + <span class="number">6910</span>*x^<span class="number">64</span> + <span class="number">18523</span>*x^<span class="number">63</span> + <span class="number">31144</span>*x^<span class="number">62</span> + <span class="number">21398</span>*x^<span class="number">61</span> + <span class="number">36298</span>*x^<span class="number">60</span> + <span class="number">27158</span>*x^<span class="number">59</span> + <span class="number">918</span>*x^<span class="number">58</span> + <span class="number">38601</span>*x^<span class="number">57</span> + <span class="number">4269</span>*x^<span class="number">56</span> + <span class="number">5699</span>*x^<span class="number">55</span> + <span class="number">36444</span>*x^<span class="number">54</span> + <span class="number">34791</span>*x^<span class="number">53</span> + <span class="number">37978</span>*x^<span class="number">52</span> + <span class="number">32481</span>*x^<span class="number">51</span> + <span class="number">8039</span>*x^<span class="number">50</span> + <span class="number">11012</span>*x^<span class="number">49</span> + <span class="number">11454</span>*x^<span class="number">48</span> + <span class="number">30450</span>*x^<span class="number">47</span> + <span class="number">1381</span>*x^<span class="number">46</span> + <span class="number">32403</span>*x^<span class="number">45</span> + <span class="number">8202</span>*x^<span class="number">44</span> + <span class="number">8404</span>*x^<span class="number">43</span> + <span class="number">37648</span>*x^<span class="number">42</span> + <span class="number">43696</span>*x^<span class="number">41</span> + <span class="number">34237</span>*x^<span class="number">40</span> + <span class="number">36490</span>*x^<span class="number">39</span> + <span class="number">41423</span>*x^<span class="number">38</span> + <span class="number">35792</span>*x^<span class="number">37</span> + <span class="number">36950</span>*x^<span class="number">36</span> + <span class="number">31086</span>*x^<span class="number">35</span> + <span class="number">38970</span>*x^<span class="number">34</span> + <span class="number">12439</span>*x^<span class="number">33</span> + <span class="number">7963</span>*x^<span class="number">32</span> + <span class="number">16150</span>*x^<span class="number">31</span> + <span class="number">11382</span>*x^<span class="number">30</span> + <span class="number">3038</span>*x^<span class="number">29</span> + <span class="number">20157</span>*x^<span class="number">28</span> + <span class="number">23531</span>*x^<span class="number">27</span> + <span class="number">32866</span>*x^<span class="number">26</span> + <span class="number">5428</span>*x^<span class="number">25</span> + <span class="number">21132</span>*x^<span class="number">24</span> + <span class="number">13443</span>*x^<span class="number">23</span> + <span class="number">28909</span>*x^<span class="number">22</span> + <span class="number">42716</span>*x^<span class="number">21</span> + <span class="number">6567</span>*x^<span class="number">20</span> + <span class="number">24744</span>*x^<span class="number">19</span> + <span class="number">8727</span>*x^<span class="number">18</span> + <span class="number">14895</span>*x^<span class="number">17</span> + <span class="number">28172</span>*x^<span class="number">16</span> + <span class="number">30903</span>*x^<span class="number">15</span> + <span class="number">26608</span>*x^<span class="number">14</span> + <span class="number">27314</span>*x^<span class="number">13</span> + <span class="number">42224</span>*x^<span class="number">12</span> + <span class="number">42551</span>*x^<span class="number">11</span> + <span class="number">37726</span>*x^<span class="number">10</span> + <span class="number">11203</span>*x^<span class="number">9</span> + <span class="number">36816</span>*x^<span class="number">8</span> + <span class="number">5537</span>*x^<span class="number">7</span> + <span class="number">20301</span>*x^<span class="number">6</span> + <span class="number">17591</span>*x^<span class="number">5</span> + <span class="number">41279</span>*x^<span class="number">4</span> + <span class="number">7999</span>*x^<span class="number">3</span> + <span class="number">33753</span>*x^<span class="number">2</span> + <span class="number">34551</span>*x + <span class="number">9659</span></span><br></pre></td></tr></table></figure>
<p>多项式RSA总是避而远之，半懂不懂的sage代码，好几次比赛都没做出来 先来回顾一下传统的RSA： <img data-src="https://img-blog.csdnimg.cn/2478dd805e294423ba5e89570455ed03.png" alt="在这里插入图片描述" /> 本题的加密过程与经典的RSA加密十分类似 不同的是，m、N、c都是多项式，这就难搞了 而且这个p是什么意思？<span class="math inline">\(\varphi\)</span>该这么算？ 找了一个<a href="https://blog.csdn.net/cccchhhh6819/article/details/103563019">wp</a> 看懂了，但没完全看懂 又找了一篇博客：<a href="https://www.ruanx.net/polynomial-rsa/">有限域上的多项式</a>，也是对这道题的解，而且给予了较为详细的数学知识补充 以下是对上述两个问题的解答，以及解题思路 首先看这段代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Analogous to the primes in Z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_irreducable_poly</span>(<span class="params">deg</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        out = R.random_element(degree=deg)</span><br><span class="line">        <span class="keyword">if</span> out.is_irreducible():</span><br><span class="line">            <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment">## Polynomial &quot;primes&quot;</span></span><br><span class="line">P = gen_irreducable_poly(ZZ.random_element(length, <span class="number">2</span>*length))</span><br><span class="line">Q = gen_irreducable_poly(ZZ.random_element(length, <span class="number">2</span>*length))</span><br></pre></td></tr></table></figure> 先来看这个函数，“irreducible”意思是“不可约的”，也就是说生成了P、Q两个不可约多项式，容易联想到经典RSA的两个大质数 deg则代表了多项式的次数，也就是多项式最高次项的指数大小（高代中常用deg(f)表示多项式的次数，后知后觉） 而length则是flag的次数 也就是说<span class="math inline">\(deg(flag) \leq deg(P) \leq 2deg(flag),deg(flag) \leq deg(Q) \leq 2deg(flag)\)</span> 容易想到要分解N来得到P，Q sage代码如下： <img data-src="https://img-blog.csdnimg.cn/ae58655762b44804b9ba3fdb13be4b70.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 可以得到： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P = (<span class="number">34036</span>) * (y^<span class="number">65</span> + <span class="number">39688</span>*y^<span class="number">64</span> + <span class="number">22199</span>*y^<span class="number">63</span> + <span class="number">41942</span>*y^<span class="number">62</span> + <span class="number">7803</span>*y^<span class="number">61</span> + <span class="number">19710</span>*y^<span class="number">60</span> + <span class="number">14794</span>*y^<span class="number">59</span> + <span class="number">41388</span>*y^<span class="number">58</span> + <span class="number">2418</span>*y^<span class="number">57</span> + <span class="number">19208</span>*y^<span class="number">56</span> + <span class="number">39941</span>*y^<span class="number">55</span> + <span class="number">36392</span>*y^<span class="number">54</span> + <span class="number">19813</span>*y^<span class="number">53</span> + <span class="number">33864</span>*y^<span class="number">52</span> + <span class="number">29099</span>*y^<span class="number">51</span> + <span class="number">15484</span>*y^<span class="number">50</span> + <span class="number">27185</span>*y^<span class="number">49</span> + <span class="number">27721</span>*y^<span class="number">48</span> + <span class="number">31508</span>*y^<span class="number">47</span> + <span class="number">19404</span>*y^<span class="number">46</span> + <span class="number">10134</span>*y^<span class="number">45</span> + <span class="number">43481</span>*y^<span class="number">44</span> + <span class="number">3899</span>*y^<span class="number">43</span> + <span class="number">32849</span>*y^<span class="number">42</span> + <span class="number">3534</span>*y^<span class="number">41</span> + <span class="number">32086</span>*y^<span class="number">40</span> + <span class="number">14221</span>*y^<span class="number">39</span> + <span class="number">42982</span>*y^<span class="number">38</span> + <span class="number">1403</span>*y^<span class="number">37</span> + <span class="number">1619</span>*y^<span class="number">36</span> + <span class="number">36054</span>*y^<span class="number">35</span> + <span class="number">33615</span>*y^<span class="number">34</span> + <span class="number">6628</span>*y^<span class="number">33</span> + <span class="number">31709</span>*y^<span class="number">32</span> + <span class="number">6968</span>*y^<span class="number">31</span> + <span class="number">28517</span>*y^<span class="number">30</span> + <span class="number">12938</span>*y^<span class="number">29</span> + <span class="number">21124</span>*y^<span class="number">28</span> + <span class="number">10400</span>*y^<span class="number">27</span> + <span class="number">28889</span>*y^<span class="number">26</span> + <span class="number">7273</span>*y^<span class="number">25</span> + <span class="number">36442</span>*y^<span class="number">24</span> + <span class="number">14935</span>*y^<span class="number">23</span> + <span class="number">29365</span>*y^<span class="number">22</span> + <span class="number">4869</span>*y^<span class="number">21</span> + <span class="number">43562</span>*y^<span class="number">20</span> + <span class="number">6435</span>*y^<span class="number">19</span> + <span class="number">4403</span>*y^<span class="number">18</span> + <span class="number">32311</span>*y^<span class="number">17</span> + <span class="number">7575</span>*y^<span class="number">16</span> + <span class="number">28199</span>*y^<span class="number">15</span> + <span class="number">28065</span>*y^<span class="number">14</span> + <span class="number">23870</span>*y^<span class="number">13</span> + <span class="number">37314</span>*y^<span class="number">12</span> + <span class="number">15299</span>*y^<span class="number">11</span> + <span class="number">7082</span>*y^<span class="number">10</span> + <span class="number">36230</span>*y^<span class="number">9</span> + <span class="number">18367</span>*y^<span class="number">8</span> + <span class="number">12531</span>*y^<span class="number">7</span> + <span class="number">25906</span>*y^<span class="number">6</span> + <span class="number">26878</span>*y^<span class="number">5</span> + <span class="number">43073</span>*y^<span class="number">4</span> + <span class="number">11582</span>*y^<span class="number">3</span> + <span class="number">4482</span>*y^<span class="number">2</span> + <span class="number">35044</span>*y + <span class="number">31388</span>)</span><br><span class="line">Q = (y^<span class="number">112</span> + <span class="number">31097</span>*y^<span class="number">111</span> + <span class="number">15815</span>*y^<span class="number">110</span> + <span class="number">17170</span>*y^<span class="number">109</span> + <span class="number">43684</span>*y^<span class="number">108</span> + <span class="number">16873</span>*y^<span class="number">107</span> + <span class="number">17269</span>*y^<span class="number">106</span> + <span class="number">10853</span>*y^<span class="number">105</span> + <span class="number">10690</span>*y^<span class="number">104</span> + <span class="number">24864</span>*y^<span class="number">103</span> + <span class="number">10224</span>*y^<span class="number">102</span> + <span class="number">28704</span>*y^<span class="number">101</span> + <span class="number">16049</span>*y^<span class="number">100</span> + <span class="number">1154</span>*y^<span class="number">99</span> + <span class="number">40034</span>*y^<span class="number">98</span> + <span class="number">29922</span>*y^<span class="number">97</span> + <span class="number">27404</span>*y^<span class="number">96</span> + <span class="number">32514</span>*y^<span class="number">95</span> + <span class="number">40962</span>*y^<span class="number">94</span> + <span class="number">32858</span>*y^<span class="number">93</span> + <span class="number">36590</span>*y^<span class="number">92</span> + <span class="number">41302</span>*y^<span class="number">91</span> + <span class="number">20803</span>*y^<span class="number">90</span> + <span class="number">43521</span>*y^<span class="number">89</span> + <span class="number">13746</span>*y^<span class="number">88</span> + <span class="number">19857</span>*y^<span class="number">87</span> + <span class="number">21539</span>*y^<span class="number">86</span> + <span class="number">36888</span>*y^<span class="number">85</span> + <span class="number">16032</span>*y^<span class="number">84</span> + <span class="number">35825</span>*y^<span class="number">83</span> + <span class="number">24705</span>*y^<span class="number">82</span> + <span class="number">31143</span>*y^<span class="number">81</span> + <span class="number">22088</span>*y^<span class="number">80</span> + <span class="number">6686</span>*y^<span class="number">79</span> + <span class="number">37947</span>*y^<span class="number">78</span> + <span class="number">5661</span>*y^<span class="number">77</span> + <span class="number">29405</span>*y^<span class="number">76</span> + <span class="number">36071</span>*y^<span class="number">75</span> + <span class="number">35492</span>*y^<span class="number">74</span> + <span class="number">28985</span>*y^<span class="number">73</span> + <span class="number">36015</span>*y^<span class="number">72</span> + <span class="number">24095</span>*y^<span class="number">71</span> + <span class="number">34920</span>*y^<span class="number">70</span> + <span class="number">6615</span>*y^<span class="number">69</span> + <span class="number">9606</span>*y^<span class="number">68</span> + <span class="number">4255</span>*y^<span class="number">67</span> + <span class="number">22981</span>*y^<span class="number">66</span> + <span class="number">3910</span>*y^<span class="number">65</span> + <span class="number">23897</span>*y^<span class="number">64</span> + <span class="number">22711</span>*y^<span class="number">63</span> + <span class="number">23350</span>*y^<span class="number">62</span> + <span class="number">7969</span>*y^<span class="number">61</span> + <span class="number">8558</span>*y^<span class="number">60</span> + <span class="number">8001</span>*y^<span class="number">59</span> + <span class="number">8431</span>*y^<span class="number">58</span> + <span class="number">3314</span>*y^<span class="number">57</span> + <span class="number">23364</span>*y^<span class="number">56</span> + <span class="number">39391</span>*y^<span class="number">55</span> + <span class="number">32722</span>*y^<span class="number">54</span> + <span class="number">2543</span>*y^<span class="number">53</span> + <span class="number">22196</span>*y^<span class="number">52</span> + <span class="number">24189</span>*y^<span class="number">51</span> + <span class="number">19420</span>*y^<span class="number">50</span> + <span class="number">10649</span>*y^<span class="number">49</span> + <span class="number">19070</span>*y^<span class="number">48</span> + <span class="number">23863</span>*y^<span class="number">47</span> + <span class="number">19597</span>*y^<span class="number">46</span> + <span class="number">39699</span>*y^<span class="number">45</span> + <span class="number">7620</span>*y^<span class="number">44</span> + <span class="number">25067</span>*y^<span class="number">43</span> + <span class="number">29912</span>*y^<span class="number">42</span> + <span class="number">14998</span>*y^<span class="number">41</span> + <span class="number">14492</span>*y^<span class="number">40</span> + <span class="number">31322</span>*y^<span class="number">39</span> + <span class="number">43145</span>*y^<span class="number">38</span> + <span class="number">32006</span>*y^<span class="number">37</span> + <span class="number">38976</span>*y^<span class="number">36</span> + <span class="number">32534</span>*y^<span class="number">35</span> + <span class="number">6972</span>*y^<span class="number">34</span> + <span class="number">37351</span>*y^<span class="number">33</span> + <span class="number">30104</span>*y^<span class="number">32</span> + <span class="number">6032</span>*y^<span class="number">31</span> + <span class="number">33729</span>*y^<span class="number">30</span> + <span class="number">27110</span>*y^<span class="number">29</span> + <span class="number">5268</span>*y^<span class="number">28</span> + <span class="number">2974</span>*y^<span class="number">27</span> + <span class="number">2985</span>*y^<span class="number">26</span> + <span class="number">31610</span>*y^<span class="number">25</span> + <span class="number">28364</span>*y^<span class="number">24</span> + <span class="number">34924</span>*y^<span class="number">23</span> + <span class="number">17414</span>*y^<span class="number">22</span> + <span class="number">28813</span>*y^<span class="number">21</span> + <span class="number">43680</span>*y^<span class="number">20</span> + <span class="number">32175</span>*y^<span class="number">19</span> + <span class="number">18248</span>*y^<span class="number">18</span> + <span class="number">25171</span>*y^<span class="number">17</span> + <span class="number">31185</span>*y^<span class="number">16</span> + <span class="number">30125</span>*y^<span class="number">15</span> + <span class="number">36836</span>*y^<span class="number">14</span> + <span class="number">7218</span>*y^<span class="number">13</span> + <span class="number">11292</span>*y^<span class="number">12</span> + <span class="number">31123</span>*y^<span class="number">11</span> + <span class="number">40360</span>*y^<span class="number">10</span> + <span class="number">34093</span>*y^<span class="number">9</span> + <span class="number">39606</span>*y^<span class="number">8</span> + <span class="number">2788</span>*y^<span class="number">7</span> + <span class="number">27277</span>*y^<span class="number">6</span> + <span class="number">21835</span>*y^<span class="number">5</span> + <span class="number">1331</span>*y^<span class="number">4</span> + <span class="number">32614</span>*y^<span class="number">3</span> + <span class="number">25020</span>*y^<span class="number">2</span> + <span class="number">20981</span>*y + <span class="number">12108</span>)</span><br></pre></td></tr></table></figure> 得知<span class="math inline">\(deg(P) = 65, deg(Q) = 112\)</span> 那么欧拉函数<span class="math inline">\(\varphi\)</span>该怎么算？还是<span class="math inline">\(\varphi (N) = \varphi (P) \varphi (Q) = (P-1)(Q-1)\)</span>吗？ 感觉好像不太对，<strong>欧拉函数</strong><span class="math inline">\(\varphi (n)\)</span>表示小于n的所有与n互质的数的个数，那么在多项式中应该表示小于n的所有与n互质的多项式的个数，也就是小于n的所有与n没有公因式的多项式的个数 但在第一篇wp中，就直接给了结果： <img data-src="https://img-blog.csdnimg.cn/b768876e1f7d48688a822b0f04451e28.png" alt="在这里插入图片描述" /> 后来在第二篇wp中，我找到了解释： <img data-src="https://img-blog.csdnimg.cn/1d5aebc938c84c2f8503b03e8201e47d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img data-src="https://img-blog.csdnimg.cn/471de6537f9f4bf186bcc323e9c03219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 现在来解决第一个问题：p是什么意思，或者说<code>R.&lt;y&gt; = PolynomialRing(GF(p))</code>是什么意思？ 如注释中所说的：## Univariate Polynomial Ring in y over Finite Field of size p（以p为大小的有限域中的关于y的单变量多项式环） 你说这个谁懂啊！（抽象代数下学期才学，残念） 借助第二篇wp补充的数学知识，<strong>以p为大小的有限域</strong>可以大致理解为这个数域里的元素或者说数都是以模p的形式存在，也就是说大小不会超过p，一般记为<span class="math inline">\(\mathbb{F_p}\)</span> 至于什么是多项式环，先要理解什么是环 可以简单理解为是一个满足乘法、加法并拥有分配律的数集，而多项式环就是系数取自这个数集的多项式的集合 博客中给了一个例子： <img data-src="https://img-blog.csdnimg.cn/572269eaad964b9984b1246715a2b991.png" alt="在这里插入图片描述" /> <img data-src="https://img-blog.csdnimg.cn/3f889312dd8b42da821228ae4c039656.png" alt="在这里插入图片描述" /> 问题基本上解决了之后，继续解题 由上述可知，<span class="math inline">\(\varphi (N) = \varphi (P) \varphi (Q) = (p^{deg(P)}-1)(p^{deg(Q)}-1)=(43753^{65}-1)\times (43753^{112}-1)\)</span> 接着就是求e的逆元d，然后还原出flag即可 参考第一篇wp得到flag： <img data-src="https://img-blog.csdnimg.cn/1d0c3f163b0b454689b56047fce4c456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 然后将flag的系数倒序转化成字符输出即为答案： <img data-src="https://img-blog.csdnimg.cn/b18dc42f17fd490d91054fdb4fd088d5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 完整sage代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R.&lt;y&gt; = PolynomialRing(GF(<span class="number">43753</span>))</span><br><span class="line">C = <span class="number">5209</span>*y^<span class="number">176</span> + <span class="number">10881</span>*y^<span class="number">175</span> + <span class="number">31096</span>*y^<span class="number">174</span> + <span class="number">23354</span>*y^<span class="number">173</span> + <span class="number">28337</span>*y^<span class="number">172</span> + <span class="number">15982</span>*y^<span class="number">171</span> + <span class="number">13515</span>*y^<span class="number">170</span> + <span class="number">21641</span>*y^<span class="number">169</span> + <span class="number">10254</span>*y^<span class="number">168</span> + <span class="number">34588</span>*y^<span class="number">167</span> + <span class="number">27434</span>*y^<span class="number">166</span> + <span class="number">29552</span>*y^<span class="number">165</span> + <span class="number">7105</span>*y^<span class="number">164</span> + <span class="number">22604</span>*y^<span class="number">163</span> + <span class="number">41253</span>*y^<span class="number">162</span> + <span class="number">42675</span>*y^<span class="number">161</span> + <span class="number">21153</span>*y^<span class="number">160</span> + <span class="number">32838</span>*y^<span class="number">159</span> + <span class="number">34391</span>*y^<span class="number">158</span> + <span class="number">832</span>*y^<span class="number">157</span> + <span class="number">720</span>*y^<span class="number">156</span> + <span class="number">22883</span>*y^<span class="number">155</span> + <span class="number">19236</span>*y^<span class="number">154</span> + <span class="number">33772</span>*y^<span class="number">153</span> + <span class="number">5020</span>*y^<span class="number">152</span> + <span class="number">17943</span>*y^<span class="number">151</span> + <span class="number">26967</span>*y^<span class="number">150</span> + <span class="number">30847</span>*y^<span class="number">149</span> + <span class="number">10306</span>*y^<span class="number">148</span> + <span class="number">33966</span>*y^<span class="number">147</span> + <span class="number">43255</span>*y^<span class="number">146</span> + <span class="number">20342</span>*y^<span class="number">145</span> + <span class="number">4474</span>*y^<span class="number">144</span> + <span class="number">3490</span>*y^<span class="number">143</span> + <span class="number">38033</span>*y^<span class="number">142</span> + <span class="number">11224</span>*y^<span class="number">141</span> + <span class="number">30565</span>*y^<span class="number">140</span> + <span class="number">31967</span>*y^<span class="number">139</span> + <span class="number">32382</span>*y^<span class="number">138</span> + <span class="number">9759</span>*y^<span class="number">137</span> + <span class="number">1030</span>*y^<span class="number">136</span> + <span class="number">32122</span>*y^<span class="number">135</span> + <span class="number">42614</span>*y^<span class="number">134</span> + <span class="number">14280</span>*y^<span class="number">133</span> + <span class="number">16533</span>*y^<span class="number">132</span> + <span class="number">32676</span>*y^<span class="number">131</span> + <span class="number">43070</span>*y^<span class="number">130</span> + <span class="number">36009</span>*y^<span class="number">129</span> + <span class="number">28497</span>*y^<span class="number">128</span> + <span class="number">2940</span>*y^<span class="number">127</span> + <span class="number">9747</span>*y^<span class="number">126</span> + <span class="number">22758</span>*y^<span class="number">125</span> + <span class="number">16615</span>*y^<span class="number">124</span> + <span class="number">14086</span>*y^<span class="number">123</span> + <span class="number">13038</span>*y^<span class="number">122</span> + <span class="number">39603</span>*y^<span class="number">121</span> + <span class="number">36260</span>*y^<span class="number">120</span> + <span class="number">32502</span>*y^<span class="number">119</span> + <span class="number">17619</span>*y^<span class="number">118</span> + <span class="number">17700</span>*y^<span class="number">117</span> + <span class="number">15083</span>*y^<span class="number">116</span> + <span class="number">11311</span>*y^<span class="number">115</span> + <span class="number">36496</span>*y^<span class="number">114</span> + <span class="number">1300</span>*y^<span class="number">113</span> + <span class="number">13601</span>*y^<span class="number">112</span> + <span class="number">43425</span>*y^<span class="number">111</span> + <span class="number">10376</span>*y^<span class="number">110</span> + <span class="number">11551</span>*y^<span class="number">109</span> + <span class="number">13684</span>*y^<span class="number">108</span> + <span class="number">14955</span>*y^<span class="number">107</span> + <span class="number">6661</span>*y^<span class="number">106</span> + <span class="number">12674</span>*y^<span class="number">105</span> + <span class="number">21534</span>*y^<span class="number">104</span> + <span class="number">32132</span>*y^<span class="number">103</span> + <span class="number">34135</span>*y^<span class="number">102</span> + <span class="number">43684</span>*y^<span class="number">101</span> + <span class="number">837</span>*y^<span class="number">100</span> + <span class="number">29311</span>*y^<span class="number">99</span> + <span class="number">4849</span>*y^<span class="number">98</span> + <span class="number">26632</span>*y^<span class="number">97</span> + <span class="number">26662</span>*y^<span class="number">96</span> + <span class="number">10159</span>*y^<span class="number">95</span> + <span class="number">32657</span>*y^<span class="number">94</span> + <span class="number">12149</span>*y^<span class="number">93</span> + <span class="number">17858</span>*y^<span class="number">92</span> + <span class="number">35805</span>*y^<span class="number">91</span> + <span class="number">19391</span>*y^<span class="number">90</span> + <span class="number">30884</span>*y^<span class="number">89</span> + <span class="number">42039</span>*y^<span class="number">88</span> + <span class="number">17292</span>*y^<span class="number">87</span> + <span class="number">4694</span>*y^<span class="number">86</span> + <span class="number">1497</span>*y^<span class="number">85</span> + <span class="number">1744</span>*y^<span class="number">84</span> + <span class="number">31071</span>*y^<span class="number">83</span> + <span class="number">26246</span>*y^<span class="number">82</span> + <span class="number">24402</span>*y^<span class="number">81</span> + <span class="number">22068</span>*y^<span class="number">80</span> + <span class="number">39263</span>*y^<span class="number">79</span> + <span class="number">23703</span>*y^<span class="number">78</span> + <span class="number">21484</span>*y^<span class="number">77</span> + <span class="number">12241</span>*y^<span class="number">76</span> + <span class="number">28821</span>*y^<span class="number">75</span> + <span class="number">32886</span>*y^<span class="number">74</span> + <span class="number">43075</span>*y^<span class="number">73</span> + <span class="number">35741</span>*y^<span class="number">72</span> + <span class="number">19936</span>*y^<span class="number">71</span> + <span class="number">37219</span>*y^<span class="number">70</span> + <span class="number">33411</span>*y^<span class="number">69</span> + <span class="number">8301</span>*y^<span class="number">68</span> + <span class="number">12949</span>*y^<span class="number">67</span> + <span class="number">28611</span>*y^<span class="number">66</span> + <span class="number">42654</span>*y^<span class="number">65</span> + <span class="number">6910</span>*y^<span class="number">64</span> + <span class="number">18523</span>*y^<span class="number">63</span> + <span class="number">31144</span>*y^<span class="number">62</span> + <span class="number">21398</span>*y^<span class="number">61</span> + <span class="number">36298</span>*y^<span class="number">60</span> + <span class="number">27158</span>*y^<span class="number">59</span> + <span class="number">918</span>*y^<span class="number">58</span> + <span class="number">38601</span>*y^<span class="number">57</span> + <span class="number">4269</span>*y^<span class="number">56</span> + <span class="number">5699</span>*y^<span class="number">55</span> + <span class="number">36444</span>*y^<span class="number">54</span> + <span class="number">34791</span>*y^<span class="number">53</span> + <span class="number">37978</span>*y^<span class="number">52</span> + <span class="number">32481</span>*y^<span class="number">51</span> + <span class="number">8039</span>*y^<span class="number">50</span> + <span class="number">11012</span>*y^<span class="number">49</span> + <span class="number">11454</span>*y^<span class="number">48</span> + <span class="number">30450</span>*y^<span class="number">47</span> + <span class="number">1381</span>*y^<span class="number">46</span> + <span class="number">32403</span>*y^<span class="number">45</span> + <span class="number">8202</span>*y^<span class="number">44</span> + <span class="number">8404</span>*y^<span class="number">43</span> + <span class="number">37648</span>*y^<span class="number">42</span> + <span class="number">43696</span>*y^<span class="number">41</span> + <span class="number">34237</span>*y^<span class="number">40</span> + <span class="number">36490</span>*y^<span class="number">39</span> + <span class="number">41423</span>*y^<span class="number">38</span> + <span class="number">35792</span>*y^<span class="number">37</span> + <span class="number">36950</span>*y^<span class="number">36</span> + <span class="number">31086</span>*y^<span class="number">35</span> + <span class="number">38970</span>*y^<span class="number">34</span> + <span class="number">12439</span>*y^<span class="number">33</span> + <span class="number">7963</span>*y^<span class="number">32</span> + <span class="number">16150</span>*y^<span class="number">31</span> + <span class="number">11382</span>*y^<span class="number">30</span> + <span class="number">3038</span>*y^<span class="number">29</span> + <span class="number">20157</span>*y^<span class="number">28</span> + <span class="number">23531</span>*y^<span class="number">27</span> + <span class="number">32866</span>*y^<span class="number">26</span> + <span class="number">5428</span>*y^<span class="number">25</span> + <span class="number">21132</span>*y^<span class="number">24</span> + <span class="number">13443</span>*y^<span class="number">23</span> + <span class="number">28909</span>*y^<span class="number">22</span> + <span class="number">42716</span>*y^<span class="number">21</span> + <span class="number">6567</span>*y^<span class="number">20</span> + <span class="number">24744</span>*y^<span class="number">19</span> + <span class="number">8727</span>*y^<span class="number">18</span> + <span class="number">14895</span>*y^<span class="number">17</span> + <span class="number">28172</span>*y^<span class="number">16</span> + <span class="number">30903</span>*y^<span class="number">15</span> + <span class="number">26608</span>*y^<span class="number">14</span> + <span class="number">27314</span>*y^<span class="number">13</span> + <span class="number">42224</span>*y^<span class="number">12</span> + <span class="number">42551</span>*y^<span class="number">11</span> + <span class="number">37726</span>*y^<span class="number">10</span> + <span class="number">11203</span>*y^<span class="number">9</span> + <span class="number">36816</span>*y^<span class="number">8</span> + <span class="number">5537</span>*y^<span class="number">7</span> + <span class="number">20301</span>*y^<span class="number">6</span> + <span class="number">17591</span>*y^<span class="number">5</span> + <span class="number">41279</span>*y^<span class="number">4</span> + <span class="number">7999</span>*y^<span class="number">3</span> + <span class="number">33753</span>*y^<span class="number">2</span> + <span class="number">34551</span>*y + <span class="number">9659</span></span><br><span class="line">N = <span class="number">34036</span>*y^<span class="number">177</span> + <span class="number">23068</span>*y^<span class="number">176</span> + <span class="number">13147</span>*y^<span class="number">175</span> + <span class="number">36344</span>*y^<span class="number">174</span> + <span class="number">10045</span>*y^<span class="number">173</span> + <span class="number">41049</span>*y^<span class="number">172</span> + <span class="number">17786</span>*y^<span class="number">171</span> + <span class="number">16601</span>*y^<span class="number">170</span> + <span class="number">7929</span>*y^<span class="number">169</span> + <span class="number">37570</span>*y^<span class="number">168</span> + <span class="number">990</span>*y^<span class="number">167</span> + <span class="number">9622</span>*y^<span class="number">166</span> + <span class="number">39273</span>*y^<span class="number">165</span> + <span class="number">35284</span>*y^<span class="number">164</span> + <span class="number">15632</span>*y^<span class="number">163</span> + <span class="number">18850</span>*y^<span class="number">162</span> + <span class="number">8800</span>*y^<span class="number">161</span> + <span class="number">33148</span>*y^<span class="number">160</span> + <span class="number">12147</span>*y^<span class="number">159</span> + <span class="number">40487</span>*y^<span class="number">158</span> + <span class="number">6407</span>*y^<span class="number">157</span> + <span class="number">34111</span>*y^<span class="number">156</span> + <span class="number">8446</span>*y^<span class="number">155</span> + <span class="number">21908</span>*y^<span class="number">154</span> + <span class="number">16812</span>*y^<span class="number">153</span> + <span class="number">40624</span>*y^<span class="number">152</span> + <span class="number">43506</span>*y^<span class="number">151</span> + <span class="number">39116</span>*y^<span class="number">150</span> + <span class="number">33011</span>*y^<span class="number">149</span> + <span class="number">23914</span>*y^<span class="number">148</span> + <span class="number">2210</span>*y^<span class="number">147</span> + <span class="number">23196</span>*y^<span class="number">146</span> + <span class="number">43359</span>*y^<span class="number">145</span> + <span class="number">34455</span>*y^<span class="number">144</span> + <span class="number">17684</span>*y^<span class="number">143</span> + <span class="number">25262</span>*y^<span class="number">142</span> + <span class="number">982</span>*y^<span class="number">141</span> + <span class="number">24015</span>*y^<span class="number">140</span> + <span class="number">27968</span>*y^<span class="number">139</span> + <span class="number">37463</span>*y^<span class="number">138</span> + <span class="number">10667</span>*y^<span class="number">137</span> + <span class="number">39519</span>*y^<span class="number">136</span> + <span class="number">31176</span>*y^<span class="number">135</span> + <span class="number">27520</span>*y^<span class="number">134</span> + <span class="number">32118</span>*y^<span class="number">133</span> + <span class="number">8333</span>*y^<span class="number">132</span> + <span class="number">38945</span>*y^<span class="number">131</span> + <span class="number">34713</span>*y^<span class="number">130</span> + <span class="number">1107</span>*y^<span class="number">129</span> + <span class="number">43604</span>*y^<span class="number">128</span> + <span class="number">4433</span>*y^<span class="number">127</span> + <span class="number">18110</span>*y^<span class="number">126</span> + <span class="number">17658</span>*y^<span class="number">125</span> + <span class="number">32354</span>*y^<span class="number">124</span> + <span class="number">3219</span>*y^<span class="number">123</span> + <span class="number">40238</span>*y^<span class="number">122</span> + <span class="number">10439</span>*y^<span class="number">121</span> + <span class="number">3669</span>*y^<span class="number">120</span> + <span class="number">8713</span>*y^<span class="number">119</span> + <span class="number">21027</span>*y^<span class="number">118</span> + <span class="number">29480</span>*y^<span class="number">117</span> + <span class="number">5477</span>*y^<span class="number">116</span> + <span class="number">24332</span>*y^<span class="number">115</span> + <span class="number">43480</span>*y^<span class="number">114</span> + <span class="number">33406</span>*y^<span class="number">113</span> + <span class="number">43121</span>*y^<span class="number">112</span> + <span class="number">1114</span>*y^<span class="number">111</span> + <span class="number">17198</span>*y^<span class="number">110</span> + <span class="number">22829</span>*y^<span class="number">109</span> + <span class="number">24424</span>*y^<span class="number">108</span> + <span class="number">16523</span>*y^<span class="number">107</span> + <span class="number">20424</span>*y^<span class="number">106</span> + <span class="number">36206</span>*y^<span class="number">105</span> + <span class="number">41849</span>*y^<span class="number">104</span> + <span class="number">3584</span>*y^<span class="number">103</span> + <span class="number">26500</span>*y^<span class="number">102</span> + <span class="number">31897</span>*y^<span class="number">101</span> + <span class="number">34640</span>*y^<span class="number">100</span> + <span class="number">27449</span>*y^<span class="number">99</span> + <span class="number">30962</span>*y^<span class="number">98</span> + <span class="number">41434</span>*y^<span class="number">97</span> + <span class="number">22125</span>*y^<span class="number">96</span> + <span class="number">24314</span>*y^<span class="number">95</span> + <span class="number">3944</span>*y^<span class="number">94</span> + <span class="number">18400</span>*y^<span class="number">93</span> + <span class="number">38476</span>*y^<span class="number">92</span> + <span class="number">28904</span>*y^<span class="number">91</span> + <span class="number">27936</span>*y^<span class="number">90</span> + <span class="number">41867</span>*y^<span class="number">89</span> + <span class="number">25573</span>*y^<span class="number">88</span> + <span class="number">25659</span>*y^<span class="number">87</span> + <span class="number">33443</span>*y^<span class="number">86</span> + <span class="number">18435</span>*y^<span class="number">85</span> + <span class="number">5934</span>*y^<span class="number">84</span> + <span class="number">38030</span>*y^<span class="number">83</span> + <span class="number">17563</span>*y^<span class="number">82</span> + <span class="number">24086</span>*y^<span class="number">81</span> + <span class="number">36782</span>*y^<span class="number">80</span> + <span class="number">20922</span>*y^<span class="number">79</span> + <span class="number">38933</span>*y^<span class="number">78</span> + <span class="number">23448</span>*y^<span class="number">77</span> + <span class="number">10599</span>*y^<span class="number">76</span> + <span class="number">7156</span>*y^<span class="number">75</span> + <span class="number">29044</span>*y^<span class="number">74</span> + <span class="number">23605</span>*y^<span class="number">73</span> + <span class="number">7657</span>*y^<span class="number">72</span> + <span class="number">28200</span>*y^<span class="number">71</span> + <span class="number">2431</span>*y^<span class="number">70</span> + <span class="number">3860</span>*y^<span class="number">69</span> + <span class="number">23259</span>*y^<span class="number">68</span> + <span class="number">14590</span>*y^<span class="number">67</span> + <span class="number">33631</span>*y^<span class="number">66</span> + <span class="number">15673</span>*y^<span class="number">65</span> + <span class="number">36049</span>*y^<span class="number">64</span> + <span class="number">29728</span>*y^<span class="number">63</span> + <span class="number">22413</span>*y^<span class="number">62</span> + <span class="number">18602</span>*y^<span class="number">61</span> + <span class="number">18557</span>*y^<span class="number">60</span> + <span class="number">23505</span>*y^<span class="number">59</span> + <span class="number">17642</span>*y^<span class="number">58</span> + <span class="number">12595</span>*y^<span class="number">57</span> + <span class="number">17255</span>*y^<span class="number">56</span> + <span class="number">15316</span>*y^<span class="number">55</span> + <span class="number">8948</span>*y^<span class="number">54</span> + <span class="number">38</span>*y^<span class="number">53</span> + <span class="number">40329</span>*y^<span class="number">52</span> + <span class="number">9823</span>*y^<span class="number">51</span> + <span class="number">5798</span>*y^<span class="number">50</span> + <span class="number">6379</span>*y^<span class="number">49</span> + <span class="number">8662</span>*y^<span class="number">48</span> + <span class="number">34640</span>*y^<span class="number">47</span> + <span class="number">38321</span>*y^<span class="number">46</span> + <span class="number">18760</span>*y^<span class="number">45</span> + <span class="number">13135</span>*y^<span class="number">44</span> + <span class="number">15926</span>*y^<span class="number">43</span> + <span class="number">34952</span>*y^<span class="number">42</span> + <span class="number">28940</span>*y^<span class="number">41</span> + <span class="number">13558</span>*y^<span class="number">40</span> + <span class="number">42579</span>*y^<span class="number">39</span> + <span class="number">38015</span>*y^<span class="number">38</span> + <span class="number">33788</span>*y^<span class="number">37</span> + <span class="number">12381</span>*y^<span class="number">36</span> + <span class="number">195</span>*y^<span class="number">35</span> + <span class="number">13709</span>*y^<span class="number">34</span> + <span class="number">31500</span>*y^<span class="number">33</span> + <span class="number">32994</span>*y^<span class="number">32</span> + <span class="number">30486</span>*y^<span class="number">31</span> + <span class="number">40414</span>*y^<span class="number">30</span> + <span class="number">2578</span>*y^<span class="number">29</span> + <span class="number">30525</span>*y^<span class="number">28</span> + <span class="number">43067</span>*y^<span class="number">27</span> + <span class="number">6195</span>*y^<span class="number">26</span> + <span class="number">36288</span>*y^<span class="number">25</span> + <span class="number">23236</span>*y^<span class="number">24</span> + <span class="number">21493</span>*y^<span class="number">23</span> + <span class="number">15808</span>*y^<span class="number">22</span> + <span class="number">34500</span>*y^<span class="number">21</span> + <span class="number">6390</span>*y^<span class="number">20</span> + <span class="number">42994</span>*y^<span class="number">19</span> + <span class="number">42151</span>*y^<span class="number">18</span> + <span class="number">19248</span>*y^<span class="number">17</span> + <span class="number">19291</span>*y^<span class="number">16</span> + <span class="number">8124</span>*y^<span class="number">15</span> + <span class="number">40161</span>*y^<span class="number">14</span> + <span class="number">24726</span>*y^<span class="number">13</span> + <span class="number">31874</span>*y^<span class="number">12</span> + <span class="number">30272</span>*y^<span class="number">11</span> + <span class="number">30761</span>*y^<span class="number">10</span> + <span class="number">2296</span>*y^<span class="number">9</span> + <span class="number">11017</span>*y^<span class="number">8</span> + <span class="number">16559</span>*y^<span class="number">7</span> + <span class="number">28949</span>*y^<span class="number">6</span> + <span class="number">40499</span>*y^<span class="number">5</span> + <span class="number">22377</span>*y^<span class="number">4</span> + <span class="number">33628</span>*y^<span class="number">3</span> + <span class="number">30598</span>*y^<span class="number">2</span> + <span class="number">4386</span>*y + <span class="number">23814</span></span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line"><span class="built_in">print</span>(factor(N))</span><br><span class="line"></span><br><span class="line">P = (<span class="number">34036</span>) * (y^<span class="number">65</span> + <span class="number">39688</span>*y^<span class="number">64</span> + <span class="number">22199</span>*y^<span class="number">63</span> + <span class="number">41942</span>*y^<span class="number">62</span> + <span class="number">7803</span>*y^<span class="number">61</span> + <span class="number">19710</span>*y^<span class="number">60</span> + <span class="number">14794</span>*y^<span class="number">59</span> + <span class="number">41388</span>*y^<span class="number">58</span> + <span class="number">2418</span>*y^<span class="number">57</span> + <span class="number">19208</span>*y^<span class="number">56</span> + <span class="number">39941</span>*y^<span class="number">55</span> + <span class="number">36392</span>*y^<span class="number">54</span> + <span class="number">19813</span>*y^<span class="number">53</span> + <span class="number">33864</span>*y^<span class="number">52</span> + <span class="number">29099</span>*y^<span class="number">51</span> + <span class="number">15484</span>*y^<span class="number">50</span> + <span class="number">27185</span>*y^<span class="number">49</span> + <span class="number">27721</span>*y^<span class="number">48</span> + <span class="number">31508</span>*y^<span class="number">47</span> + <span class="number">19404</span>*y^<span class="number">46</span> + <span class="number">10134</span>*y^<span class="number">45</span> + <span class="number">43481</span>*y^<span class="number">44</span> + <span class="number">3899</span>*y^<span class="number">43</span> + <span class="number">32849</span>*y^<span class="number">42</span> + <span class="number">3534</span>*y^<span class="number">41</span> + <span class="number">32086</span>*y^<span class="number">40</span> + <span class="number">14221</span>*y^<span class="number">39</span> + <span class="number">42982</span>*y^<span class="number">38</span> + <span class="number">1403</span>*y^<span class="number">37</span> + <span class="number">1619</span>*y^<span class="number">36</span> + <span class="number">36054</span>*y^<span class="number">35</span> + <span class="number">33615</span>*y^<span class="number">34</span> + <span class="number">6628</span>*y^<span class="number">33</span> + <span class="number">31709</span>*y^<span class="number">32</span> + <span class="number">6968</span>*y^<span class="number">31</span> + <span class="number">28517</span>*y^<span class="number">30</span> + <span class="number">12938</span>*y^<span class="number">29</span> + <span class="number">21124</span>*y^<span class="number">28</span> + <span class="number">10400</span>*y^<span class="number">27</span> + <span class="number">28889</span>*y^<span class="number">26</span> + <span class="number">7273</span>*y^<span class="number">25</span> + <span class="number">36442</span>*y^<span class="number">24</span> + <span class="number">14935</span>*y^<span class="number">23</span> + <span class="number">29365</span>*y^<span class="number">22</span> + <span class="number">4869</span>*y^<span class="number">21</span> + <span class="number">43562</span>*y^<span class="number">20</span> + <span class="number">6435</span>*y^<span class="number">19</span> + <span class="number">4403</span>*y^<span class="number">18</span> + <span class="number">32311</span>*y^<span class="number">17</span> + <span class="number">7575</span>*y^<span class="number">16</span> + <span class="number">28199</span>*y^<span class="number">15</span> + <span class="number">28065</span>*y^<span class="number">14</span> + <span class="number">23870</span>*y^<span class="number">13</span> + <span class="number">37314</span>*y^<span class="number">12</span> + <span class="number">15299</span>*y^<span class="number">11</span> + <span class="number">7082</span>*y^<span class="number">10</span> + <span class="number">36230</span>*y^<span class="number">9</span> + <span class="number">18367</span>*y^<span class="number">8</span> + <span class="number">12531</span>*y^<span class="number">7</span> + <span class="number">25906</span>*y^<span class="number">6</span> + <span class="number">26878</span>*y^<span class="number">5</span> + <span class="number">43073</span>*y^<span class="number">4</span> + <span class="number">11582</span>*y^<span class="number">3</span> + <span class="number">4482</span>*y^<span class="number">2</span> + <span class="number">35044</span>*y + <span class="number">31388</span>)</span><br><span class="line">Q = (y^<span class="number">112</span> + <span class="number">31097</span>*y^<span class="number">111</span> + <span class="number">15815</span>*y^<span class="number">110</span> + <span class="number">17170</span>*y^<span class="number">109</span> + <span class="number">43684</span>*y^<span class="number">108</span> + <span class="number">16873</span>*y^<span class="number">107</span> + <span class="number">17269</span>*y^<span class="number">106</span> + <span class="number">10853</span>*y^<span class="number">105</span> + <span class="number">10690</span>*y^<span class="number">104</span> + <span class="number">24864</span>*y^<span class="number">103</span> + <span class="number">10224</span>*y^<span class="number">102</span> + <span class="number">28704</span>*y^<span class="number">101</span> + <span class="number">16049</span>*y^<span class="number">100</span> + <span class="number">1154</span>*y^<span class="number">99</span> + <span class="number">40034</span>*y^<span class="number">98</span> + <span class="number">29922</span>*y^<span class="number">97</span> + <span class="number">27404</span>*y^<span class="number">96</span> + <span class="number">32514</span>*y^<span class="number">95</span> + <span class="number">40962</span>*y^<span class="number">94</span> + <span class="number">32858</span>*y^<span class="number">93</span> + <span class="number">36590</span>*y^<span class="number">92</span> + <span class="number">41302</span>*y^<span class="number">91</span> + <span class="number">20803</span>*y^<span class="number">90</span> + <span class="number">43521</span>*y^<span class="number">89</span> + <span class="number">13746</span>*y^<span class="number">88</span> + <span class="number">19857</span>*y^<span class="number">87</span> + <span class="number">21539</span>*y^<span class="number">86</span> + <span class="number">36888</span>*y^<span class="number">85</span> + <span class="number">16032</span>*y^<span class="number">84</span> + <span class="number">35825</span>*y^<span class="number">83</span> + <span class="number">24705</span>*y^<span class="number">82</span> + <span class="number">31143</span>*y^<span class="number">81</span> + <span class="number">22088</span>*y^<span class="number">80</span> + <span class="number">6686</span>*y^<span class="number">79</span> + <span class="number">37947</span>*y^<span class="number">78</span> + <span class="number">5661</span>*y^<span class="number">77</span> + <span class="number">29405</span>*y^<span class="number">76</span> + <span class="number">36071</span>*y^<span class="number">75</span> + <span class="number">35492</span>*y^<span class="number">74</span> + <span class="number">28985</span>*y^<span class="number">73</span> + <span class="number">36015</span>*y^<span class="number">72</span> + <span class="number">24095</span>*y^<span class="number">71</span> + <span class="number">34920</span>*y^<span class="number">70</span> + <span class="number">6615</span>*y^<span class="number">69</span> + <span class="number">9606</span>*y^<span class="number">68</span> + <span class="number">4255</span>*y^<span class="number">67</span> + <span class="number">22981</span>*y^<span class="number">66</span> + <span class="number">3910</span>*y^<span class="number">65</span> + <span class="number">23897</span>*y^<span class="number">64</span> + <span class="number">22711</span>*y^<span class="number">63</span> + <span class="number">23350</span>*y^<span class="number">62</span> + <span class="number">7969</span>*y^<span class="number">61</span> + <span class="number">8558</span>*y^<span class="number">60</span> + <span class="number">8001</span>*y^<span class="number">59</span> + <span class="number">8431</span>*y^<span class="number">58</span> + <span class="number">3314</span>*y^<span class="number">57</span> + <span class="number">23364</span>*y^<span class="number">56</span> + <span class="number">39391</span>*y^<span class="number">55</span> + <span class="number">32722</span>*y^<span class="number">54</span> + <span class="number">2543</span>*y^<span class="number">53</span> + <span class="number">22196</span>*y^<span class="number">52</span> + <span class="number">24189</span>*y^<span class="number">51</span> + <span class="number">19420</span>*y^<span class="number">50</span> + <span class="number">10649</span>*y^<span class="number">49</span> + <span class="number">19070</span>*y^<span class="number">48</span> + <span class="number">23863</span>*y^<span class="number">47</span> + <span class="number">19597</span>*y^<span class="number">46</span> + <span class="number">39699</span>*y^<span class="number">45</span> + <span class="number">7620</span>*y^<span class="number">44</span> + <span class="number">25067</span>*y^<span class="number">43</span> + <span class="number">29912</span>*y^<span class="number">42</span> + <span class="number">14998</span>*y^<span class="number">41</span> + <span class="number">14492</span>*y^<span class="number">40</span> + <span class="number">31322</span>*y^<span class="number">39</span> + <span class="number">43145</span>*y^<span class="number">38</span> + <span class="number">32006</span>*y^<span class="number">37</span> + <span class="number">38976</span>*y^<span class="number">36</span> + <span class="number">32534</span>*y^<span class="number">35</span> + <span class="number">6972</span>*y^<span class="number">34</span> + <span class="number">37351</span>*y^<span class="number">33</span> + <span class="number">30104</span>*y^<span class="number">32</span> + <span class="number">6032</span>*y^<span class="number">31</span> + <span class="number">33729</span>*y^<span class="number">30</span> + <span class="number">27110</span>*y^<span class="number">29</span> + <span class="number">5268</span>*y^<span class="number">28</span> + <span class="number">2974</span>*y^<span class="number">27</span> + <span class="number">2985</span>*y^<span class="number">26</span> + <span class="number">31610</span>*y^<span class="number">25</span> + <span class="number">28364</span>*y^<span class="number">24</span> + <span class="number">34924</span>*y^<span class="number">23</span> + <span class="number">17414</span>*y^<span class="number">22</span> + <span class="number">28813</span>*y^<span class="number">21</span> + <span class="number">43680</span>*y^<span class="number">20</span> + <span class="number">32175</span>*y^<span class="number">19</span> + <span class="number">18248</span>*y^<span class="number">18</span> + <span class="number">25171</span>*y^<span class="number">17</span> + <span class="number">31185</span>*y^<span class="number">16</span> + <span class="number">30125</span>*y^<span class="number">15</span> + <span class="number">36836</span>*y^<span class="number">14</span> + <span class="number">7218</span>*y^<span class="number">13</span> + <span class="number">11292</span>*y^<span class="number">12</span> + <span class="number">31123</span>*y^<span class="number">11</span> + <span class="number">40360</span>*y^<span class="number">10</span> + <span class="number">34093</span>*y^<span class="number">9</span> + <span class="number">39606</span>*y^<span class="number">8</span> + <span class="number">2788</span>*y^<span class="number">7</span> + <span class="number">27277</span>*y^<span class="number">6</span> + <span class="number">21835</span>*y^<span class="number">5</span> + <span class="number">1331</span>*y^<span class="number">4</span> + <span class="number">32614</span>*y^<span class="number">3</span> + <span class="number">25020</span>*y^<span class="number">2</span> + <span class="number">20981</span>*y + <span class="number">12108</span>)</span><br><span class="line">phi = (<span class="number">43753</span>^<span class="number">65</span>-<span class="number">1</span>)*(<span class="number">43753</span>^<span class="number">112</span>-<span class="number">1</span>)  </span><br><span class="line">d = inverse_mod(e, phi)  </span><br><span class="line">ans = R(<span class="string">&quot;1&quot;</span>)  </span><br><span class="line">temp= C  </span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):  </span><br><span class="line">    <span class="keyword">if</span>(d % <span class="number">2</span> == <span class="number">1</span>):  </span><br><span class="line">        ans = (ans * temp) % N  </span><br><span class="line">        d = d - <span class="number">1</span>  </span><br><span class="line">    d = d / <span class="number">2</span>  </span><br><span class="line">    temp = (temp * temp) % N  </span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">0</span>):  </span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line"><span class="comment">#快速幂  </span></span><br><span class="line"><span class="built_in">print</span> (ans)  </span><br><span class="line"></span><br><span class="line">m = <span class="string">&quot;125*y^62 + 111*y^61 + 114*y^60 + 117*y^59 + 53*y^58 + 51*y^57 + 51*y^56 + 100*y^55 + 106*y^54 + 110*y^53 + 102*y^52 + 106*y^51 + 100*y^50 + 104*y^49 + 101*y^48 + 117*y^47 + 52*y^46 + 52*y^45 + 57*y^44 + 48*y^43 + 50*y^42 + 107*y^41 + 35*y^40 + 101*y^39 + 114*y^38 + 117*y^37 + 99*y^36 + 101*y^35 + 115*y^34 + 110*y^33 + 105*y^32 + 95*y^31 + 116*y^30 + 117*y^29 + 98*y^28 + 95*y^27 + 110*y^26 + 117*y^25 + 102*y^24 + 95*y^23 + 115*y^22 + 105*y^21 + 95*y^20 + 97*y^19 + 101*y^18 + 107*y^17 + 105*y^16 + 95*y^15 + 109*y^14 + 111*y^13 + 114*y^12 + 102*y^11 + 95*y^10 + 65*y^9 + 83*y^8 + 82*y^7 + 123*y^6 + 114*y^5 + 118*y^4 + 101*y^3 + 116*y^2 + 97*y + 119&quot;</span></span><br><span class="line">ml = m.split(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ml)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ml[i])):</span><br><span class="line">        <span class="keyword">if</span> ml[i][j] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        tmp += ml[i][j]</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(tmp))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h2 id="结语">结语</h2>
<p>以后可能只能每天更一题了，因为后面每题要学的东西都挺多，要完全搞懂得花好些功夫 ML的学习计划已经拖了好几天了 艹，该死的驾考，拿来吧你，赶紧搞完好空出时间来 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-7-28</title>
    <url>/uncategorized/2021/07/28/vacation_week3/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-7-28</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>无</p>
<h2 id="de1ctf2019xorz">[De1CTF2019]xorz</h2>
<p>加密代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> flag,plain</span><br><span class="line"></span><br><span class="line">key=flag.strip(<span class="string">&quot;de1ctf&#123;&quot;</span>).strip(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(key)&lt;<span class="number">38</span>)</span><br><span class="line">salt=<span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">ki=cycle(key)</span><br><span class="line">si=cycle(salt)</span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(p) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(ki)) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="built_in">print</span> cipher</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c</span></span><br></pre></td></tr></table></figure>
<p>有plain，有key，不禁让人想起维吉尼亚密码，想起之前做过的一道<a href="https://blog.csdn.net/weixin_52446095/article/details/119003999?spm=1001.2014.3001.5501">[NCTF2019]Sore</a> 于是就参照维吉尼亚的爆破方法来解题，参考<a href="https://blog.csdn.net/Ni9htMar3/article/details/53371817">示例代码</a> 首先是Kasiski 实验：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCD</span>(<span class="params">step</span>):</span></span><br><span class="line">    gcd_list = []</span><br><span class="line">    buf = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(step):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;None has ben found&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># find GCD</span></span><br><span class="line">        step_min = <span class="built_in">max</span>(step) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> con <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, step_min + <span class="number">1</span>):</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> each_step <span class="keyword">in</span> step:</span><br><span class="line">                <span class="keyword">if</span> each_step % con:</span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                gcd_list.append(con)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(gcd_list):</span><br><span class="line">        <span class="keyword">return</span> gcd_list</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># find GCD list</span></span><br><span class="line">        <span class="keyword">for</span> con <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, step_min + <span class="number">1</span>):</span><br><span class="line">            gcd_list.append([con, <span class="built_in">len</span>(step)])</span><br><span class="line">            <span class="keyword">for</span> each_step <span class="keyword">in</span> step:</span><br><span class="line">                <span class="keyword">if</span> each_step % con:</span><br><span class="line">                    gcd_list[con - <span class="number">2</span>][<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> gcd_list:</span><br><span class="line">            <span class="keyword">if</span> each[<span class="number">1</span>]:</span><br><span class="line">                buf.append(each)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(buf)):</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> buf[j][<span class="number">1</span>] &lt; buf[j - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                    tem = buf[j - <span class="number">1</span>]</span><br><span class="line">                    buf[j - <span class="number">1</span>] = buf[j]</span><br><span class="line">                    buf[j] = tem</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">string1, string2</span>):</span></span><br><span class="line">    k, t = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string1)):</span><br><span class="line">        <span class="keyword">if</span> string1[t] == string2[<span class="number">0</span>] <span class="keyword">and</span> t+<span class="built_in">len</span>(string2) &lt;= <span class="built_in">len</span>(string1):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string2)):</span><br><span class="line">                <span class="keyword">if</span> string1[t+k] != string2[k]:</span><br><span class="line">                    k -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> k == <span class="built_in">len</span>(string2)-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> t == <span class="built_in">len</span>(string1)-<span class="number">1</span> <span class="keyword">or</span> string1 == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kasiski</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    sec_msg = cipher</span><br><span class="line">    step = []</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    lenth = <span class="built_in">len</span>(sec_msg)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lenth - <span class="number">5</span>):</span><br><span class="line">        flag_tem = <span class="number">0</span></span><br><span class="line">        i_tem = i</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(sec_msg[i_tem + <span class="number">3</span>:], sec_msg[i_tem:i_tem + <span class="number">3</span>])</span><br><span class="line">            flag_tem = find(sec_msg[i_tem + <span class="number">3</span>:], sec_msg[i_tem:i_tem + <span class="number">3</span>])</span><br><span class="line">            <span class="comment"># flag_tem = sec_msg[i_tem + 3:].find(sec_msg[i_tem:i_tem + 3])</span></span><br><span class="line">            <span class="built_in">print</span>(flag_tem)</span><br><span class="line">            <span class="keyword">if</span> flag_tem == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            flag_tem += <span class="number">3</span></span><br><span class="line">            step.append(flag_tem)</span><br><span class="line">            i_tem += flag_tem</span><br><span class="line">    <span class="comment"># print(&#x27;step:&#x27;, step)</span></span><br><span class="line">    <span class="built_in">print</span>(GCD(step))</span><br><span class="line">    <span class="keyword">return</span> GCD(step)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cipher = <span class="string">&#x27;nsfAIHFrMuLynuCApeEstxJOzniQuyBVfAChDEznppfAiEIDcyNFBsCjsLvGlDtqztuaHvHbCmuyGNsIMhGlDtbotCoDzDjhyBzHGfHGfoHsuhlssIMvwlixBHHGfDRjoCKrapNIwqNyuxIBACQhtMwCmMCfEBpsrzEuiLGBoMipTkxrznoHfAkqwzvxuzCzDbLyApCGvjpqxkuwpgsLrqsVfCRwzlFmtlyrhuyEiivruFRpCRjkEDrqEqthyGwgsLnQvHmtzwDEznopBpsDOxvgBGIKzurFQxwQxkptutxzmfeLFQoRpJRvrpHxilwqeqMeiiIGBsQpCCvrptAlHsDnuRltmHuCGFpsBcwnsEblsswEPwerNpIADpJRCvwQxrntJltNpfAuFBwRstytoyvcepwtwqNlmmNGFsJjsQvkyvrkrstxJOzniQvNvzdDUdyJzjqzsErqxEjguyFMNwtPjsDwjoDfCdxzvftNGyzKjCEjsDxjqsjGMqFpimGpIADpJRFkovHJlpthyHnpqyBOHhmDMmoosClwiehEzmffOGMvDxDSnnyLuXFlwYEPvosQxCrRxwCpDswHopxDruvEzsOgBsXxDLvvlMpezwpnOOsjrANzHDsLCnoqLCepgtaHNHfpysNHGfOMqkyvlozxHetJGfvNuCGKjIRnoDLAbpyxnJCpqeLxuBCuwCpGpOnkEywrEPrisHrItSiDQgvtLCipyJnDzwtxBnNoKxpWuCxwuiqwDmIJxffIqSGSbzGpqlDnXvNIwqNzoxBrQoXuDRjonsAozzHeBjweTBBypDtIGnvHGDiosItqGvusGrIFzoNRjsyykrExweMvDtsLGItVbAIkxrFnuEyDmuIzxMNBIyziDJfyqLqbmjAtqOEiivnwyNgwCtmzsCgFxIfEMEiiBrFzNgxRdEEKqbHtJltIEmiNzygGfHyknVwnmJtJrxvyewNBSCTsHCnptxHlFiDnJHtohmuyKztHRkvwKxopfImuWFurIGuGRpGCcCDzntlxqevJCfEHLQoXxtIgzEynqEnCgsGztiLnHrBmDQgBEGCephprHJFtiFnHrXpJAqEwvBqlwItECpbvNuuHMvIRAwFKrZtyplMvJttFnSGhuLyuzwsHfyldhcvCjicGJzzztBvrlLBXxjHoDBlcsOGzwEuNWgkCKjdzBweDdHbwuyCHSmtIknezjqDtCeDDnfxBvHuzcDSvmlJAlFxtlIOsfCuyQoXtEJcIEznplrtsEIrtMNuIIFiIRjonsAozzHeBRltgFBMsCjCRjoHAwqpwIiCzzmhjuIsAfHyknTLFXDywevDCtxNvGsRitNtknLrZlqAyIvteeHLNvHovqjoAJxYlgAyvJChsNFBsVbHQwzAGBboyDbuNzsiuGGslbNzglpujrDjxtIvCpyHqWvQjHRokDaBXtihhuyterNFuMzoNRjsyyFepsXsqDouluGmvDqGMdkmDHoprtmrzCfhMuyKztHSrzzKnaEtqeIJCfeNzyRNzDSykyLClrtuoHvCjhyBHwSJHyknTCwbHxweFMzcevySrHelFgxDzntlxptyIJmmNGFsJjsypnLDufpfCdTWlohcHMsCuDEqDzLqbAfGkMDEilyEMvDxpQokosklFyIhuxlsvIHMsKZDSeyFDmkElttxzCpjzGBsFpsBcwEzrkrNBtEJmjkMuyGzjsgvrzMpeExweMvDoxABCBFuDypCHwAjpgJtICpemxaIMNvGCpyEYxlyNAlMvtujIESofpDLKClAmTpBtruMthlNGBsQfIFgxeznopBtruvqfAEvxGQjsGpqzFrqxtHtBTGfvSyCHSmtIknDswalktwFvCfrNFQsQfLykDtFpXCtJntJFuwCqyGHuIGpqzFCepgtnsCpteHquzKXwyvSoAmtlxXwuIEvtNBNvDxxLfyHOqbCjIhuTDfpFGBsSjrIgDDswamtJgxOzmhjuIsAfpRkmvwCQsjCIwvGfmNGIvDshFgGlKBqlssiDBCjkBGHsWuIMooSwAbTxpitrljxuFyqNosRcupLqbCjHtEAJpyLqIIFiIMqSDLjoEjsgyQtokBrLHGfGCuDzxCepiDuwCDiixyyBSntwqEvwnmtyZeuKtujIEGsRitQcsolqbyxweIvtevCtBHzgICtGlJmMwjpsuosbxMqyDQfHQkxrOqbyxDmuwzeCMnSGOmtyuoEGHlFNBeqItgmNFjvNfqCqBDGvbmtsyjCluhyCLsRttBvrpzniwtJtEAxfFOGcDTuIFgnzMpemfrkyIxztIpEsSBGCpDJGDdzsCaHDofxIBMvDbHIgnxwbepBpsBJzlmHtuHLfHMtDzxorysNYEPnpyFqNsKmHFgGlKwqEtDsEMpbxGruBXnDPgWlQkbTBxlBOsfryKNHHntgnvHsCZsDpIIvteKIGSCTsIGeupLhbDLDaxzlexBrHWKmqCqxEzrpmjCcxMthlNBPsQitPgSwDFXEhwyqdHfrNBPsQbCBukEvxtytCtxDDciHpBoMeHFgGpFCXyivoJJyulypuFQpJQgvdzntlqzetvwmeLBOBCjIgoolFBepBplAzoprwruzKuwCykJsAlFssiJosfrMuyGzusMyxzFCetxqiwwCpAHoyoSvEJqyvAwdzqshEMDfXBrHHGfrytBzMBbwxIaHOpeeHqcKzurFgnswAdzfGoKIobrxnLCTosrjoCwFbCjDnBTlcsOGzwUfDPusIGCepwzitNzoxBrLwCfpLfDswBlylIhuxlsvIHMsKxpQrvlQrkrBpsiHzliarNGHonMwBPQnpTyLaIKwbCCAAwSwtPAtlRIvlssfKIyzEFyNvDlxBuupHCqCDxnwOzhvuozCQuwCiywvAfylpntNzxeMBFroiDCdolFmFHfHsEMEpjusLoHeHFgnqsuizkutxzrphxnGvNsHCdEEamfosIsqTloCNuCBFpGBqkyQCetsvTxzEimHtQwSizGfCtKrcEmtyMvyuxItLoAuwCiywvAfylNoKClwiNBFsSuwConzACXyiCoJNlzeHLNvHovghDswHclqAovAEiiSsuzKpuDdEEACpmfsivTzvwuLuBXuwGpqEGCeprlhuIEiiLvxsVbHMxoCKqbrtIovAsfvBBLGDbCBekxwxspwIoCzjpyLvxsNorCvyzLqfDyxmuNsfwuvxbNJAJlEDLFXEhwyqdEimHxczKkJQvGlLleTxpitdrbzyuyFRpBCoyCwxcsjGdEPriLyEyUDuHMooxGAbEnrkuODTlyGICJuwCfyFyqlqkBeYHypxGnxoSzDScxJExopxweIvteMEAIKgvGPAEALqbEmxnwNrprHnMHzsIyiktFcepsplBJqbwOqxsMtwCikGwvblpxsIosfrMuyvDmsFgBsswazzIaDyDbmxVNGQbxLkxraCpDyprJDyhxIEuwMJzLqGeznkHmptICpemxvNrznCLgkCCriwjsmuNsfvynwvDexLoInGjqAtrkuOlohNBIyNvIKABpvqryyxnwClueHqJISjIMpwJznXoIDnJTzvAuANwSJHyknjGDZlsLeqMtueQuCzDPzyARFJAvFuIhEPrirIJsCTstEqxysvfDxNoKMCjhylIIVpCRioEQxrCtLnxJCtiIEuBXuwGpqdznhpuIhqIrjrAnLCTosRjyFyqAtiNoKHpbrCGQvzuNMwClAmVzzGeqGwzeLrHHFpxLikHsHXyDLhuMpBvyLIIQfpJnIrGrkrmDmuvquiLJuFCtHFgkDCnaxjneqCTteCqcADbCRkDEGxFHfHnJGJjrAGIvDsXPgkwDHativoxJxfezGyFVbGBuRFJAvFuCoMdDbmxgBsSixLiCDLjoEnCgiCpseHnHrApJEjDswAqthzeJvyekIGvoBlDLvrpyxaofBcqMCpyMrFxTtIGpDtEnQsjCsxzHbpErxoKmIFgGlQjozzCdyOEjpFFBsFpIFgBzOwezwHervnlXBrHGGfvMvyyACPsjLaLzousGruBCJLyxootjZvGDyyOmfkuANCQbxLnsvwjYlxIaHyTofOpEsStXQyolJClRtsABGEiiJnLsMuHypnxGCepwHaDypwiLLvCCzLCpDzNnolsssJJzevCtBHTosCtDswAlzkDfJCpdeLEIIRfAQqDswHtzzAdDOrfxMBuyDeIMvrpKtfytGaDTEimHtvISJHRwmvsAlFssoDOsffyAwvEpGOwsEwjtsnAeYBzutLrNHXtDymsyyFbEjHpuxtbpFLGMMfrIcxoEHmlsIscTsvrNvHuGbIPgkwDHdlAtmuLFjxynFCSpuNtyEwlqttCiDvHbCvHNWFpIQqkvwmXyDLaOdojhHGwoQfIFqErzRcpqIsEylnrBnJDXbAJqpDMmapsIhuRlzsFqjvNfqCmoALpltsvaHJFohuAxoQpJLfSHsBalrCnuvCceQyCBFJuCnDDGmXxswaFKJjjSBOKzoIRquyGFqsjIrKOsJhIANyMpLUjITLFXDoJsJOsbxMuyzNpzCfCzvjjysxcuOsfAuLMvDltNvqzAwdlwDuDylohuEIIMexLjoCturphDaJvyeeFyaCCJLGurJGDZzzAdLzmfiHGBsQfiFcDDsuiTrvoyIrusNrFzzcDSvSnGDiouGorvmmCNrFzXpJUjkEamfofutuMTxiHGBCLfpLfrzORdzyHisFlohuyFoMeLFcDDuqlzqXmIPAqsMrxHNhDRqxpPCclqAavOpsMArNCTuDDjoCwkrENsoDOqfiFyCyDjIgtolDuvotCtjCluwNHztCptQpDtFCbCjHtCzEpsGHwvQjvFvxzOJizyDfFzzqpyrMDDdxynvJLqfDtCeFNJdlInHoKzHRiEJLqbJmpvuCpsiEryDRbHIkxrEnfqNBgEDyheJCFMLzHCnpHznkTlDbqxvusMpBCNmCCzDdwyqprqeHdEtwOpBoRuJNknBMnpEnDnyIxzsJvHwNoXKgkyzxtotNoKFypAQuuHXpJPgqzAwdEtsoJDwmCIHxCHuiFgkyKFbCnHyEPoprNVNvHozgcwmMCezBsoYFypAcFQszsxRukDLDmtiFuuNEjsHQVwRoIyullvjpEmtruNEpjNuyAAvIFgupwyplxziDBxfeFBNCErJCuDtGwpEtDHuyCpzyBPsQmpQvclLDoofNwyOsulCFYBFmxQjlltnqsfIsyIEimMAyKOjrRwBpznpHwxtyIrTlyJuGOstRvIlxobnytdrPEwiLLACNeAMqutFpxyDLaOJyfxCzyKGfCQjoHwwqEtIhuGlemyFLCNnLyADswqbwqsoMItoxBrIHGfGUkxrVKXDptdCzHieNVNvNvvFvkmGDqlqAtxDDtxOszWIvHRhsyABepiIeBGtokSBOoApJRKntvwqvsDwMCluxBrBsKmIMukJaovzzLaDOEpoHBQHGfIPwDsamlyyznERHieNVNvHozydyFLrqTrHoHMJJxIyxGNnpLAzpGyipfqoKOtuEvBOHzmAgmxzOrpTxDrJJqnmMFyJDsNzqnJaClwipbEPEFzyAIzCTIPcnwsCbCfCdQxvmiSsIFHoHRcxnwRqsnCkYzGfrGvMGSipRiyovjjXfJryxpJxMsOBMzSMpDpNnoEjAlqIJcsxLuBXuwGpqTxHlFiDyEPDueLGGwRtxLioGwAvmtsy&#x27;</span></span><br><span class="line">    kasiski(cipher)</span><br></pre></td></tr></table></figure>
<p>稍微修改了一下原代码，放弃了原来只对字符串起作用的.find()方法，重新定义了一个find函数，使得对列表也管用 这里选用的cipher是[NCTF2019]Sore中的cipher，试验与结果相吻合 <img data-src="https://img-blog.csdnimg.cn/3b4fe5664c864b3f8d80b97eaa43fa4d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 得到本题的key的长度代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> kasiski <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">salt = <span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si = cycle(salt)</span><br><span class="line">c = <span class="string">&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span></span><br><span class="line">list_c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">2</span>):</span><br><span class="line">    list_c.append(<span class="built_in">int</span>(c[i:i + <span class="number">2</span>], <span class="number">16</span>) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)))</span><br><span class="line"><span class="built_in">print</span>(list_c)</span><br><span class="line">len_key = <span class="built_in">max</span>(kasiski(list_c))</span><br><span class="line"><span class="built_in">print</span>(len_key)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/635fa959e251453195d3e37a34dac79d.png" alt="在这里插入图片描述" /> 后来找wp时发现也是正确的 但是下一步重合指数攻击和字母频率分析出现了瓶颈，原来的维吉尼亚密码爆破采用的把加密视作凯撒密码，只要进行位移即可，但本题是异或加密，几乎是重新把脚本写一遍了 直接找到了<a href="https://github.com/De1ta-team/De1CTF2019/blob/master/writeup/crypto/Xorz/README_zh.md">官方wp</a>，稍微修改了一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span>(<span class="params">c</span>):</span></span><br><span class="line">    codeintlist = []</span><br><span class="line">    codeintlist.extend(</span><br><span class="line">        (<span class="built_in">map</span>(<span class="keyword">lambda</span> i: <span class="built_in">int</span>(c[i:i + <span class="number">2</span>], <span class="number">16</span>), <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">2</span>))))</span><br><span class="line">    salt = <span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">    si = cycle(salt)</span><br><span class="line">    newcodeintlist = [ci ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)) <span class="keyword">for</span> ci <span class="keyword">in</span> codeintlist]</span><br><span class="line">    <span class="keyword">return</span> newcodeintlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeyPool</span>(<span class="params">cipher, stepSet, plainSet, keySet</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33]</span></span><br><span class="line"><span class="string">        返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，密钥字符集为数字列表。</span></span><br><span class="line"><span class="string">            形如&#123;</span></span><br><span class="line"><span class="string">                    1:[[0x11]],</span></span><br><span class="line"><span class="string">                    3:[</span></span><br><span class="line"><span class="string">                        [0x11,0x33,0x46],</span></span><br><span class="line"><span class="string">                        [0x22,0x58],</span></span><br><span class="line"><span class="string">                        [0x33]</span></span><br><span class="line"><span class="string">                       ]</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    keyPool = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> stepSet:</span><br><span class="line">        maybe = [<span class="literal">None</span>] * step</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(step):</span><br><span class="line">            maybe[pos] = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> keySet:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> cipher[pos::step]:</span><br><span class="line">                    <span class="keyword">if</span> c ^ k <span class="keyword">not</span> <span class="keyword">in</span> plainSet:</span><br><span class="line">                        flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    maybe[pos].append(k)</span><br><span class="line">        <span class="keyword">for</span> posPool <span class="keyword">in</span> maybe:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(posPool) == <span class="number">0</span>:</span><br><span class="line">                maybe = []</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(maybe) != <span class="number">0</span>:</span><br><span class="line">            keyPool[step] = maybe</span><br><span class="line">    <span class="keyword">return</span> keyPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calCorrelation</span>(<span class="params">cpool</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;传入字典，形如&#123;&#x27;e&#x27;:2,&#x27;p&#x27;:3&#125;</span></span><br><span class="line"><span class="string">        返回可能性，0~1,值越大可能性越大</span></span><br><span class="line"><span class="string">        (correlation between the decrypted column letter frequencies and</span></span><br><span class="line"><span class="string">        the relative letter frequencies for normal English text)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    frequencies = &#123;<span class="string">&quot;e&quot;</span>: <span class="number">0.12702</span>, <span class="string">&quot;t&quot;</span>: <span class="number">0.09056</span>, <span class="string">&quot;a&quot;</span>: <span class="number">0.08167</span>, <span class="string">&quot;o&quot;</span>: <span class="number">0.07507</span>, <span class="string">&quot;i&quot;</span>: <span class="number">0.06966</span>,</span><br><span class="line">                   <span class="string">&quot;n&quot;</span>: <span class="number">0.06749</span>, <span class="string">&quot;s&quot;</span>: <span class="number">0.06327</span>, <span class="string">&quot;h&quot;</span>: <span class="number">0.06094</span>, <span class="string">&quot;r&quot;</span>: <span class="number">0.05987</span>, <span class="string">&quot;d&quot;</span>: <span class="number">0.04253</span>,</span><br><span class="line">                   <span class="string">&quot;l&quot;</span>: <span class="number">0.04025</span>, <span class="string">&quot;c&quot;</span>: <span class="number">0.02782</span>, <span class="string">&quot;u&quot;</span>: <span class="number">0.02758</span>, <span class="string">&quot;m&quot;</span>: <span class="number">0.02406</span>, <span class="string">&quot;w&quot;</span>: <span class="number">0.02360</span>,</span><br><span class="line">                   <span class="string">&quot;f&quot;</span>: <span class="number">0.02228</span>, <span class="string">&quot;g&quot;</span>: <span class="number">0.02015</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0.01974</span>, <span class="string">&quot;p&quot;</span>: <span class="number">0.01929</span>, <span class="string">&quot;b&quot;</span>: <span class="number">0.01492</span>,</span><br><span class="line">                   <span class="string">&quot;v&quot;</span>: <span class="number">0.00978</span>, <span class="string">&quot;k&quot;</span>: <span class="number">0.00772</span>, <span class="string">&quot;j&quot;</span>: <span class="number">0.00153</span>, <span class="string">&quot;x&quot;</span>: <span class="number">0.00150</span>, <span class="string">&quot;q&quot;</span>: <span class="number">0.00095</span>,</span><br><span class="line">                   <span class="string">&quot;z&quot;</span>: <span class="number">0.00074</span>&#125;</span><br><span class="line">    relative = <span class="number">0.0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    fpool = <span class="string">&#x27;etaoinshrdlcumwfgypbvkjxqz&#x27;</span></span><br><span class="line">    total = <span class="built_in">sum</span>(cpool.values())  <span class="comment"># 总和应包括字母和其他可见字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cpool.keys():</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> fpool:</span><br><span class="line">            relative += frequencies[i] * cpool[i] / total</span><br><span class="line">    <span class="keyword">return</span> relative</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyseFrequency</span>(<span class="params">cfreq</span>):</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> posFreq <span class="keyword">in</span> cfreq:</span><br><span class="line">        mostRelative = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> keyChr <span class="keyword">in</span> posFreq.keys():</span><br><span class="line">            r = calCorrelation(posFreq[keyChr])</span><br><span class="line">            <span class="keyword">if</span> r &gt; mostRelative:</span><br><span class="line">                mostRelative = r</span><br><span class="line">                keychar = keyChr</span><br><span class="line">        key.append(keychar)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFrequency</span>(<span class="params">cipher, keyPoolList</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 传入的密文作为数字列表处理</span></span><br><span class="line"><span class="string">        传入密钥的字符集应为列表，依次包含各字节字符集。</span></span><br><span class="line"><span class="string">            形如[[0x11,0x12],[0x22]]</span></span><br><span class="line"><span class="string">        返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频</span></span><br><span class="line"><span class="string">            形如[&#123;</span></span><br><span class="line"><span class="string">                    0x11:&#123;&#x27;a&#x27;:2,&#x27;b&#x27;:3&#125;,</span></span><br><span class="line"><span class="string">                    0x12:&#123;&#x27;e&#x27;:6&#125;</span></span><br><span class="line"><span class="string">                 &#125;,</span></span><br><span class="line"><span class="string">                 &#123;</span></span><br><span class="line"><span class="string">                    0x22:&#123;&#x27;g&#x27;:1&#125;</span></span><br><span class="line"><span class="string">                 &#125;]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    freqList = []</span><br><span class="line">    keyLen = <span class="built_in">len</span>(keyPoolList)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(keyLen):</span><br><span class="line">        posFreq = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> keyPoolList[i]:</span><br><span class="line">            posFreq[k] = <span class="built_in">dict</span>()</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> cipher[i::keyLen]:</span><br><span class="line">                p = <span class="built_in">chr</span>(k ^ c)</span><br><span class="line">                posFreq[k][p] = posFreq[k][p] + <span class="number">1</span> <span class="keyword">if</span> p <span class="keyword">in</span> posFreq[k] <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        freqList.append(posFreq)</span><br><span class="line">    <span class="keyword">return</span> freqList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigenereDecrypt</span>(<span class="params">cipher, key</span>):</span></span><br><span class="line">    plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cur = <span class="number">0</span></span><br><span class="line">    ll = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">        plain += <span class="built_in">chr</span>(c ^ key[cur])</span><br><span class="line">        cur = (cur + <span class="number">1</span>) % ll</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ps = []</span><br><span class="line">    ks = []</span><br><span class="line">    ss = []</span><br><span class="line">    ps.extend(<span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>))</span><br><span class="line">    ks.extend(<span class="built_in">range</span>(<span class="number">0xff</span> + <span class="number">1</span>))</span><br><span class="line">    ss.extend(<span class="built_in">range</span>(<span class="number">38</span>))</span><br><span class="line">    cipher = getCipher(c)</span><br><span class="line"></span><br><span class="line">    keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keyPool:</span><br><span class="line">        freq = getFrequency(cipher, keyPool[i])</span><br><span class="line">        key = analyseFrequency(freq)</span><br><span class="line">        plain = vigenereDecrypt(cipher, key)</span><br><span class="line">        <span class="built_in">print</span>(plain, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, key)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>思想与维吉尼亚密码爆破相同，利用plain是一段有意义的字符，统计字母频率来得到key和plain 结果如下： <img data-src="https://img-blog.csdnimg.cn/62ccf4b4262a4f60bf8485bd9b3ba660.png" alt="在这里插入图片描述" /> 容易发现，得到的key的第二位是不对的 经过修改，结果为：W3lc0m3tOjo1nu55un1ojOt3q0cl3W</p>
<p>出了官方给出的解法，还找到了<a href="https://blog.csdn.net/ao52426055/article/details/110420027">另一种解法</a>，使得密文不同位置对应的同一key的字母之间的汉明距离最小来得到key的长度，进而还原key和plain 至于什么是<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174#:~:text=%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%98%AF%E4%BD%BF%E7%94%A8,%E6%95%B0%E5%B0%B1%E6%98%AF%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E3%80%82">汉明距离</a>，摘自百度百科： <img data-src="https://img-blog.csdnimg.cn/392f37229f8f4c3d8b9306bf0d29ba95.png" alt="在这里插入图片描述" /> 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify, hexlify</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">a, b</span>):</span>  <span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_distance</span>(<span class="params">b1, b2</span>):</span></span><br><span class="line">    differing_bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += <span class="built_in">bin</span>(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break_single_key_xor</span>(<span class="params">text</span>):</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    possible_space = <span class="number">0</span></span><br><span class="line">    max_possible = <span class="number">0</span></span><br><span class="line">    letters = string.ascii_letters.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">        maxpossible = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">            <span class="keyword">if</span> (a == b):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> letters <span class="keyword">and</span> c != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxpossible += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxpossible &gt; max_possible:</span><br><span class="line">            max_possible = maxpossible</span><br><span class="line">            possible_space = a</span><br><span class="line">    key = text[possible_space] ^ <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">chr</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salt = <span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">si = cycle(salt)</span><br><span class="line">b = unhexlify(</span><br><span class="line">    <span class="string">b&#x27;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&#x27;</span>)</span><br><span class="line">plain = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> c <span class="keyword">in</span> b.decode()])</span><br><span class="line">b = unhexlify(plain)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(b) // KEYSIZE</span><br><span class="line">    list_b = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        list_b.append(b[i * KEYSIZE: (i + <span class="number">1</span>) * KEYSIZE])</span><br><span class="line"></span><br><span class="line">    normalized_distance = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_b) - <span class="number">1</span>):</span><br><span class="line">        normalized_distance += hamming_distance(list_b[i], list_b[i + <span class="number">1</span>])</span><br><span class="line">    normalized_distance = <span class="built_in">float</span>(normalized_distance) / (KEYSIZE * (<span class="built_in">len</span>(list_b) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = <span class="built_in">sorted</span>(normalized_distances, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(normalized_distances)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE, _ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">    block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(KEYSIZE)]</span><br><span class="line">    <span class="keyword">for</span> i, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = <span class="built_in">bytearray</span>(keys * <span class="built_in">len</span>(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key is:&quot;</span>, keys)</span><br><span class="line">        s = <span class="built_in">bytes</span>.decode(plaintext)</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>对代码进行了一些修改，得到结果： <img data-src="https://img-blog.csdnimg.cn/232b0175520c4f8a8ba0dbbdfcbcccce.png" alt="在这里插入图片描述" /> 经过测试，在某些情况下，该程序对key长度的计算会有偏差，会出现key内容缺失，或者重复的情况，但是对plain的还原比较准确 与第一种方法相比各有优劣 以<code>key = 'a24jq354qgikamzasmglzhjapwmiq3OMM93FI'</code>为例 方法一的结果为： <img data-src="https://img-blog.csdnimg.cn/e95229e381ea4a039a9acdf0bcf015ff.png" alt="在这里插入图片描述" /> 方法二的结果为： <img data-src="https://img-blog.csdnimg.cn/6d658064cd5a445f8f5ebad6f4902fe7.png" alt="在这里插入图片描述" /> 具体解题时，可以对照着看</p>
<p>还有一个问题就是方法二代码的第37行有一个<code>^ 0x20</code>不知道是什么意思，但是去掉了又不行，希望明白的师傅能指点指点</p>
<h2 id="结语">结语</h2>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-5-13</title>
    <url>/uncategorized/2021/05/13/week7-8/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-5-13</url>
    <content><![CDATA[<h2 id="buuctf-每日打卡-2021-5-13">BUUCTF 每日打卡 2021-5-13</h2>
<h2 id="引言">引言</h2>
<p>无</p>
<h2 id="basic-crypto">basic-crypto</h2>
<p>附件内容： <figure class="highlight python"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure> 先尝试把二进制转换成字符，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">&#xx27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    m += <span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>
<p>结果为： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Uh-oh, looks like we have another block of text, <span class="keyword">with</span> some sort of special encoding. Can you figure out what this encoding <span class="keyword">is</span>? (hint: <span class="keyword">if</span> you look carefully, yo<span class="string">u&#x27;ll notice that there only characters present are A-Z, a-z, 0-9, and sometimes / and +. See if you can find an encoding that looks like this one.)</span></span><br><span class="line"><span class="string">TmV3IGNoYWxsZW5nZSEgQ2FuIHlvdSBmaWd1cmUgb3V0IHdoYXQncyBnb2luZyBvbiBoZXJlPyBJdCBsb29rcyBsaWtlIHRoZSBsZXR0ZXJzIGFyZSBzaGlmdGVkIGJ5IHNvbWUgY29uc3RhbnQuIChoaW50OiB5b3UgbWlnaHQgd2FudCB0byBzdGFydCBsb29raW5nIHVwIFJvbWFuIHBlb3BsZSkuCmt2YnNxcmQsIGl5ZSdibyBrdnd5Y2QgZHJvYm8hIFh5ZyBweWIgZHJvIHBzeGt2IChreG4gd2tpbG8gZHJvIHJrYm5vY2QuLi4pIHprYmQ6IGsgY2VsY2RzZGVkc3l4IG1zenJvYi4gU3ggZHJvIHB5dnZ5Z3N4cSBkb2hkLCBTJ2ZvIGRrdW94IHdpIHdvY2NrcW8ga3huIGJvenZrbW9uIG9mb2JpIGt2enJrbG9kc20gbXJrYmttZG9iIGdzZHIgayBteWJib2N6eXhub3htbyBkeSBrIG5zcHBvYm94ZCBtcmtia21kb2IgLSB1eHlneCBrYyBrIGNlbGNkc2RlZHN5eCBtc3pyb2IuIE1reCBpeWUgcHN4biBkcm8gcHN4a3YgcHZrcT8gcnN4ZDogR28gdXh5ZyBkcmtkIGRybyBwdmtxIHNjIHF5c3hxIGR5IGxvIHlwIGRybyBweWJ3a2QgZWRwdmtxey4uLn0gLSBncnNtciB3b2t4YyBkcmtkIHNwIGl5ZSBjb28gZHJrZCB6a2Rkb2J4LCBpeWUgdXh5ZyBncmtkIGRybyBteWJib2N6eXhub3htb2MgcHliIGUsIGQsIHAsIHYgaywga3huIHEga2JvLiBJeWUgbWt4IHpieWxrbHZpIGd5YnUgeWVkIGRybyBib3drc3hzeHEgbXJrYmttZG9iYyBsaSBib3p2a21zeHEgZHJvdyBreG4gc3hwb2Jic3hxIG15d3d5eCBneWJuYyBzeCBkcm8gT3hxdnNjciB2a3hxZWtxby4gS3h5ZHJvYiBxYm9rZCB3b2RyeW4gc2MgZHkgZWNvIHBib2Flb3htaSBreGt2aWNzYzogZ28gdXh5ZyBkcmtkICdvJyBjcnlnYyBleiB3eWNkIHlwZG94IHN4IGRybyBrdnpya2xvZCwgY3kgZHJrZCdjIHpieWxrbHZpIGRybyB3eWNkIG15d3d5eCBtcmtia21kb2Igc3ggZHJvIGRvaGQsIHB5dnZ5Z29uIGxpICdkJywga3huIGN5IHl4LiBZeG1vIGl5ZSB1eHlnIGsgcG9nIG1ya2JrbWRvYmMsIGl5ZSBta3ggc3hwb2IgZHJvIGJvY2QgeXAgZHJvIGd5Ym5jIGxrY29uIHl4IG15d3d5eCBneWJuYyBkcmtkIGNyeWcgZXogc3ggZHJvIE94cXZzY3Igdmt4cWVrcW8uCnJnaG54c2RmeXNkdGdodSEgcWdmIGlzYWsgY3RodHVpa2UgZGlrIHprbnRoaGt4IHJ4cWxkZ254c2xpcSByaXN5eWtobmsuIGlreGsgdHUgcyBjeXNuIGNneCBzeXkgcWdmeCBpc3hlIGtjY2d4ZHU6IGZkY3lzbntoMHZfZGk0ZHVfdmk0ZF90X3I0eXlfcnhxbGQwfS4gcWdmIHZ0eXkgY3RoZSBkaXNkIHMgeWdkIGdjIHJ4cWxkZ254c2xpcSB0dSBwZnVkIHpmdHlldGhuIGdjYyBkaXR1IHVneGQgZ2MgenN1dHIgYmhndnlrZW5rLCBzaGUgdGQgeGtzeXlxIHR1IGhnZCB1ZyB6c2Ugc2Nka3ggc3l5LiBpZ2xrIHFnZiBraHBncWtlIGRpayByaXN5eWtobmsh</span></span><br></pre></td></tr></table></figure> 明显是 base64 加密 进行 <a href="https://tool.oschina.net/encrypt?type=3">base64 解密</a> 结果为： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">New challenge! Can you figure out what<span class="string">&#x27;s going on here? It looks like the letters are shifted by some constant. (hint: you might want to start looking up Roman people).</span></span><br><span class="line"><span class="string">kvbsqrd, iye&#x27;</span>bo kvwycd drobo! Xyg pyb dro psxkv (kxn wkilo dro rkbnocd...) zkbd: k celcdsdedsyx mszrob. Sx dro pyvvygsxq dohd, S<span class="string">&#x27;fo dkuox wi wocckqo kxn bozvkmon ofobi kvzrklodsm mrkbkmdob gsdr k mybboczyxnoxmo dy k nsppoboxd mrkbkmdob - uxygx kc k celcdsdedsyx mszrob. Mkx iye psxn dro psxkv pvkq? rsxd: Go uxyg drkd dro pvkq sc qysxq dy lo yp dro pybwkd edpvkq&#123;...&#125; - grsmr wokxc drkd sp iye coo drkd zkddobx, iye uxyg grkd dro mybboczyxnoxmoc pyb e, d, p, v k, kxn q kbo. Iye mkx zbylklvi gybu yed dro bowksxsxq mrkbkmdobc li bozvkmsxq drow kxn sxpobbsxq mywwyx gybnc sx dro Oxqvscr vkxqekqo. Kxydrob qbokd wodryn sc dy eco pboaeoxmi kxkvicsc: go uxyg drkd &#x27;</span>o<span class="string">&#x27; crygc ez wycd ypdox sx dro kvzrklod, cy drkd&#x27;</span>c zbylklvi dro wycd mywwyx mrkbkmdob sx dro dohd, pyvvygon li <span class="string">&#x27;d&#x27;</span>, kxn cy yx. Yxmo iye uxyg k pog mrkbkmdobc, iye mkx sxpob dro bocd yp dro gybnc lkcon yx mywwyx gybnc drkd cryg ez sx dro Oxqvscr vkxqekqo.</span><br><span class="line">rghnxsdfysdtghu! qgf isak cthtuike dik zknthhkx rxqldgnxsliq risyykhnk. ikxk tu s cysn cgx syy qgfx isxe kccgxdu: fdcysn&#123;h0v_di4du_vi4d_t_r4yy_rxqld0&#125;. qgf vtyy cthe disd s ygd gc rxqldgnxsliq tu pfud zftyethn gcc ditu ugxd gc zsutr bhgvykenk, she td xksyyq tu hgd ug zse scdkx syy. iglk qgf khpgqke dik risyykhnk!</span><br></pre></td></tr></table></figure> 根据 hint: you might want to start looking up Roman people 知道是<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒密码</a> <img data-src="https://img-blog.csdnimg.cn/20210513184102321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 最后还有替换密码 直接<a href="https://quipqiup.com/">爆破</a> 记得先把下划线去掉 结果为： <img data-src="https://img-blog.csdnimg.cn/20210513184317454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> utflag{n0w_th4ts_wh4t_i_c4ll_crypt0}</p>
<h2 id="dp_leaking_1s_very_dangerous">dp_leaking_1s_very_d@angerous</h2>
<p>看题目就知道是个 dp(dq) 泄露问题 之前<a href="https://blog.csdn.net/weixin_52446095/article/details/115445313?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162089763116780262561085%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162089763116780262561085&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-115445313.pc_v2_rank_blog_default&amp;utm_term=dp">详细推导</a>过，这里不再赘述 直接抄代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span></span><br><span class="line">c = <span class="number">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span></span><br><span class="line">dp = <span class="number">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    p = (e*dp-<span class="number">1</span>) // k +<span class="number">1</span></span><br><span class="line">    q = n // p</span><br><span class="line">    <span class="keyword">if</span> (n - p*q) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(p, q)</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>结果为：wctf2020{dp_leaking_1s_very_d@angerous}</p>
<h1 id="结语">结语</h1>
<p>希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 每日打卡 2021-8-11</title>
    <url>/uncategorized/2021/08/11/vacation_week4-5/BUUCTF%20%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%202021-8-11</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<p>这两天把博客里里外外翻新了一遍，拖更了，抱歉</p>
<h2 id="xnuca2018baby_crypto">[XNUCA2018]baby_crypto</h2>
<p>题目给了个加密的伪代码文件： The 26 letters a, b, c, ..., y, z correspond to the integers 0, 1, 2, ..., 25 len(key_a) = m len(key_k) = n c[i] = (p[i] * key_a[i % m] + key_k[i % n]) % 26</p>
<p>p is plain text, only lowercase letters are refered to. c is encrypted text</p>
<p>I have appended the flag at the end of plain text, the format of which is like 'flagis......' Now you have the encrypted text, Good luck!</p>
<p>给了一大串密文 显然又是个类似于维吉尼亚密码的加密，区别就是多了个<code>key_a</code>先作乘法操作 首先尝试进行Kasiski 实验 代码见我2021-7-28的博客的<a href="https://blog.csdn.net/weixin_52446095/article/details/119183523?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162876982416780262541313%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162876982416780262541313&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-119183523.pc_v2_rank_blog_default&amp;utm_term=%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A&amp;spm=1018.2226.3001.4450">[De1CTF2019]xorz</a> 跑了几分钟，结果如下： <img data-src="https://img-blog.csdnimg.cn/cde9324018cd44dd94e98a067d328831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 比较可能的值有6，3，2 再试试<a href="https://www.guballa.de/vigenere-solver">维吉尼亚爆破网站</a>，由于key_a的存在，应该不大可能得到准确的key_b，结果如下： <img data-src="https://img-blog.csdnimg.cn/dc0410fa53334fb699522af73abfd9aa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 基本可以确定key_b的长度为6 对后面的步骤研究的不是很透彻，就去找<a href="https://blog.csdn.net/weixin_44110537/article/details/107947158">wp</a>了 物品计算key_b的长度用的是重合指数，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">best_index = <span class="number">0.065</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">dic_index = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">0.04253</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">0.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,</span><br><span class="line">             <span class="string">&#x27;h&#x27;</span>: <span class="number">0.06094</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">0.06966</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">0.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">0.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">0.04025</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">0.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">0.06749</span>,</span><br><span class="line">             <span class="string">&#x27;o&#x27;</span>: <span class="number">0.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">0.01929</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">0.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">0.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">0.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">0.09056</span>, <span class="string">&#x27;u&#x27;</span>: <span class="number">0.02758</span>,</span><br><span class="line">             <span class="string">&#x27;v&#x27;</span>: <span class="number">0.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">0.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">0.00150</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">0.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">0.00074</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_of_coincidence</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    计算字符串的重合指数(所有字母出现频率的平方和</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>  <span class="comment"># 给定字母表</span></span><br><span class="line">    freq = &#123;&#125;  <span class="comment"># 统计字母频率(frequency)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        freq[i] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 先全部初始化为0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        freq[i] = freq[i] + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 统计频率</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        index = index + (freq[i] * (freq[i] - <span class="number">1</span>)) / (<span class="built_in">len</span>(s) * (<span class="built_in">len</span>(s) - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_of_coincidence_m</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    计算明文s中的各字母的频率与英文字母中的频率的吻合程度.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>  <span class="comment"># 给定字母表</span></span><br><span class="line">    freq = &#123;&#125;  <span class="comment"># 统计字母频率(frequency)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        freq[i] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 先全部初始化为0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        freq[i] = freq[i] + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 统计频率</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        index = index + freq[i] / <span class="built_in">len</span>(s) * dic_index[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cycle</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    求出最符合统计学的m,n的最小公共周期,方法为通过爆破足够大的周期样本,观察成倍出现的周期.</span></span><br><span class="line"><span class="string">    计算方法为解出每一个子密文段的重合指数和然后求平均值 再与最佳重合指数相减 误差在0.01以内.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    cycle = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        average_index = <span class="number">0</span>  <span class="comment"># 平均重合指数初始化为0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span>.join(c[j + i * x] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c) // i))</span><br><span class="line">            index = index_of_coincidence(s)</span><br><span class="line">            average_index += index</span><br><span class="line">        average_index = average_index / i - best_index</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(average_index) &lt; <span class="number">0.01</span>:</span><br><span class="line">            cycle.append(i)</span><br><span class="line">    <span class="keyword">return</span> cycle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cycle = get_cycle(c)</span><br><span class="line"><span class="built_in">print</span>(cycle)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/e623a4c800494578b7d19ebed6db3af0.png" alt="在这里插入图片描述" /> 都是6的倍数，可以推测key_b的长度为6 然后利用各字母在英文中的出现频率爆破key_a和key_b：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">length = <span class="number">6</span></span><br><span class="line">best_index = <span class="number">0.065</span></span><br><span class="line">dic_index = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">0.04253</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">0.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,</span><br><span class="line">             <span class="string">&#x27;h&#x27;</span>: <span class="number">0.06094</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">0.06966</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">0.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">0.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">0.04025</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">0.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">0.06749</span>,</span><br><span class="line">             <span class="string">&#x27;o&#x27;</span>: <span class="number">0.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">0.01929</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">0.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">0.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">0.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">0.09056</span>, <span class="string">&#x27;u&#x27;</span>: <span class="number">0.02758</span>,</span><br><span class="line">             <span class="string">&#x27;v&#x27;</span>: <span class="number">0.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">0.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">0.00150</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">0.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">0.00074</span>&#125;</span><br><span class="line">alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>  <span class="comment"># 给定字母表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_of_coincidence_m</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 计算明文s中的各字母的频率与英文字母中的频率的吻合程度.</span></span><br><span class="line">    freq = &#123;&#125;  <span class="comment"># 统计字母频率(frequency)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        freq[i] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 先全部初始化为0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        freq[i] = freq[i] + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 统计频率</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        index = index + freq[i] / <span class="built_in">len</span>(s) * dic_index[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c, i, j</span>):</span></span><br><span class="line">    <span class="comment"># 通过i,j解出与之相对应的密文段</span></span><br><span class="line">    m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">        m += alpha[((alpha.index(x) - j) * gmpy2.invert(i, <span class="number">26</span>)) % <span class="number">26</span>]</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    得到某一密文段的单个字符key i j</span></span><br><span class="line"><span class="string">    方法为暴力枚举所有的可能性,找到最符合统计学规律的 i,j 即该密文段的重合指数与最佳重合指数误差小于0.01</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> ka <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(ka, <span class="number">26</span>) != <span class="number">1</span>:  <span class="comment"># i对26的逆元不只一个,造成明文不唯一,因此不符合条件.</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> kb <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            m = decrypt(c, ka, kb)</span><br><span class="line">            index = index_of_coincidence_m(m)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(index - best_index) &lt; <span class="number">0.01</span>:</span><br><span class="line">                <span class="keyword">return</span> (ka, kb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_key</span>(<span class="params">c, length</span>):</span></span><br><span class="line">    <span class="comment"># 得到一个周期内的所有的密文段的key</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        temps = <span class="string">&#x27;&#x27;</span>.join([c[i + x * length] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c) // length)])</span><br><span class="line">        <span class="built_in">print</span>(get_key(temps))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_all_key(c, length)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/ef58821fb18b4ea79789b94757cf56da.png" alt="在这里插入图片描述" /> 发现key_a以3为周期，推测key_a长度为3，得到key_a和key_b 最后还原明文：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keya = [<span class="number">19</span>, <span class="number">7</span>, <span class="number">23</span>]</span><br><span class="line">keyb = [<span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">key_a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key_b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keya)):</span><br><span class="line">    key_a += alpha[keya[i]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keyb)):</span><br><span class="line">    key_b += alpha[keyb[i]]</span><br><span class="line"><span class="built_in">print</span>(key_a, key_b)</span><br><span class="line">len_a = <span class="built_in">len</span>(keya)</span><br><span class="line">len_b = <span class="built_in">len</span>(keyb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    plaintext += alpha[((alpha.index(c[i]) - keyb[i % len_b]) * gmpy2.invert(keya[i % len_a], <span class="number">26</span>)) % <span class="number">26</span>]</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure>
<p>结果为： <img data-src="https://img-blog.csdnimg.cn/e6986955580a4f91a8489a6af7a33e37.png" alt="在这里插入图片描述" /> 后来对代码作了一些修改来解[De1CTF2019]xorz，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"></span><br><span class="line">best_index = <span class="number">0.065</span></span><br><span class="line">dic_index = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">0.04253</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">0.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,</span><br><span class="line">             <span class="string">&#x27;h&#x27;</span>: <span class="number">0.06094</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">0.06966</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">0.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">0.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">0.04025</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">0.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">0.06749</span>,</span><br><span class="line">             <span class="string">&#x27;o&#x27;</span>: <span class="number">0.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">0.01929</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">0.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">0.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">0.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">0.09056</span>, <span class="string">&#x27;u&#x27;</span>: <span class="number">0.02758</span>,</span><br><span class="line">             <span class="string">&#x27;v&#x27;</span>: <span class="number">0.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">0.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">0.00150</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">0.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">0.00074</span>&#125;</span><br><span class="line">alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>  <span class="comment"># 给定字母表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_of_coincidence_m</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 计算明文s中的各字母的频率与英文字母中的频率的吻合程度.</span></span><br><span class="line">    s = s.lower().replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    freq = &#123;&#125;  <span class="comment"># 统计字母频率(frequency)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        freq[i] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 先全部初始化为0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        freq[i] = freq[i] + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 统计频率</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        index = index + freq[i] / <span class="built_in">len</span>(s) * dic_index[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c, k</span>):</span></span><br><span class="line">    <span class="comment"># 通过i,j解出与之相对应的密文段</span></span><br><span class="line">    m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x ^ k &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x ^ k &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(</span><br><span class="line">                <span class="string">&#x27;,&#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(<span class="string">&#x27;;&#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(<span class="string">&#x27;`&#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">or</span> x ^ k == <span class="built_in">ord</span>(<span class="string">&#x27;\&#x27;&#x27;</span>):</span><br><span class="line">            m += <span class="built_in">chr</span>(x ^ k)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    方法为暴力枚举所有的可能性,找到最符合统计学规律的 i,j 即该密文段的重合指数与最佳重合指数误差小于0.01</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>, <span class="number">127</span>):</span><br><span class="line">        m = decrypt(c, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m) == <span class="built_in">len</span>(c):</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            index = index_of_coincidence_m(m)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(index - best_index) &lt; <span class="number">0.1</span>:</span><br><span class="line">                <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_key</span>(<span class="params">c, length</span>):</span></span><br><span class="line">    <span class="comment"># 得到一个周期内的所有的密文段的key</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        temps = [c[i + x * length] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c) // length)]</span><br><span class="line">        <span class="built_in">print</span>(temps)</span><br><span class="line">        key.append(get_key(temps))</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c&quot;</span></span><br><span class="line">length = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span>(<span class="params">c</span>):</span></span><br><span class="line">    codeintlist = []</span><br><span class="line">    codeintlist.extend(</span><br><span class="line">        (<span class="built_in">map</span>(<span class="keyword">lambda</span> i: <span class="built_in">int</span>(c[i:i + <span class="number">2</span>], <span class="number">16</span>), <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">2</span>))))</span><br><span class="line">    salt = <span class="string">&quot;WeAreDe1taTeam&quot;</span></span><br><span class="line">    si = cycle(salt)</span><br><span class="line">    newcodeintlist = [ci ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(si)) <span class="keyword">for</span> ci <span class="keyword">in</span> codeintlist]</span><br><span class="line">    <span class="keyword">return</span> newcodeintlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = getCipher(c)</span><br><span class="line">key = get_all_key(c, length)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">key0 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> k:</span><br><span class="line">        key0 += <span class="built_in">chr</span>(k)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key0 += <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(key0)</span><br><span class="line"><span class="comment"># W3lcm3tOjo1n5un1ojt3mcl3W</span></span><br><span class="line"></span><br><span class="line">ki = cycle(key0)</span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    plaintext += <span class="built_in">chr</span>(c[i] ^ <span class="built_in">ord</span>(<span class="built_in">next</span>(ki)))</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure>
<p>得到结果为： <img data-src="https://img-blog.csdnimg.cn/33dff4c138104b02a9cffcf1572890bb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 可能是因为给的密文长度比较短，无法完整还原key和明文</p>
<p>后来我又思考了两个问题：由于本题key_b的长度是key_a的倍数，那么如果是<span class="math inline">\(gcd(len(key_a), len(key_b)) &gt; 1\)</span>的情况呢？或者是<span class="math inline">\(gcd(len(key_a), len(key_b)) = 1\)</span>的情况呢？上述几种方法是否仍然适用呢？讨论如下： 我们采用本题的明文，首先用python实现加密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">key_a = </span><br><span class="line">key_b = </span><br><span class="line">m = <span class="built_in">len</span>(key_a)</span><br><span class="line">n = <span class="built_in">len</span>(key_b)</span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain)):</span><br><span class="line">    c += alpha[((<span class="built_in">ord</span>(plain[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) * (<span class="built_in">ord</span>(key_a[i % m]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) + <span class="built_in">ord</span>(key_b[i % n]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) % <span class="number">26</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<h3 id="gcdlenkey_a-lenkey_b-1">1、<span class="math inline">\(gcd(len(key_a), len(key_b)) &gt; 1\)</span></h3>
<p>以<code>key_a = 'fuck'</code>，<code>key_b = 'ohshit'</code>为例，Kasiski 实验结果如下： <img data-src="https://img-blog.csdnimg.cn/2dc61db3bd354f6293767bbdd330c9d7.png" alt="在这里插入图片描述" /> 网站爆破结果如下： <img data-src="https://img-blog.csdnimg.cn/f02f9dfdc6ab4e46ac89823694c5d12d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 重合指数结果如下： <img data-src="https://img-blog.csdnimg.cn/7b0a4be5a712469189466256fa5e556d.png" alt="在这里插入图片描述" /> 可以发现Kasiski 实验和重合指数给出的是最大公因数，而网站爆破给出的是最小公倍数 以长度为6爆破key，无法得到结果： <img data-src="https://img-blog.csdnimg.cn/cbc6c57a76f742058aeaa1109e183bab.png" alt="在这里插入图片描述" /> 以最小公倍数为长度爆破key，得到结果： <img data-src="https://img-blog.csdnimg.cn/90f0a207086b4e6d9bffc4f610b1f2a8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 除了第一位，其他都不对 可以认为，只有对key的长度的推断是可信</p>
<h3 id="gcdlenkey_a-lenkey_b-1-1">2、<span class="math inline">\(gcd(len(key_a), len(key_b)) = 1\)</span></h3>
<p>以<code>key_a = 'fuck'</code>，<code>key_b = 'wdnmd'</code>为例，Kasiski 实验结果如下： <img data-src="https://img-blog.csdnimg.cn/30edfce2504e4ecdb3977b3b330db3fa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 网站爆破结果如下： <img data-src="https://img-blog.csdnimg.cn/d5559f9ad66746f581235ee8f4cc436d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 重合指数结果如下： <img data-src="https://img-blog.csdnimg.cn/1bfd532213184a2a888349e56b3c3ab9.png" alt="在这里插入图片描述" /> 可以发现Kasiski 实验和重合指数给出的是正确的key_b长度，而网站爆破给出的仍然是最小公倍数 但是以长度为5爆破key，无法得到结果： <img data-src="https://img-blog.csdnimg.cn/856527eb3e1f44bc80be1071a917544f.png" alt="在这里插入图片描述" /> 以最小公倍数为长度爆破key，得到结果： <img data-src="https://img-blog.csdnimg.cn/47fb57e2e33244ebbb2199863eec72d3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MjQ0NjA5NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 除了第一位，其他都不对 也可以认为，只有对key的长度的推断是可信</p>
<h2 id="结语">结语</h2>
<p>虽然上述实验并不具有代表性，可能因为所选的key而导致结果的不可信；也可能是由于选用最小公倍数为key的长度导致密文被分割的段数减少，从而无法得到正确答案 不过让我掌握了对类似维吉尼亚密码加密的解法，还是有收获的 希望继续坚持</p>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
</search>
